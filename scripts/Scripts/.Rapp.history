dim(sam_results)[1]
e_matrix <- exprs(eset)#
#MAplot of normalize data #
d_means <- rowMeans(e_matrix[, 4:6]) - rowMeans(e_matrix[, 1:3])#
a_means <- rowMeans(e_matrix)#
smoothScatter(a_means, d_means, xlab="Average Intensity", ylab="Ratio", main=paste(treatment,"vs",control, "(After VSN normalization)"))#
points(a_means[rownames(imp_genes_exprs)], d_means[rownames(imp_genes_exprs)], pch=6,col="red")#
points(a_means[as.character(sam_results[["Name"]])], d_means[as.character(sam_results[["Name"]])], pch=4,col="green")
e_matrix <- exprs(eset)#
#MAplot of normalize data #
d_means <- rowMeans(e_matrix[, 4:6]) - rowMeans(e_matrix[, 1:3])#
a_means <- rowMeans(e_matrix)#
smoothScatter(a_means, d_means, xlab="Average Intensity", ylab="Ratio", main=paste(treatment,"vs",control, "(After VSN normalization)"))#
points(a_means[rownames(imp_genes_exprs)], d_means[rownames(imp_genes_exprs)], pch=4,col="red")#
points(a_means[as.character(sam_results[["Name"]])], d_means[as.character(sam_results[["Name"]])], pch=6,col="green")
e_matrix <- exprs(eset)#
#MAplot of normalize data #
d_means <- rowMeans(e_matrix[, 4:6]) - rowMeans(e_matrix[, 1:3])#
a_means <- rowMeans(e_matrix)#
smoothScatter(a_means, d_means, xlab="Average Intensity", ylab="Ratio", main=paste(treatment,"vs",control, "(After VSN normalization)"))#
points(a_means[rownames(imp_genes_exprs)], d_means[rownames(imp_genes_exprs)], pch=4,col="red")#
points(a_means[as.character(sam_results[["Name"]])], d_means[as.character(sam_results[["Name"]])], pch=1,col="green")
e_matrix <- exprs(eset)#
#MAplot of normalize data #
d_means <- rowMeans(e_matrix[, 4:6]) - rowMeans(e_matrix[, 1:3])#
a_means <- rowMeans(e_matrix)#
smoothScatter(a_means, d_means, xlab="Average Intensity", ylab="Ratio", main=paste(treatment,"vs",control, "(After VSN normalization)"))#
points(a_means[rownames(imp_genes_exprs)], d_means[rownames(imp_genes_exprs)], pch=4,col="red")#
points(a_means[as.character(sam_results[["Name"]])], d_means[as.character(sam_results[["Name"]])], pch=16,col="green")
e_matrix <- exprs(eset)#
#MAplot of normalize data #
d_means <- rowMeans(e_matrix[, 4:6]) - rowMeans(e_matrix[, 1:3])#
a_means <- rowMeans(e_matrix)#
smoothScatter(a_means, d_means, xlab="Average Intensity", ylab="Ratio", main=paste(treatment,"vs",control, "(After VSN normalization)"))#
points(a_means[rownames(imp_genes_exprs)], d_means[rownames(imp_genes_exprs)], pch=8,col="red")#
points(a_means[as.character(sam_results[["Name"]])], d_means[as.character(sam_results[["Name"]])], pch=16,col="green")
points(a_means[rownames(imp_genes_exprs)], d_means[rownames(imp_genes_exprs)], pch=8,col="red")
e_matrix <- exprs(eset)#
#MAplot of normalize data #
d_means <- rowMeans(e_matrix[, 4:6]) - rowMeans(e_matrix[, 1:3])#
a_means <- rowMeans(e_matrix)#
smoothScatter(a_means, d_means, xlab="Average Intensity", ylab="Ratio", main=paste(treatment,"vs",control, "(After VSN normalization)"))#
points(a_means[rownames(imp_genes_exprs)], d_means[rownames(imp_genes_exprs)], pch=8,col="red")#
points(a_means[as.character(sam_results[["Name"]])], d_means[as.character(sam_results[["Name"]])], pch=21,col="green")
e_matrix <- exprs(eset)#
#MAplot of normalize data #
d_means <- rowMeans(e_matrix[, 4:6]) - rowMeans(e_matrix[, 1:3])#
a_means <- rowMeans(e_matrix)#
smoothScatter(a_means, d_means, xlab="Average Intensity", ylab="Ratio", main=paste(treatment,"vs",control, "(After VSN normalization)"))#
points(a_means[rownames(imp_genes_exprs)], d_means[rownames(imp_genes_exprs)], pch=8,col="red")#
points(a_means[as.character(sam_results[["Name"]])], d_means[as.character(sam_results[["Name"]])], pch=20,col="green")
rm(list=ls(all=TRUE))#
#Libraries#
library(oligo)#
library("pd.110413.mglo.cag.exp")#
#
#Functions#
#
#build data.frame with signals information to be used for ggplot graphics#
ggplot_dataframe = function(x) {#
#
	exprs_df <- data.frame(signal= numeric(), Dataset=factor(),  Treatment= factor())#
	if (class(x) == "ExpressionFeatureSet") {#
		for (i in 1:length(pm(x)[1,])) {#
			Dataset <- colnames(pm(x))[i]#
			signals <- pm(x)[,i]#
			Treatment <- as.character(x[["Sample_Name"]][i])#
			exprs_df <- rbind(#
							exprs_df,#
							data.frame(#
								signal=signals,#
								Dataset=rep(Dataset,length(signals)),#
								Treatment=rep(Treatment,length(signals)))#
							)#
		}#
	}#
	else {#
		for (i in 1:length(exprs(x)[1,])) {#
			Dataset <- colnames(exprs(x))[i]#
			signals <- exprs(x)[,i]#
			Treatment <- as.character(x[["Sample_Name"]][i])#
			exprs_df <- rbind(#
							exprs_df,#
							data.frame(#
								signal=signals,#
								Dataset=rep(Dataset,length(signals)),#
								Treatment=rep(Treatment,length(signals)))#
							)#
		}#
	}#
	return(exprs_df)#
}#
#++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++#
out_path = "~/Documents/Yulien_data/Scripts/"#
out_base_name = "VSN_Final_Results_Differential_Expression"#
#Treatment and control to analyse #
treatment <- "4DS"#
control <- "M.furfur"#
out_name = paste(out_base_name,treatment,"vs",control)#
#Device#
pdf(paste(out_path, out_name, ".pdf", sep=""))#
#++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++#
#
#Input Data#
#xys_files#
xys_files_path <- "~/Documents/Yulien_data/Raw_Data_Files/Pair_Files"#
xys.files <- list.xysfiles( xys_files_path, full.names=TRUE ) #list xys_files#
#phenoData#
pheno_file <- "~/Documents/Yulien_data/Design_information/chip_data.tab"#
theData = read.table(pheno_file, row.names=1, header=TRUE,sep="\t")#
theData = subset(theData, select= c("Sample_Name"))#
#
lvls <- c( "channel1", "channel2", "_ALL_" )#
metadata <- data.frame( channel=factor("_ALL_", levels=lvls), labelDescription="Channels" )#
#
#AnnotatedDataFrame building#
pheno_data <- new("AnnotatedDataFrame", data=theData, varMetadata=metadata)#
#ExpressionFeatureSet building using xys_files#
raw_exprs_set <- read.xysfiles( xys.files,#
								pkgname="pd.110413.mglo.cag.exp",#
								phenoData=pheno_data,#
								sampleNames=c("M.furfur-1",#
											"M.globosa-1",#
											"M.globosa-2",#
											"M.globosa-3",#
											"M.furfur-2",#
											"4DS-1",#
											"4DST80-1",#
											"M.furfur-3",#
											"4DST80-2",#
											"4DS-2",#
											"4DST80-3",#
											"4DS-3")#
								)#
#Idexes of the datasets related to the treatment and control specified#
index_1 <- which(raw_exprs_set[["Sample_Name"]] == treatment)#
index_2 <- which(raw_exprs_set[["Sample_Name"]] == control)#
all_indexes <- c(index_1,index_2)#
#Create a ExpressioFeatureSet subset with the datasets related to the specified treatment and control#
exprs_set_subset <- raw_exprs_set[,all_indexes]#
#Oligo default distribution graphics for raw data#
#boxplot(exprs_set_subset, main=paste("Raw Data", treatment,"vs",control))#
#hist(exprs_set_subset, main=paste("Raw Data", treatment, "vs", control))#
#
#ggplot distribution graphics for raw data#
exprs_df <- ggplot_dataframe(exprs_set_subset)#
library(ggplot2)#
p <- ggplot(exprs_df,aes(y=log2(signal),x=Dataset))#
p + geom_boxplot(aes(fill=Treatment)) #+ geom_jitter(alpha = I(1/300))#
#
p <- ggplot(exprs_df, aes(x=log2(signal)))#
p + geom_density(aes(fill=Dataset), alpha= 0.3)#
#
#ExpressionFeatureSet to matrix#
#
eset <- rma(exprs_set_subset, normalize=FALSE, background=FALSE)#
#
e_matrix <- 2^exprs(eset)#
#
#Basic MAplot applying log2 to raw data#
d_means <- log2(rowMeans(e_matrix[, 4:6])) - log2(rowMeans(e_matrix[, 1:3]))#
a_means <- (log2(rowMeans(e_matrix[,4:6])) + log2(rowMeans(e_matrix[,1:3]))) / 2#
smoothScatter(a_means, d_means, xlab="Average Intensity", ylab="Log2-ratio", main=paste(treatment,"vs",control, "(Applying log2 to raw data)"))#
#
#Signal Data Processing #
#bacgroundCorrect (oligo method)#
raw <- exprs_set_subset#
#raw <- backgroundCorrect(exprs_set_subset, "rma") # Add noise to the dataset, in this case#
raw_begin <- raw#
pms = pm(raw) #ExpressionFeatureSet to matrix, ignoring spots with NA signal#
pmsVSN = vsn::vsnMatrix(pms) #vsn "normalization" of signal data#
require("vsn")#
#meanvsSd plots #
meanSdPlot(pmsVSN, ranks=TRUE)#
meanSdPlot(pmsVSN, ranks=FALSE)#
#vsn normalized data, store in a vsn object to ExpressionFeatureSet#
pm(raw) <- exprs(pmsVSN)#
#
#ggplot distribution graphics for normalized data#
exprs_df <- ggplot_dataframe(raw)#
#
p <- ggplot(exprs_df, aes(y=signal, x=Dataset))#
p + geom_boxplot(aes(fill=Treatment)) #+ geom_jitter(alpha = I(1/300))#
#
p <- ggplot(exprs_df, aes(x=signal))#
p + geom_density(aes(fill=Dataset), alpha= 0.3)#
#
#oligo defaults graphics#
#boxplot(eset, main=paste("Raw Data", treatment,"vs",control), transfo=identity)#
#hist(eset, main=paste("Raw Data", treatment,"vs",control), transfo=identity)#
#
#summarization of normalize data using rma oligo method = median.polish#
eset <- rma(raw, normalize = FALSE, background = FALSE)#
#
#ExpressionSet to matrix#
e_matrix <- 2^exprs(eset)#
#
eset_treatments_info = as.character(theData[all_indexes,1])#
eset_theData = data.frame(Sample_Name= factor(eset_treatments_info, levels=unique(eset_treatments_info)))#
rownames(eset_theData) = rownames(theData)[all_indexes]#
pd <- new("AnnotatedDataFrame", data=eset_theData, varMetadata=metadata)#
eset <- new("ExpressionSet", exprs = e_matrix, phenoData = pd, annotation = "pd.110413.mglo.cag.exp")#
#
exprs_df <- ggplot_dataframe(eset)#
#
p <- ggplot(exprs_df, aes(y=signal, x=Dataset))#
p + geom_boxplot(aes(fill=Treatment)) #+ geom_jitter(alpha = I(1/300))#
#
p <- ggplot(exprs_df, aes(x=signal))#
p + geom_density(aes(fill=Dataset), alpha= 0.3)#
#
#MAplot of normalize data #
d_means <- rowMeans(e_matrix[, 4:6]) - rowMeans(e_matrix[, 1:3])#
a_means <- rowMeans(e_matrix)#
smoothScatter(a_means, d_means, xlab="Average Intensity", ylab="Ratio", main=paste(treatment,"vs",control, "(After VSN normalization)"))#
#
#SAM analysis#
library(siggenes)#
exprs.cl <- c(rep(0,3),rep(1,3))#
#
sam.out <- sam(eset, exprs.cl, method= d.stat,  rand= 123)#
summary(sam.out)#
plot(sam.out)#
thres <- 4#
plot(sam.out, thres)#
sum.sam.out <- summary(sam.out, thres)#
sam_csv_file <- paste(out_path, out_name,".cvs",sep="")#
sam2excel(sam.out,thres,sam_csv_file)#
sam_results <- read.csv(sam_csv_file, skip=19, header=TRUE)#
num_sig_genes  <- dim(sam_results)[1]#
#
#eBayes analysis#
library(limma)#
#
d_means <- rowMeans(eset_matrix[, 4:6])-rowMeans(eset_matrix[, 1:3])#
#
design <- model.matrix(~factor(eset[["Sample_Name"]]))#
fit <- lmFit(eset, design)#
ebayes <- eBayes(fit)#
lod <- -log10(ebayes[["p.value"]][,2])#
mtstat <- ebayes[["t"]][,2]#
#
o1 <- order(abs(d_means), decreasing=TRUE)[1:num_sig_genes]#
o2 <- order(abs(mtstat), decreasing=TRUE)[1:num_sig_genes]#
o <- union(o1, o2)#
#
smoothScatter(d_means, lod, main="Moderated t", xlab="Ratio", ylab="LOD")#
points(d_means[o1], lod[o1], pch=18,col="blue")#
points(d_means[o2], lod[o2], pch=8,col="red")#
abline(h=2, v=c(-1, 1))#
#
tab <- topTable(ebayes, coef=2, adjust="fdr", n=num_sig_genes)#
#
imp_genes <-  head((tab$ID),num_sig_genes)#
imp_genes_exprs <- matrix(nrow=num_sig_genes,ncol=6)#
rownames(imp_genes_exprs) <- imp_genes#
colnames(imp_genes_exprs) <- colnames(e_matrix)#
for (i in imp_genes) {#
	print(i)#
	print(e_matrix[i,])#
	imp_genes_exprs[i,] <-  e_matrix[i,]#
}#
#
e_matrix <- exprs(eset)#
#MAplot of normalize data #
d_means <- rowMeans(e_matrix[, 4:6]) - rowMeans(e_matrix[, 1:3])#
a_means <- rowMeans(e_matrix)#
smoothScatter(a_means, d_means, xlab="Average Intensity", ylab="Ratio", main=paste(treatment,"vs",control, "(After VSN normalization)"))#
points(a_means[rownames(imp_genes_exprs)], d_means[rownames(imp_genes_exprs)], pch=8,col="red")#
points(a_means[as.character(sam_results[["Name"]])], d_means[as.character(sam_results[["Name"]])], pch=20,col="green")#
#
dev.off()
rm(list=ls(all=TRUE))#
#Libraries#
library(oligo)#
library("pd.110413.mglo.cag.exp")#
#
#Functions#
#
#build data.frame with signals information to be used for ggplot graphics#
ggplot_dataframe = function(x) {#
#
	exprs_df <- data.frame(signal= numeric(), Dataset=factor(),  Treatment= factor())#
	if (class(x) == "ExpressionFeatureSet") {#
		for (i in 1:length(pm(x)[1,])) {#
			Dataset <- colnames(pm(x))[i]#
			signals <- pm(x)[,i]#
			Treatment <- as.character(x[["Sample_Name"]][i])#
			exprs_df <- rbind(#
							exprs_df,#
							data.frame(#
								signal=signals,#
								Dataset=rep(Dataset,length(signals)),#
								Treatment=rep(Treatment,length(signals)))#
							)#
		}#
	}#
	else {#
		for (i in 1:length(exprs(x)[1,])) {#
			Dataset <- colnames(exprs(x))[i]#
			signals <- exprs(x)[,i]#
			Treatment <- as.character(x[["Sample_Name"]][i])#
			exprs_df <- rbind(#
							exprs_df,#
							data.frame(#
								signal=signals,#
								Dataset=rep(Dataset,length(signals)),#
								Treatment=rep(Treatment,length(signals)))#
							)#
		}#
	}#
	return(exprs_df)#
}#
#++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++#
out_path = "~/Documents/Yulien_data/Scripts/"#
out_base_name = "VSN_Final_Results_Differential_Expression"#
#Treatment and control to analyse #
treatment <- "4DS"#
control <- "M.furfur"#
out_name = paste(out_base_name,treatment,"vs",control)#
#Device#
pdf(paste(out_path, out_name, ".pdf", sep=""))#
#++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++#
#
#Input Data#
#xys_files#
xys_files_path <- "~/Documents/Yulien_data/Raw_Data_Files/Pair_Files"#
xys.files <- list.xysfiles( xys_files_path, full.names=TRUE ) #list xys_files#
#phenoData#
pheno_file <- "~/Documents/Yulien_data/Design_information/chip_data.tab"#
theData = read.table(pheno_file, row.names=1, header=TRUE,sep="\t")#
theData = subset(theData, select= c("Sample_Name"))#
#
lvls <- c( "channel1", "channel2", "_ALL_" )#
metadata <- data.frame( channel=factor("_ALL_", levels=lvls), labelDescription="Channels" )#
#
#AnnotatedDataFrame building#
pheno_data <- new("AnnotatedDataFrame", data=theData, varMetadata=metadata)#
#ExpressionFeatureSet building using xys_files#
raw_exprs_set <- read.xysfiles( xys.files,#
								pkgname="pd.110413.mglo.cag.exp",#
								phenoData=pheno_data,#
								sampleNames=c("M.furfur-1",#
											"M.globosa-1",#
											"M.globosa-2",#
											"M.globosa-3",#
											"M.furfur-2",#
											"4DS-1",#
											"4DST80-1",#
											"M.furfur-3",#
											"4DST80-2",#
											"4DS-2",#
											"4DST80-3",#
											"4DS-3")#
								)#
#Idexes of the datasets related to the treatment and control specified#
index_1 <- which(raw_exprs_set[["Sample_Name"]] == treatment)#
index_2 <- which(raw_exprs_set[["Sample_Name"]] == control)#
all_indexes <- c(index_1,index_2)#
#Create a ExpressioFeatureSet subset with the datasets related to the specified treatment and control#
exprs_set_subset <- raw_exprs_set[,all_indexes]#
#Oligo default distribution graphics for raw data#
#boxplot(exprs_set_subset, main=paste("Raw Data", treatment,"vs",control))#
#hist(exprs_set_subset, main=paste("Raw Data", treatment, "vs", control))#
#
#ggplot distribution graphics for raw data#
exprs_df <- ggplot_dataframe(exprs_set_subset)#
library(ggplot2)#
p <- ggplot(exprs_df,aes(y=log2(signal),x=Dataset))#
p + geom_boxplot(aes(fill=Treatment)) #+ geom_jitter(alpha = I(1/300))#
#
p <- ggplot(exprs_df, aes(x=log2(signal)))#
p + geom_density(aes(fill=Dataset), alpha= 0.3)#
#
#ExpressionFeatureSet to matrix#
#
eset <- rma(exprs_set_subset, normalize=FALSE, background=FALSE)#
#
e_matrix <- 2^exprs(eset)#
#
#Basic MAplot applying log2 to raw data#
d_means <- log2(rowMeans(e_matrix[, 4:6])) - log2(rowMeans(e_matrix[, 1:3]))#
a_means <- (log2(rowMeans(e_matrix[,4:6])) + log2(rowMeans(e_matrix[,1:3]))) / 2#
smoothScatter(a_means, d_means, xlab="Average Intensity", ylab="Log2-ratio", main=paste(treatment,"vs",control, "(Applying log2 to raw data)"))#
#
#Signal Data Processing #
#bacgroundCorrect (oligo method)#
raw <- exprs_set_subset#
#raw <- backgroundCorrect(exprs_set_subset, "rma") # Add noise to the dataset, in this case#
raw_begin <- raw#
pms = pm(raw) #ExpressionFeatureSet to matrix, ignoring spots with NA signal#
pmsVSN = vsn::vsnMatrix(pms) #vsn "normalization" of signal data#
require("vsn")#
#meanvsSd plots #
meanSdPlot(pmsVSN, ranks=TRUE)#
meanSdPlot(pmsVSN, ranks=FALSE)#
#vsn normalized data, store in a vsn object to ExpressionFeatureSet#
pm(raw) <- exprs(pmsVSN)#
#
#ggplot distribution graphics for normalized data#
exprs_df <- ggplot_dataframe(raw)#
#
p <- ggplot(exprs_df, aes(y=signal, x=Dataset))#
p + geom_boxplot(aes(fill=Treatment)) #+ geom_jitter(alpha = I(1/300))#
#
p <- ggplot(exprs_df, aes(x=signal))#
p + geom_density(aes(fill=Dataset), alpha= 0.3)#
#
#oligo defaults graphics#
#boxplot(eset, main=paste("Raw Data", treatment,"vs",control), transfo=identity)#
#hist(eset, main=paste("Raw Data", treatment,"vs",control), transfo=identity)#
#
#summarization of normalize data using rma oligo method = median.polish#
eset <- rma(raw, normalize = FALSE, background = FALSE)#
#
#ExpressionSet to matrix#
e_matrix <- 2^exprs(eset)#
#
eset_treatments_info = as.character(theData[all_indexes,1])#
eset_theData = data.frame(Sample_Name= factor(eset_treatments_info, levels=unique(eset_treatments_info)))#
rownames(eset_theData) = rownames(theData)[all_indexes]#
pd <- new("AnnotatedDataFrame", data=eset_theData, varMetadata=metadata)#
eset <- new("ExpressionSet", exprs = e_matrix, phenoData = pd, annotation = "pd.110413.mglo.cag.exp")#
#
exprs_df <- ggplot_dataframe(eset)#
#
p <- ggplot(exprs_df, aes(y=signal, x=Dataset))#
p + geom_boxplot(aes(fill=Treatment)) #+ geom_jitter(alpha = I(1/300))#
#
p <- ggplot(exprs_df, aes(x=signal))#
p + geom_density(aes(fill=Dataset), alpha= 0.3)#
#
#MAplot of normalize data #
d_means <- rowMeans(e_matrix[, 4:6]) - rowMeans(e_matrix[, 1:3])#
a_means <- rowMeans(e_matrix)#
smoothScatter(a_means, d_means, xlab="Average Intensity", ylab="Ratio", main=paste(treatment,"vs",control, "(After VSN normalization)"))#
#
#SAM analysis#
library(siggenes)#
exprs.cl <- c(rep(0,3),rep(1,3))#
#
sam.out <- sam(eset, exprs.cl, method= d.stat,  rand= 123)#
summary(sam.out)#
plot(sam.out)#
thres <- 4#
plot(sam.out, thres)#
sum.sam.out <- summary(sam.out, thres)#
sam_csv_file <- paste(out_path, out_name,".csv",sep="")#
sam2excel(sam.out,thres,sam_csv_file)#
sam_results <- read.csv(sam_csv_file, skip=19, header=TRUE)#
num_sig_genes  <- dim(sam_results)[1]#
#
#eBayes analysis#
library(limma)#
#
d_means <- rowMeans(eset_matrix[, 4:6])-rowMeans(eset_matrix[, 1:3])#
#
design <- model.matrix(~factor(eset[["Sample_Name"]]))#
fit <- lmFit(eset, design)#
ebayes <- eBayes(fit)#
lod <- -log10(ebayes[["p.value"]][,2])#
mtstat <- ebayes[["t"]][,2]#
#
o1 <- order(abs(d_means), decreasing=TRUE)[1:num_sig_genes]#
o2 <- order(abs(mtstat), decreasing=TRUE)[1:num_sig_genes]#
o <- union(o1, o2)#
#
smoothScatter(d_means, lod, main="Moderated t", xlab="Ratio", ylab="LOD")#
points(d_means[o1], lod[o1], pch=18,col="blue")#
points(d_means[o2], lod[o2], pch=8,col="red")#
abline(h=2, v=c(-1, 1))#
#
tab <- topTable(ebayes, coef=2, adjust="fdr", n=num_sig_genes)#
#
imp_genes <-  head((tab$ID),num_sig_genes)#
imp_genes_exprs <- matrix(nrow=num_sig_genes,ncol=6)#
rownames(imp_genes_exprs) <- imp_genes#
colnames(imp_genes_exprs) <- colnames(e_matrix)#
for (i in imp_genes) {#
	print(i)#
	print(e_matrix[i,])#
	imp_genes_exprs[i,] <-  e_matrix[i,]#
}#
#
e_matrix <- exprs(eset)#
#MAplot of normalize data #
d_means <- rowMeans(e_matrix[, 4:6]) - rowMeans(e_matrix[, 1:3])#
a_means <- rowMeans(e_matrix)#
smoothScatter(a_means, d_means, xlab="Average Intensity", ylab="Ratio", main=paste(treatment,"vs",control, "(After VSN normalization)"))#
points(a_means[rownames(imp_genes_exprs)], d_means[rownames(imp_genes_exprs)], pch=8,col="red")#
points(a_means[as.character(sam_results[["Name"]])], d_means[as.character(sam_results[["Name"]])], pch=20,col="green")#
#
dev.off()
tab
ebayes_csv_file <- paste(out_path, out_name,"ebayes.csv",sep="")
ebayes_csv_file
write.csv(tab, file=ebayes_csv_file, row.names=FALSE)
rm(list=ls(all=TRUE))#
#Libraries#
library(oligo)#
library("pd.110413.mglo.cag.exp")#
#
#Functions#
#
#build data.frame with signals information to be used for ggplot graphics#
ggplot_dataframe = function(x) {#
#
	exprs_df <- data.frame(signal= numeric(), Dataset=factor(),  Treatment= factor())#
	if (class(x) == "ExpressionFeatureSet") {#
		for (i in 1:length(pm(x)[1,])) {#
			Dataset <- colnames(pm(x))[i]#
			signals <- pm(x)[,i]#
			Treatment <- as.character(x[["Sample_Name"]][i])#
			exprs_df <- rbind(#
							exprs_df,#
							data.frame(#
								signal=signals,#
								Dataset=rep(Dataset,length(signals)),#
								Treatment=rep(Treatment,length(signals)))#
							)#
		}#
	}#
	else {#
		for (i in 1:length(exprs(x)[1,])) {#
			Dataset <- colnames(exprs(x))[i]#
			signals <- exprs(x)[,i]#
			Treatment <- as.character(x[["Sample_Name"]][i])#
			exprs_df <- rbind(#
							exprs_df,#
							data.frame(#
								signal=signals,#
								Dataset=rep(Dataset,length(signals)),#
								Treatment=rep(Treatment,length(signals)))#
							)#
		}#
	}#
	return(exprs_df)#
}#
#++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++#
out_path = "~/Documents/Yulien_data/Scripts/"#
out_base_name = "VSN_Final_Results_Differential_Expression"#
#Treatment and control to analyse #
treatment <- "4DS"#
control <- "M.furfur"#
out_name = paste(out_base_name,treatment,"vs",control,sep="")#
#Device#
pdf(paste(out_path, out_name, ".pdf", sep=""))#
#++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++#
#
#Input Data#
#xys_files#
xys_files_path <- "~/Documents/Yulien_data/Raw_Data_Files/Pair_Files"#
xys.files <- list.xysfiles( xys_files_path, full.names=TRUE ) #list xys_files#
#phenoData#
pheno_file <- "~/Documents/Yulien_data/Design_information/chip_data.tab"#
theData = read.table(pheno_file, row.names=1, header=TRUE,sep="\t")#
theData = subset(theData, select= c("Sample_Name"))#
#
lvls <- c( "channel1", "channel2", "_ALL_" )#
metadata <- data.frame( channel=factor("_ALL_", levels=lvls), labelDescription="Channels" )#
#
#AnnotatedDataFrame building#
pheno_data <- new("AnnotatedDataFrame", data=theData, varMetadata=metadata)#
#ExpressionFeatureSet building using xys_files#
raw_exprs_set <- read.xysfiles( xys.files,#
								pkgname="pd.110413.mglo.cag.exp",#
								phenoData=pheno_data,#
								sampleNames=c("M.furfur-1",#
											"M.globosa-1",#
											"M.globosa-2",#
											"M.globosa-3",#
											"M.furfur-2",#
											"4DS-1",#
											"4DST80-1",#
											"M.furfur-3",#
											"4DST80-2",#
											"4DS-2",#
											"4DST80-3",#
											"4DS-3")#
								)#
#Idexes of the datasets related to the treatment and control specified#
index_1 <- which(raw_exprs_set[["Sample_Name"]] == treatment)#
index_2 <- which(raw_exprs_set[["Sample_Name"]] == control)#
all_indexes <- c(index_1,index_2)#
#Create a ExpressioFeatureSet subset with the datasets related to the specified treatment and control#
exprs_set_subset <- raw_exprs_set[,all_indexes]#
#Oligo default distribution graphics for raw data#
#boxplot(exprs_set_subset, main=paste("Raw Data", treatment,"vs",control))#
#hist(exprs_set_subset, main=paste("Raw Data", treatment, "vs", control))#
#
#ggplot distribution graphics for raw data#
exprs_df <- ggplot_dataframe(exprs_set_subset)#
library(ggplot2)#
p <- ggplot(exprs_df,aes(y=log2(signal),x=Dataset))#
p + geom_boxplot(aes(fill=Treatment)) #+ geom_jitter(alpha = I(1/300))#
#
p <- ggplot(exprs_df, aes(x=log2(signal)))#
p + geom_density(aes(fill=Dataset), alpha= 0.3)#
#
#ExpressionFeatureSet to matrix#
#
eset <- rma(exprs_set_subset, normalize=FALSE, background=FALSE)#
#
e_matrix <- 2^exprs(eset)#
#
#Basic MAplot applying log2 to raw data#
d_means <- log2(rowMeans(e_matrix[, 4:6])) - log2(rowMeans(e_matrix[, 1:3]))#
a_means <- (log2(rowMeans(e_matrix[,4:6])) + log2(rowMeans(e_matrix[,1:3]))) / 2#
smoothScatter(a_means, d_means, xlab="Average Intensity", ylab="Log2-ratio", main=paste(treatment,"vs",control, "(Applying log2 to raw data)"))#
#
#Signal Data Processing #
#bacgroundCorrect (oligo method)#
raw <- exprs_set_subset#
#raw <- backgroundCorrect(exprs_set_subset, "rma") # Add noise to the dataset, in this case#
raw_begin <- raw#
pms = pm(raw) #ExpressionFeatureSet to matrix, ignoring spots with NA signal#
pmsVSN = vsn::vsnMatrix(pms) #vsn "normalization" of signal data#
require("vsn")#
#meanvsSd plots #
meanSdPlot(pmsVSN, ranks=TRUE)#
meanSdPlot(pmsVSN, ranks=FALSE)#
#vsn normalized data, store in a vsn object to ExpressionFeatureSet#
pm(raw) <- exprs(pmsVSN)#
#
#ggplot distribution graphics for normalized data#
exprs_df <- ggplot_dataframe(raw)#
#
p <- ggplot(exprs_df, aes(y=signal, x=Dataset))#
p + geom_boxplot(aes(fill=Treatment)) #+ geom_jitter(alpha = I(1/300))#
#
p <- ggplot(exprs_df, aes(x=signal))#
p + geom_density(aes(fill=Dataset), alpha= 0.3)#
#
#oligo defaults graphics#
#boxplot(eset, main=paste("Raw Data", treatment,"vs",control), transfo=identity)#
#hist(eset, main=paste("Raw Data", treatment,"vs",control), transfo=identity)#
#
#summarization of normalize data using rma oligo method = median.polish#
eset <- rma(raw, normalize = FALSE, background = FALSE)#
#
#ExpressionSet to matrix#
e_matrix <- 2^exprs(eset)#
#
eset_treatments_info = as.character(theData[all_indexes,1])#
eset_theData = data.frame(Sample_Name= factor(eset_treatments_info, levels=unique(eset_treatments_info)))#
rownames(eset_theData) = rownames(theData)[all_indexes]#
pd <- new("AnnotatedDataFrame", data=eset_theData, varMetadata=metadata)#
eset <- new("ExpressionSet", exprs = e_matrix, phenoData = pd, annotation = "pd.110413.mglo.cag.exp")#
#
exprs_df <- ggplot_dataframe(eset)#
#
p <- ggplot(exprs_df, aes(y=signal, x=Dataset))#
p + geom_boxplot(aes(fill=Treatment)) #+ geom_jitter(alpha = I(1/300))#
#
p <- ggplot(exprs_df, aes(x=signal))#
p + geom_density(aes(fill=Dataset), alpha= 0.3)#
#
#MAplot of normalize data #
d_means <- rowMeans(e_matrix[, 4:6]) - rowMeans(e_matrix[, 1:3])#
a_means <- rowMeans(e_matrix)#
smoothScatter(a_means, d_means, xlab="Average Intensity", ylab="Ratio", main=paste(treatment,"vs",control, "(After VSN normalization)"))#
#
#SAM analysis#
library(siggenes)#
exprs.cl <- c(rep(0,3),rep(1,3))#
#
sam.out <- sam(eset, exprs.cl, method= d.stat,  rand= 123)#
summary(sam.out)#
plot(sam.out)#
thres <- 4#
plot(sam.out, thres)#
sum.sam.out <- summary(sam.out, thres)#
sam_csv_file <- paste(out_path, out_name,"sam.csv",sep="")#
sam2excel(sam.out,thres,sam_csv_file)#
sam_results <- read.csv(sam_csv_file, skip=19, header=TRUE)#
num_sig_genes  <- dim(sam_results)[1]#
#
#eBayes analysis#
library(limma)#
#
d_means <- rowMeans(eset_matrix[, 4:6])-rowMeans(eset_matrix[, 1:3])#
#
design <- model.matrix(~factor(eset[["Sample_Name"]]))#
fit <- lmFit(eset, design)#
ebayes <- eBayes(fit)#
lod <- -log10(ebayes[["p.value"]][,2])#
mtstat <- ebayes[["t"]][,2]#
#
o1 <- order(abs(d_means), decreasing=TRUE)[1:num_sig_genes]#
o2 <- order(abs(mtstat), decreasing=TRUE)[1:num_sig_genes]#
o <- union(o1, o2)#
#
smoothScatter(d_means, lod, main="Moderated t", xlab="Ratio", ylab="LOD")#
points(d_means[o1], lod[o1], pch=18,col="blue")#
points(d_means[o2], lod[o2], pch=8,col="red")#
abline(h=2, v=c(-1, 1))#
#
tab <- topTable(ebayes, coef=2, adjust="fdr", n=num_sig_genes)#
ebayes_csv_file <- paste(out_path, out_name,"ebayes.csv",sep="")#
write.csv(tab, file=ebayes_csv_file, row.names=FALSE)#
#
imp_genes <-  head((tab$ID),num_sig_genes)#
imp_genes_exprs <- matrix(nrow=num_sig_genes,ncol=6)#
rownames(imp_genes_exprs) <- imp_genes#
colnames(imp_genes_exprs) <- colnames(e_matrix)#
for (i in imp_genes) {#
	print(i)#
	print(e_matrix[i,])#
	imp_genes_exprs[i,] <-  e_matrix[i,]#
}#
#
e_matrix <- exprs(eset)#
#MAplot of normalize data #
d_means <- rowMeans(e_matrix[, 4:6]) - rowMeans(e_matrix[, 1:3])#
a_means <- rowMeans(e_matrix)#
smoothScatter(a_means, d_means, xlab="Average Intensity", ylab="Ratio", main=paste(treatment,"vs",control, "(After VSN normalization)"))#
points(a_means[rownames(imp_genes_exprs)], d_means[rownames(imp_genes_exprs)], pch=8,col="red")#
points(a_means[as.character(sam_results[["Name"]])], d_means[as.character(sam_results[["Name"]])], pch=20,col="green")#
#
dev.off()
head(eset)
head(e_matrix)
?save
save(e_matrix, eset, file=outname)
save(e_matrix, eset,list= c(paste("e_matrix",out_base_name,treatment,"vs",control,sep=""), paste("eset",out_base_name,treatment,"vs",control,sep="") ), file=outname)
save(e_matrix, eset, file=outname)
save(e_matrix, eset, file=out_name)
load(e_matrix)
out_names
out_name
getwd()
save(e_matrix, eset, file=paste(out_path, out_name,".RData", sep=""))
rm(list=ls(all=TRUE))#
#Libraries#
library(oligo)#
library("pd.110413.mglo.cag.exp")#
#
#Functions#
#
#build data.frame with signals information to be used for ggplot graphics#
ggplot_dataframe = function(x) {#
#
	exprs_df <- data.frame(signal= numeric(), Dataset=factor(),  Treatment= factor())#
	if (class(x) == "ExpressionFeatureSet") {#
		for (i in 1:length(pm(x)[1,])) {#
			Dataset <- colnames(pm(x))[i]#
			signals <- pm(x)[,i]#
			Treatment <- as.character(x[["Sample_Name"]][i])#
			exprs_df <- rbind(#
							exprs_df,#
							data.frame(#
								signal=signals,#
								Dataset=rep(Dataset,length(signals)),#
								Treatment=rep(Treatment,length(signals)))#
							)#
		}#
	}#
	else {#
		for (i in 1:length(exprs(x)[1,])) {#
			Dataset <- colnames(exprs(x))[i]#
			signals <- exprs(x)[,i]#
			Treatment <- as.character(x[["Sample_Name"]][i])#
			exprs_df <- rbind(#
							exprs_df,#
							data.frame(#
								signal=signals,#
								Dataset=rep(Dataset,length(signals)),#
								Treatment=rep(Treatment,length(signals)))#
							)#
		}#
	}#
	return(exprs_df)#
}#
#++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++#
#
out_path = "~/Documents/Yulien_data/Scripts/"#
out_base_name = "RMA_Final_Results_Differential_Expression"#
#Treatment and control to analyse #
treatment <- "4DS"#
control <- "M.furfur"#
out_name = paste(out_base_name,treatment,"vs",control, sep="")#
#Device#
pdf(paste(out_path, out_name, ".pdf", sep=""))#
#
#++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++#
#
#Input Data#
#xys_files#
xys_files_path <- "~/Documents/Yulien_data/Raw_Data_Files/Pair_Files"#
xys.files <- list.xysfiles( xys_files_path, full.names=TRUE ) #list xys_files#
#phenoData#
pheno_file <- "~/Documents/Yulien_data/Design_information/chip_data.tab"#
theData = read.table(pheno_file, row.names=1, header=TRUE,sep="\t")#
theData = subset(theData, select= c("Sample_Name"))#
#
lvls <- c( "channel1", "channel2", "_ALL_" )#
metadata <- data.frame( channel=factor("_ALL_", levels=lvls), labelDescription="Channels" )#
#
#AnnotatedDataFrame building#
pheno_data <- new("AnnotatedDataFrame", data=theData, varMetadata=metadata)#
#ExpressionFeatureSet building using xys_files#
raw_exprs_set <- read.xysfiles( xys.files,#
								pkgname="pd.110413.mglo.cag.exp",#
								phenoData=pheno_data,#
								sampleNames=c("M.furfur-1",#
											"M.globosa-1",#
											"M.globosa-2",#
											"M.globosa-3",#
											"M.furfur-2",#
											"4DS-1",#
											"4DST80-1",#
											"M.furfur-3",#
											"4DST80-2",#
											"4DS-2",#
											"4DST80-3",#
											"4DS-3")#
								)#
#Idexes of the datasets related to the treatment and control specified#
index_1 <- which(raw_exprs_set[["Sample_Name"]] == treatment)#
index_2 <- which(raw_exprs_set[["Sample_Name"]] == control)#
all_indexes <- c(index_1,index_2)#
#Create a ExpressioFeatureSet subset with the datasets related to the specified treatment and control#
exprs_set_subset <- raw_exprs_set[,all_indexes]#
#Oligo default distribution graphics for raw data#
#boxplot(exprs_set_subset, main=paste("Raw Data", treatment,"vs",control))#
#hist(exprs_set_subset, main=paste("Raw Data", treatment, "vs", control))#
#
#ggplot distribution graphics for raw data#
exprs_df <- ggplot_dataframe(exprs_set_subset)#
library(ggplot2)#
p <- ggplot(exprs_df,aes(y=log2(signal),x=Dataset))#
p + geom_boxplot(aes(fill=Treatment)) #+ geom_jitter(alpha = I(1/300))#
#
p <- ggplot(exprs_df, aes(x=log2(signal)))#
p + geom_density(aes(fill=Dataset), alpha= 0.3)#
#
#ExpressionFeatureSet to matrix#
#
eset <- rma(exprs_set_subset, normalize=FALSE, background=FALSE)#
e_matrix <- 2^exprs(eset)#
#
#Basic MAplot applying log2 to raw data#
d_means <- log2(rowMeans(e_matrix[, 4:6])) - log2(rowMeans(e_matrix[, 1:3]))#
a_means <- (log2(rowMeans(e_matrix[,4:6])) + log2(rowMeans(e_matrix[,1:3]))) / 2#
smoothScatter(a_means, d_means, xlab="Average Intensity", ylab="Log2-ratio", main=paste(treatment,"vs",control, "(Applying log2 to raw data)"))#
#
#Signal Data Processing #
#
raw <- exprs_set_subset#
#
#summarization of normalize data using rma oligo method = median.polish#
eset <- rma(raw, normalize=TRUE, background=TRUE)#
#
#ggplot distribution graphics for normalized data#
exprs_df <- ggplot_dataframe(eset)#
#
p <- ggplot(exprs_df, aes(y=signal, x=Dataset))#
p + geom_boxplot(aes(fill=Treatment)) #+ geom_jitter(alpha = I(1/300))#
#
p <- ggplot(exprs_df, aes(x=signal))#
p + geom_density(aes(fill=Dataset), alpha= 0.3)#
#
#oligo defaults graphics#
#boxplot(eset, main=paste("Raw Data", treatment,"vs",control), transfo=identity)#
#hist(eset, main=paste("Raw Data", treatment,"vs",control), transfo=identity)#
#
#ExpressionSet to matrix#
e_matrix <- exprs(eset)#
#
#MAplot of normalize data #
d_means <- rowMeans(e_matrix[, 4:6]) - rowMeans(e_matrix[, 1:3])#
a_means <- rowMeans(e_matrix)#
smoothScatter(a_means, d_means, xlab="Average Intensity", ylab="Ratio", main=paste(treatment,"vs",control, "(After VSN normalization)"))#
#
#SAM analysis#
library(siggenes)#
exprs.cl <- c(rep(0,3),rep(1,3))#
#
sam.out <- sam(eset, exprs.cl, method= d.stat,  rand= 123)#
summary(sam.out)#
plot(sam.out)#
thres <- 6#
plot(sam.out, thres)#
sum.sam.out <- summary(sam.out, thres)#
sam_csv_file <- paste(out_path, out_name,".csv",sep="")#
sam2excel(sam.out,thres,sam_csv_file)#
sam_results <- read.csv(sam_csv_file, skip=19, header=TRUE)#
num_sig_genes  <- dim(sam_results)[1]#
#
#eBayes analysis#
library(limma)#
#
eset_matrix <- exprs(eset)#
#
d_means <- rowMeans(eset_matrix[, 4:6])-rowMeans(eset_matrix[, 1:3])#
#
design <- model.matrix(~factor(eset[["Sample_Name"]]))#
fit <- lmFit(eset, design)#
ebayes <- eBayes(fit)#
lod <- -log10(ebayes[["p.value"]][,2])#
mtstat <- ebayes[["t"]][,2]#
#
o1 <- order(abs(d_means), decreasing=TRUE)[1:num_sig_genes]#
o2 <- order(abs(mtstat), decreasing=TRUE)[1:num_sig_genes]#
o <- union(o1, o2)#
#
smoothScatter(d_means, lod, main="Moderated t", xlab="Ratio", ylab="LOD")#
points(d_means[o1], lod[o1], pch=18,col="blue")#
points(d_means[o2], lod[o2], pch=8,col="red")#
abline(h=2, v=c(-1, 1))#
#
tab <- topTable(ebayes, coef=2, adjust="fdr", n=num_sig_genes)#
ebayes_csv_file <- paste(out_path, out_name,"ebayes.csv",sep="")#
write.csv(tab, file=ebayes_csv_file, row.names=FALSE)#
#
imp_genes <-  head((tab$ID),num_sig_genes)#
imp_genes_exprs <- matrix(nrow=num_sig_genes,ncol=6)#
rownames(imp_genes_exprs) <- imp_genes#
colnames(imp_genes_exprs) <- colnames(e_matrix)#
for (i in imp_genes) {#
	print(i)#
	print(e_matrix[i,])#
	imp_genes_exprs[i,] <-  e_matrix[i,]#
}#
e_matrix <- exprs(eset)#
#MAplot of normalize data #
d_means <- rowMeans(e_matrix[, 4:6]) - rowMeans(e_matrix[, 1:3])#
a_means <- rowMeans(e_matrix)#
smoothScatter(a_means, d_means, xlab="Average Intensity", ylab="Ratio", main=paste(treatment,"vs",control, "(After VSN normalization)"))#
points(a_means[rownames(imp_genes_exprs)], d_means[rownames(imp_genes_exprs)], pch=8,col="red")#
points(a_means[as.character(sam_results[["Name"]])], d_means[as.character(sam_results[["Name"]])], pch=20,col="green")#
#
save(e_matrix, eset, file=paste(out_path, out_name,".RData", sep=""))#
dev.off()
rm(list=ls(all=TRUE))#
#Libraries#
library(oligo)#
library("pd.110413.mglo.cag.exp")#
#
#Functions#
#
#build data.frame with signals information to be used for ggplot graphics#
ggplot_dataframe = function(x) {#
#
	exprs_df <- data.frame(signal= numeric(), Dataset=factor(),  Treatment= factor())#
	if (class(x) == "ExpressionFeatureSet") {#
		for (i in 1:length(pm(x)[1,])) {#
			Dataset <- colnames(pm(x))[i]#
			signals <- pm(x)[,i]#
			Treatment <- as.character(x[["Sample_Name"]][i])#
			exprs_df <- rbind(#
							exprs_df,#
							data.frame(#
								signal=signals,#
								Dataset=rep(Dataset,length(signals)),#
								Treatment=rep(Treatment,length(signals)))#
							)#
		}#
	}#
	else {#
		for (i in 1:length(exprs(x)[1,])) {#
			Dataset <- colnames(exprs(x))[i]#
			signals <- exprs(x)[,i]#
			Treatment <- as.character(x[["Sample_Name"]][i])#
			exprs_df <- rbind(#
							exprs_df,#
							data.frame(#
								signal=signals,#
								Dataset=rep(Dataset,length(signals)),#
								Treatment=rep(Treatment,length(signals)))#
							)#
		}#
	}#
	return(exprs_df)#
}#
#++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++#
#
out_path = "~/Documents/Yulien_data/Scripts/"#
out_base_name = "RMA_Final_Results_Differential_Expression"#
#Treatment and control to analyse #
treatment <- "4DST80"#
control <- "4DS"#
out_name = paste(out_base_name,treatment,"vs",control, sep="")#
#Device#
pdf(paste(out_path, out_name, ".pdf", sep=""))#
#
#++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++#
#
#Input Data#
#xys_files#
xys_files_path <- "~/Documents/Yulien_data/Raw_Data_Files/Pair_Files"#
xys.files <- list.xysfiles( xys_files_path, full.names=TRUE ) #list xys_files#
#phenoData#
pheno_file <- "~/Documents/Yulien_data/Design_information/chip_data.tab"#
theData = read.table(pheno_file, row.names=1, header=TRUE,sep="\t")#
theData = subset(theData, select= c("Sample_Name"))#
#
lvls <- c( "channel1", "channel2", "_ALL_" )#
metadata <- data.frame( channel=factor("_ALL_", levels=lvls), labelDescription="Channels" )#
#
#AnnotatedDataFrame building#
pheno_data <- new("AnnotatedDataFrame", data=theData, varMetadata=metadata)#
#ExpressionFeatureSet building using xys_files#
raw_exprs_set <- read.xysfiles( xys.files,#
								pkgname="pd.110413.mglo.cag.exp",#
								phenoData=pheno_data,#
								sampleNames=c("M.furfur-1",#
											"M.globosa-1",#
											"M.globosa-2",#
											"M.globosa-3",#
											"M.furfur-2",#
											"4DS-1",#
											"4DST80-1",#
											"M.furfur-3",#
											"4DST80-2",#
											"4DS-2",#
											"4DST80-3",#
											"4DS-3")#
								)#
#Idexes of the datasets related to the treatment and control specified#
index_1 <- which(raw_exprs_set[["Sample_Name"]] == treatment)#
index_2 <- which(raw_exprs_set[["Sample_Name"]] == control)#
all_indexes <- c(index_1,index_2)#
#Create a ExpressioFeatureSet subset with the datasets related to the specified treatment and control#
exprs_set_subset <- raw_exprs_set[,all_indexes]#
#Oligo default distribution graphics for raw data#
#boxplot(exprs_set_subset, main=paste("Raw Data", treatment,"vs",control))#
#hist(exprs_set_subset, main=paste("Raw Data", treatment, "vs", control))#
#
#ggplot distribution graphics for raw data#
exprs_df <- ggplot_dataframe(exprs_set_subset)#
library(ggplot2)#
p <- ggplot(exprs_df,aes(y=log2(signal),x=Dataset))#
p + geom_boxplot(aes(fill=Treatment)) #+ geom_jitter(alpha = I(1/300))#
#
p <- ggplot(exprs_df, aes(x=log2(signal)))#
p + geom_density(aes(fill=Dataset), alpha= 0.3)#
#
#ExpressionFeatureSet to matrix#
#
eset <- rma(exprs_set_subset, normalize=FALSE, background=FALSE)#
e_matrix <- 2^exprs(eset)#
#
#Basic MAplot applying log2 to raw data#
d_means <- log2(rowMeans(e_matrix[, 4:6])) - log2(rowMeans(e_matrix[, 1:3]))#
a_means <- (log2(rowMeans(e_matrix[,4:6])) + log2(rowMeans(e_matrix[,1:3]))) / 2#
smoothScatter(a_means, d_means, xlab="Average Intensity", ylab="Log2-ratio", main=paste(treatment,"vs",control, "(Applying log2 to raw data)"))#
#
#Signal Data Processing #
#
raw <- exprs_set_subset#
#
#summarization of normalize data using rma oligo method = median.polish#
eset <- rma(raw, normalize=TRUE, background=TRUE)#
#
#ggplot distribution graphics for normalized data#
exprs_df <- ggplot_dataframe(eset)#
#
p <- ggplot(exprs_df, aes(y=signal, x=Dataset))#
p + geom_boxplot(aes(fill=Treatment)) #+ geom_jitter(alpha = I(1/300))#
#
p <- ggplot(exprs_df, aes(x=signal))#
p + geom_density(aes(fill=Dataset), alpha= 0.3)#
#
#oligo defaults graphics#
#boxplot(eset, main=paste("Raw Data", treatment,"vs",control), transfo=identity)#
#hist(eset, main=paste("Raw Data", treatment,"vs",control), transfo=identity)#
#
#ExpressionSet to matrix#
e_matrix <- exprs(eset)#
#
#MAplot of normalize data #
d_means <- rowMeans(e_matrix[, 4:6]) - rowMeans(e_matrix[, 1:3])#
a_means <- rowMeans(e_matrix)#
smoothScatter(a_means, d_means, xlab="Average Intensity", ylab="Ratio", main=paste(treatment,"vs",control, "(After VSN normalization)"))#
#
#SAM analysis#
library(siggenes)#
exprs.cl <- c(rep(0,3),rep(1,3))#
#
sam.out <- sam(eset, exprs.cl, method= d.stat,  rand= 123)#
summary(sam.out)#
plot(sam.out)#
thres <- 6#
plot(sam.out, thres)#
sum.sam.out <- summary(sam.out, thres)#
sam_csv_file <- paste(out_path, out_name,".csv",sep="")#
sam2excel(sam.out,thres,sam_csv_file)#
sam_results <- read.csv(sam_csv_file, skip=19, header=TRUE)#
num_sig_genes  <- dim(sam_results)[1]#
#
#eBayes analysis#
library(limma)#
#
eset_matrix <- exprs(eset)#
#
d_means <- rowMeans(eset_matrix[, 4:6])-rowMeans(eset_matrix[, 1:3])#
#
design <- model.matrix(~factor(eset[["Sample_Name"]]))#
fit <- lmFit(eset, design)#
ebayes <- eBayes(fit)#
lod <- -log10(ebayes[["p.value"]][,2])#
mtstat <- ebayes[["t"]][,2]#
#
o1 <- order(abs(d_means), decreasing=TRUE)[1:num_sig_genes]#
o2 <- order(abs(mtstat), decreasing=TRUE)[1:num_sig_genes]#
o <- union(o1, o2)#
#
smoothScatter(d_means, lod, main="Moderated t", xlab="Ratio", ylab="LOD")#
points(d_means[o1], lod[o1], pch=18,col="blue")#
points(d_means[o2], lod[o2], pch=8,col="red")#
abline(h=2, v=c(-1, 1))#
#
tab <- topTable(ebayes, coef=2, adjust="fdr", n=num_sig_genes)#
ebayes_csv_file <- paste(out_path, out_name,"ebayes.csv",sep="")#
write.csv(tab, file=ebayes_csv_file, row.names=FALSE)#
#
imp_genes <-  head((tab$ID),num_sig_genes)#
imp_genes_exprs <- matrix(nrow=num_sig_genes,ncol=6)#
rownames(imp_genes_exprs) <- imp_genes#
colnames(imp_genes_exprs) <- colnames(e_matrix)#
for (i in imp_genes) {#
	print(i)#
	print(e_matrix[i,])#
	imp_genes_exprs[i,] <-  e_matrix[i,]#
}#
e_matrix <- exprs(eset)#
#MAplot of normalize data #
d_means <- rowMeans(e_matrix[, 4:6]) - rowMeans(e_matrix[, 1:3])#
a_means <- rowMeans(e_matrix)#
smoothScatter(a_means, d_means, xlab="Average Intensity", ylab="Ratio", main=paste(treatment,"vs",control, "(After VSN normalization)"))#
points(a_means[rownames(imp_genes_exprs)], d_means[rownames(imp_genes_exprs)], pch=8,col="red")#
points(a_means[as.character(sam_results[["Name"]])], d_means[as.character(sam_results[["Name"]])], pch=20,col="green")#
#
save(e_matrix, eset, file=paste(out_path, out_name,".RData", sep=""))#
dev.off()
rm(list=ls(all=TRUE))#
#Libraries#
library(oligo)#
library("pd.110413.mglo.cag.exp")#
#
#Functions#
#
#build data.frame with signals information to be used for ggplot graphics#
ggplot_dataframe = function(x) {#
#
	exprs_df <- data.frame(signal= numeric(), Dataset=factor(),  Treatment= factor())#
	if (class(x) == "ExpressionFeatureSet") {#
		for (i in 1:length(pm(x)[1,])) {#
			Dataset <- colnames(pm(x))[i]#
			signals <- pm(x)[,i]#
			Treatment <- as.character(x[["Sample_Name"]][i])#
			exprs_df <- rbind(#
							exprs_df,#
							data.frame(#
								signal=signals,#
								Dataset=rep(Dataset,length(signals)),#
								Treatment=rep(Treatment,length(signals)))#
							)#
		}#
	}#
	else {#
		for (i in 1:length(exprs(x)[1,])) {#
			Dataset <- colnames(exprs(x))[i]#
			signals <- exprs(x)[,i]#
			Treatment <- as.character(x[["Sample_Name"]][i])#
			exprs_df <- rbind(#
							exprs_df,#
							data.frame(#
								signal=signals,#
								Dataset=rep(Dataset,length(signals)),#
								Treatment=rep(Treatment,length(signals)))#
							)#
		}#
	}#
	return(exprs_df)#
}#
#++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++#
#
out_path = "~/Documents/Yulien_data/Scripts/"#
out_base_name = "RMA_Final_Results_Differential_Expression"#
#Treatment and control to analyse #
treatment <- "4DST80"#
control <- "4DS"#
out_name = paste(out_base_name,treatment,"vs",control, sep="")#
#Device#
pdf(paste(out_path, out_name, ".pdf", sep=""))#
#
#++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++#
#
#Input Data#
#xys_files#
xys_files_path <- "~/Documents/Yulien_data/Raw_Data_Files/Pair_Files"#
xys.files <- list.xysfiles( xys_files_path, full.names=TRUE ) #list xys_files#
#phenoData#
pheno_file <- "~/Documents/Yulien_data/Design_information/chip_data.tab"#
theData = read.table(pheno_file, row.names=1, header=TRUE,sep="\t")#
theData = subset(theData, select= c("Sample_Name"))#
#
lvls <- c( "channel1", "channel2", "_ALL_" )#
metadata <- data.frame( channel=factor("_ALL_", levels=lvls), labelDescription="Channels" )#
#
#AnnotatedDataFrame building#
pheno_data <- new("AnnotatedDataFrame", data=theData, varMetadata=metadata)#
#ExpressionFeatureSet building using xys_files#
raw_exprs_set <- read.xysfiles( xys.files,#
								pkgname="pd.110413.mglo.cag.exp",#
								phenoData=pheno_data,#
								sampleNames=c("M.furfur-1",#
											"M.globosa-1",#
											"M.globosa-2",#
											"M.globosa-3",#
											"M.furfur-2",#
											"4DS-1",#
											"4DST80-1",#
											"M.furfur-3",#
											"4DST80-2",#
											"4DS-2",#
											"4DST80-3",#
											"4DS-3")#
								)#
#Idexes of the datasets related to the treatment and control specified#
index_1 <- which(raw_exprs_set[["Sample_Name"]] == treatment)#
index_2 <- which(raw_exprs_set[["Sample_Name"]] == control)#
all_indexes <- c(index_1,index_2)#
#Create a ExpressioFeatureSet subset with the datasets related to the specified treatment and control#
exprs_set_subset <- raw_exprs_set[,all_indexes]#
#Oligo default distribution graphics for raw data#
#boxplot(exprs_set_subset, main=paste("Raw Data", treatment,"vs",control))#
#hist(exprs_set_subset, main=paste("Raw Data", treatment, "vs", control))#
#
#ggplot distribution graphics for raw data#
exprs_df <- ggplot_dataframe(exprs_set_subset)#
library(ggplot2)#
p <- ggplot(exprs_df,aes(y=log2(signal),x=Dataset))#
p + geom_boxplot(aes(fill=Treatment)) #+ geom_jitter(alpha = I(1/300))#
#
p <- ggplot(exprs_df, aes(x=log2(signal)))#
p + geom_density(aes(fill=Dataset), alpha= 0.3)#
#
#ExpressionFeatureSet to matrix#
#
eset <- rma(exprs_set_subset, normalize=FALSE, background=FALSE)#
e_matrix <- 2^exprs(eset)#
#
#Basic MAplot applying log2 to raw data#
d_means <- log2(rowMeans(e_matrix[, 4:6])) - log2(rowMeans(e_matrix[, 1:3]))#
a_means <- (log2(rowMeans(e_matrix[,4:6])) + log2(rowMeans(e_matrix[,1:3]))) / 2#
smoothScatter(a_means, d_means, xlab="Average Intensity", ylab="Log2-ratio", main=paste(treatment,"vs",control, "(Applying log2 to raw data)"))#
#
#Signal Data Processing #
#
raw <- exprs_set_subset#
#
#summarization of normalize data using rma oligo method = median.polish#
eset <- rma(raw, normalize=TRUE, background=TRUE)#
#
#ggplot distribution graphics for normalized data#
exprs_df <- ggplot_dataframe(eset)#
#
p <- ggplot(exprs_df, aes(y=signal, x=Dataset))#
p + geom_boxplot(aes(fill=Treatment)) #+ geom_jitter(alpha = I(1/300))#
#
p <- ggplot(exprs_df, aes(x=signal))#
p + geom_density(aes(fill=Dataset), alpha= 0.3)#
#
#oligo defaults graphics#
#boxplot(eset, main=paste("Raw Data", treatment,"vs",control), transfo=identity)#
#hist(eset, main=paste("Raw Data", treatment,"vs",control), transfo=identity)#
#
#ExpressionSet to matrix#
e_matrix <- exprs(eset)#
#
#MAplot of normalize data #
d_means <- rowMeans(e_matrix[, 4:6]) - rowMeans(e_matrix[, 1:3])#
a_means <- rowMeans(e_matrix)#
smoothScatter(a_means, d_means, xlab="Average Intensity", ylab="Ratio", main=paste(treatment,"vs",control, "(After VSN normalization)"))#
#
#SAM analysis#
library(siggenes)#
exprs.cl <- c(rep(0,3),rep(1,3))#
#
sam.out <- sam(eset, exprs.cl, method= d.stat,  rand= 123)#
summary(sam.out)#
plot(sam.out)#
thres <- 6#
plot(sam.out, thres)#
sum.sam.out <- summary(sam.out, thres)#
sam_csv_file <- paste(out_path, out_name,".csv",sep="")#
sam2excel(sam.out,thres,sam_csv_file)#
sam_results <- read.csv(sam_csv_file, skip=19, header=TRUE)#
num_sig_genes  <- dim(sam_results)[1]#
#
#eBayes analysis#
library(limma)#
#
eset_matrix <- exprs(eset)#
#
d_means <- rowMeans(eset_matrix[, 4:6])-rowMeans(eset_matrix[, 1:3])#
#
design <- model.matrix(~factor(eset[["Sample_Name"]]))#
fit <- lmFit(eset, design)#
ebayes <- eBayes(fit)#
lod <- -log10(ebayes[["p.value"]][,2])#
mtstat <- ebayes[["t"]][,2]#
#
o1 <- order(abs(d_means), decreasing=TRUE)[1:num_sig_genes]#
o2 <- order(abs(mtstat), decreasing=TRUE)[1:num_sig_genes]#
o <- union(o1, o2)#
#
smoothScatter(d_means, lod, main="Moderated t", xlab="Ratio", ylab="LOD")#
points(d_means[o1], lod[o1], pch=18,col="blue")#
points(d_means[o2], lod[o2], pch=8,col="red")#
#abline(h=2, v=c(-1, 1))#
#
tab <- topTable(ebayes, coef=2, adjust="fdr", n=num_sig_genes)#
ebayes_csv_file <- paste(out_path, out_name,"ebayes.csv",sep="")#
write.csv(tab, file=ebayes_csv_file, row.names=FALSE)#
#
imp_genes <-  head((tab$ID),num_sig_genes)#
imp_genes_exprs <- matrix(nrow=num_sig_genes,ncol=6)#
rownames(imp_genes_exprs) <- imp_genes#
colnames(imp_genes_exprs) <- colnames(e_matrix)#
for (i in imp_genes) {#
	print(i)#
	print(e_matrix[i,])#
	imp_genes_exprs[i,] <-  e_matrix[i,]#
}#
e_matrix <- exprs(eset)#
#MAplot of normalize data #
d_means <- rowMeans(e_matrix[, 4:6]) - rowMeans(e_matrix[, 1:3])#
a_means <- rowMeans(e_matrix)#
smoothScatter(a_means, d_means, xlab="Average Intensity", ylab="Ratio", main=paste(treatment,"vs",control, "(After VSN normalization)"))#
points(a_means[rownames(imp_genes_exprs)], d_means[rownames(imp_genes_exprs)], pch=8,col="red")#
points(a_means[as.character(sam_results[["Name"]])], d_means[as.character(sam_results[["Name"]])], pch=20,col="green")#
#
save(e_matrix, eset, file=paste(out_path, out_name,".RData", sep=""))#
dev.off()
rm(list=ls(all=TRUE))#
#Libraries#
library(oligo)#
library("pd.110413.mglo.cag.exp")#
#
#Functions#
#
#build data.frame with signals information to be used for ggplot graphics#
ggplot_dataframe = function(x) {#
#
	exprs_df <- data.frame(signal= numeric(), Dataset=factor(),  Treatment= factor())#
	if (class(x) == "ExpressionFeatureSet") {#
		for (i in 1:length(pm(x)[1,])) {#
			Dataset <- colnames(pm(x))[i]#
			signals <- pm(x)[,i]#
			Treatment <- as.character(x[["Sample_Name"]][i])#
			exprs_df <- rbind(#
							exprs_df,#
							data.frame(#
								signal=signals,#
								Dataset=rep(Dataset,length(signals)),#
								Treatment=rep(Treatment,length(signals)))#
							)#
		}#
	}#
	else {#
		for (i in 1:length(exprs(x)[1,])) {#
			Dataset <- colnames(exprs(x))[i]#
			signals <- exprs(x)[,i]#
			Treatment <- as.character(x[["Sample_Name"]][i])#
			exprs_df <- rbind(#
							exprs_df,#
							data.frame(#
								signal=signals,#
								Dataset=rep(Dataset,length(signals)),#
								Treatment=rep(Treatment,length(signals)))#
							)#
		}#
	}#
	return(exprs_df)#
}#
#++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++#
#
out_path = "~/Documents/Yulien_data/Scripts/"#
out_base_name = "RMA_Final_Results_Differential_Expression"#
#Treatment and control to analyse #
treatment <- "4DST80"#
control <- "4DS"#
out_name = paste(out_base_name,treatment,"vs",control, sep="")#
#Device#
pdf(paste(out_path, out_name, ".pdf", sep=""))#
#
#++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++#
#
#Input Data#
#xys_files#
xys_files_path <- "~/Documents/Yulien_data/Raw_Data_Files/Pair_Files"#
xys.files <- list.xysfiles( xys_files_path, full.names=TRUE ) #list xys_files#
#phenoData#
pheno_file <- "~/Documents/Yulien_data/Design_information/chip_data.tab"#
theData = read.table(pheno_file, row.names=1, header=TRUE,sep="\t")#
theData = subset(theData, select= c("Sample_Name"))#
#
lvls <- c( "channel1", "channel2", "_ALL_" )#
metadata <- data.frame( channel=factor("_ALL_", levels=lvls), labelDescription="Channels" )#
#
#AnnotatedDataFrame building#
pheno_data <- new("AnnotatedDataFrame", data=theData, varMetadata=metadata)#
#ExpressionFeatureSet building using xys_files#
raw_exprs_set <- read.xysfiles( xys.files,#
								pkgname="pd.110413.mglo.cag.exp",#
								phenoData=pheno_data,#
								sampleNames=c("M.furfur-1",#
											"M.globosa-1",#
											"M.globosa-2",#
											"M.globosa-3",#
											"M.furfur-2",#
											"4DS-1",#
											"4DST80-1",#
											"M.furfur-3",#
											"4DST80-2",#
											"4DS-2",#
											"4DST80-3",#
											"4DS-3")#
								)#
#Idexes of the datasets related to the treatment and control specified#
index_1 <- which(raw_exprs_set[["Sample_Name"]] == treatment)#
index_2 <- which(raw_exprs_set[["Sample_Name"]] == control)#
all_indexes <- c(index_1,index_2)#
#Create a ExpressioFeatureSet subset with the datasets related to the specified treatment and control#
exprs_set_subset <- raw_exprs_set[,all_indexes]#
#Oligo default distribution graphics for raw data#
#boxplot(exprs_set_subset, main=paste("Raw Data", treatment,"vs",control))#
#hist(exprs_set_subset, main=paste("Raw Data", treatment, "vs", control))#
#
#ggplot distribution graphics for raw data#
exprs_df <- ggplot_dataframe(exprs_set_subset)#
library(ggplot2)#
p <- ggplot(exprs_df,aes(y=log2(signal),x=Dataset))#
p + geom_boxplot(aes(fill=Treatment)) #+ geom_jitter(alpha = I(1/300))#
#
p <- ggplot(exprs_df, aes(x=log2(signal)))#
p + geom_density(aes(fill=Dataset), alpha= 0.3)#
#
#ExpressionFeatureSet to matrix#
#
eset <- rma(exprs_set_subset, normalize=FALSE, background=FALSE)#
e_matrix <- 2^exprs(eset)#
#
#Basic MAplot applying log2 to raw data#
d_means <- log2(rowMeans(e_matrix[, 4:6])) - log2(rowMeans(e_matrix[, 1:3]))#
a_means <- (log2(rowMeans(e_matrix[,4:6])) + log2(rowMeans(e_matrix[,1:3]))) / 2#
smoothScatter(a_means, d_means, xlab="Average Intensity", ylab="Log2-ratio", main=paste(treatment,"vs",control, "(Applying log2 to raw data)"))#
#
#Signal Data Processing #
#
raw <- exprs_set_subset#
#
#summarization of normalize data using rma oligo method = median.polish#
eset <- rma(raw, normalize=TRUE, background=TRUE)#
#
#ggplot distribution graphics for normalized data#
exprs_df <- ggplot_dataframe(eset)#
#
p <- ggplot(exprs_df, aes(y=signal, x=Dataset))#
p + geom_boxplot(aes(fill=Treatment)) #+ geom_jitter(alpha = I(1/300))#
#
p <- ggplot(exprs_df, aes(x=signal))#
p + geom_density(aes(fill=Dataset), alpha= 0.3)#
#
#oligo defaults graphics#
#boxplot(eset, main=paste("Raw Data", treatment,"vs",control), transfo=identity)#
#hist(eset, main=paste("Raw Data", treatment,"vs",control), transfo=identity)#
#
#ExpressionSet to matrix#
e_matrix <- exprs(eset)#
#
#MAplot of normalize data #
d_means <- rowMeans(e_matrix[, 4:6]) - rowMeans(e_matrix[, 1:3])#
a_means <- rowMeans(e_matrix)#
smoothScatter(a_means, d_means, xlab="Average Intensity", ylab="Ratio", main=paste(treatment,"vs",control, "(RMA)"))#
#
#SAM analysis#
library(siggenes)#
exprs.cl <- c(rep(0,3),rep(1,3))#
#
sam.out <- sam(eset, exprs.cl, method= d.stat,  rand= 123)#
summary(sam.out)#
plot(sam.out)#
thres <- 6#
plot(sam.out, thres)#
sum.sam.out <- summary(sam.out, thres)#
sam_csv_file <- paste(out_path, out_name,".csv",sep="")#
sam2excel(sam.out,thres,sam_csv_file)#
sam_results <- read.csv(sam_csv_file, skip=19, header=TRUE)#
num_sig_genes  <- dim(sam_results)[1]#
#
#eBayes analysis#
library(limma)#
#
eset_matrix <- exprs(eset)#
#
d_means <- rowMeans(eset_matrix[, 4:6])-rowMeans(eset_matrix[, 1:3])#
#
design <- model.matrix(~factor(eset[["Sample_Name"]]))#
fit <- lmFit(eset, design)#
ebayes <- eBayes(fit)#
lod <- -log10(ebayes[["p.value"]][,2])#
mtstat <- ebayes[["t"]][,2]#
#
o1 <- order(abs(d_means), decreasing=TRUE)[1:num_sig_genes]#
o2 <- order(abs(mtstat), decreasing=TRUE)[1:num_sig_genes]#
o <- union(o1, o2)#
#
smoothScatter(d_means, lod, main="Moderated t", xlab="Ratio", ylab="LOD")#
points(d_means[o1], lod[o1], pch=18,col="blue")#
points(d_means[o2], lod[o2], pch=8,col="red")#
#abline(h=2, v=c(-1, 1))#
#
tab <- topTable(ebayes, coef=2, adjust="fdr", n=num_sig_genes)#
ebayes_csv_file <- paste(out_path, out_name,"ebayes.csv",sep="")#
write.csv(tab, file=ebayes_csv_file, row.names=FALSE)#
#
imp_genes <-  head((tab$ID),num_sig_genes)#
imp_genes_exprs <- matrix(nrow=num_sig_genes,ncol=6)#
rownames(imp_genes_exprs) <- imp_genes#
colnames(imp_genes_exprs) <- colnames(e_matrix)#
for (i in imp_genes) {#
	print(i)#
	print(e_matrix[i,])#
	imp_genes_exprs[i,] <-  e_matrix[i,]#
}#
e_matrix <- exprs(eset)#
#MAplot of normalize data #
d_means <- rowMeans(e_matrix[, 4:6]) - rowMeans(e_matrix[, 1:3])#
a_means <- rowMeans(e_matrix)#
smoothScatter(a_means, d_means, xlab="Average Intensity", ylab="Ratio", main=paste(treatment,"vs",control, "(RMA)"))#
points(a_means[rownames(imp_genes_exprs)], d_means[rownames(imp_genes_exprs)], pch=8,col="red")#
points(a_means[as.character(sam_results[["Name"]])], d_means[as.character(sam_results[["Name"]])], pch=20,col="green")#
#
save(e_matrix, eset, file=paste(out_path, out_name,".RData", sep=""))#
dev.off()
rm(list=ls(all=TRUE))#
#Libraries#
library(oligo)#
library("pd.110413.mglo.cag.exp")#
#
#Functions#
#
#build data.frame with signals information to be used for ggplot graphics#
ggplot_dataframe = function(x) {#
#
	exprs_df <- data.frame(signal= numeric(), Dataset=factor(),  Treatment= factor())#
	if (class(x) == "ExpressionFeatureSet") {#
		for (i in 1:length(pm(x)[1,])) {#
			Dataset <- colnames(pm(x))[i]#
			signals <- pm(x)[,i]#
			Treatment <- as.character(x[["Sample_Name"]][i])#
			exprs_df <- rbind(#
							exprs_df,#
							data.frame(#
								signal=signals,#
								Dataset=rep(Dataset,length(signals)),#
								Treatment=rep(Treatment,length(signals)))#
							)#
		}#
	}#
	else {#
		for (i in 1:length(exprs(x)[1,])) {#
			Dataset <- colnames(exprs(x))[i]#
			signals <- exprs(x)[,i]#
			Treatment <- as.character(x[["Sample_Name"]][i])#
			exprs_df <- rbind(#
							exprs_df,#
							data.frame(#
								signal=signals,#
								Dataset=rep(Dataset,length(signals)),#
								Treatment=rep(Treatment,length(signals)))#
							)#
		}#
	}#
	return(exprs_df)#
}#
#++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++#
out_path = "~/Documents/Yulien_data/Scripts/"#
out_base_name = "VSN_Final_Results_Differential_Expression"#
#Treatment and control to analyse #
treatment <- "4DS"#
control <- "M.furfur"#
out_name = paste(out_base_name,treatment,"vs",control,sep="")#
#Device#
pdf(paste(out_path, out_name, ".pdf", sep=""))#
#++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++#
#
#Input Data#
#xys_files#
xys_files_path <- "~/Documents/Yulien_data/Raw_Data_Files/Pair_Files"#
xys.files <- list.xysfiles( xys_files_path, full.names=TRUE ) #list xys_files#
#phenoData#
pheno_file <- "~/Documents/Yulien_data/Design_information/chip_data.tab"#
theData = read.table(pheno_file, row.names=1, header=TRUE,sep="\t")#
theData = subset(theData, select= c("Sample_Name"))#
#
lvls <- c( "channel1", "channel2", "_ALL_" )#
metadata <- data.frame( channel=factor("_ALL_", levels=lvls), labelDescription="Channels" )#
#
#AnnotatedDataFrame building#
pheno_data <- new("AnnotatedDataFrame", data=theData, varMetadata=metadata)#
#ExpressionFeatureSet building using xys_files#
raw_exprs_set <- read.xysfiles( xys.files,#
								pkgname="pd.110413.mglo.cag.exp",#
								phenoData=pheno_data,#
								sampleNames=c("M.furfur-1",#
											"M.globosa-1",#
											"M.globosa-2",#
											"M.globosa-3",#
											"M.furfur-2",#
											"4DS-1",#
											"4DST80-1",#
											"M.furfur-3",#
											"4DST80-2",#
											"4DS-2",#
											"4DST80-3",#
											"4DS-3")#
								)#
#Idexes of the datasets related to the treatment and control specified#
index_1 <- which(raw_exprs_set[["Sample_Name"]] == treatment)#
index_2 <- which(raw_exprs_set[["Sample_Name"]] == control)#
all_indexes <- c(index_1,index_2)#
#Create a ExpressioFeatureSet subset with the datasets related to the specified treatment and control#
exprs_set_subset <- raw_exprs_set[,all_indexes]#
#Oligo default distribution graphics for raw data#
#boxplot(exprs_set_subset, main=paste("Raw Data", treatment,"vs",control))#
#hist(exprs_set_subset, main=paste("Raw Data", treatment, "vs", control))#
#
#ggplot distribution graphics for raw data#
exprs_df <- ggplot_dataframe(exprs_set_subset)#
library(ggplot2)#
p <- ggplot(exprs_df,aes(y=log2(signal),x=Dataset))#
p + geom_boxplot(aes(fill=Treatment)) #+ geom_jitter(alpha = I(1/300))#
#
p <- ggplot(exprs_df, aes(x=log2(signal)))#
p + geom_density(aes(fill=Dataset), alpha= 0.3)#
#
#ExpressionFeatureSet to matrix#
#
eset <- rma(exprs_set_subset, normalize=FALSE, background=FALSE)#
#
e_matrix <- 2^exprs(eset)#
#
#Basic MAplot applying log2 to raw data#
d_means <- log2(rowMeans(e_matrix[, 4:6])) - log2(rowMeans(e_matrix[, 1:3]))#
a_means <- (log2(rowMeans(e_matrix[,4:6])) + log2(rowMeans(e_matrix[,1:3]))) / 2#
smoothScatter(a_means, d_means, xlab="Average Intensity", ylab="Log2-ratio", main=paste(treatment,"vs",control, "(Applying log2 to raw data)"))#
#
#Signal Data Processing #
#bacgroundCorrect (oligo method)#
raw <- exprs_set_subset#
#raw <- backgroundCorrect(exprs_set_subset, "rma") # Add noise to the dataset, in this case#
raw_begin <- raw#
pms = pm(raw) #ExpressionFeatureSet to matrix, ignoring spots with NA signal#
pmsVSN = vsn::vsnMatrix(pms) #vsn "normalization" of signal data#
require("vsn")#
#meanvsSd plots #
meanSdPlot(pmsVSN, ranks=TRUE)#
meanSdPlot(pmsVSN, ranks=FALSE)#
#vsn normalized data, store in a vsn object to ExpressionFeatureSet#
pm(raw) <- exprs(pmsVSN)#
#
#ggplot distribution graphics for normalized data#
exprs_df <- ggplot_dataframe(raw)#
#
p <- ggplot(exprs_df, aes(y=signal, x=Dataset))#
p + geom_boxplot(aes(fill=Treatment)) #+ geom_jitter(alpha = I(1/300))#
#
p <- ggplot(exprs_df, aes(x=signal))#
p + geom_density(aes(fill=Dataset), alpha= 0.3)#
#
#oligo defaults graphics#
#boxplot(eset, main=paste("Raw Data", treatment,"vs",control), transfo=identity)#
#hist(eset, main=paste("Raw Data", treatment,"vs",control), transfo=identity)#
#
#summarization of normalize data using rma oligo method = median.polish#
eset <- rma(raw, normalize = FALSE, background = FALSE)#
#
#ExpressionSet to matrix#
e_matrix <- 2^exprs(eset)#
#
eset_treatments_info = as.character(theData[all_indexes,1])#
eset_theData = data.frame(Sample_Name= factor(eset_treatments_info, levels=unique(eset_treatments_info)))#
rownames(eset_theData) = rownames(theData)[all_indexes]#
pd <- new("AnnotatedDataFrame", data=eset_theData, varMetadata=metadata)#
eset <- new("ExpressionSet", exprs = e_matrix, phenoData = pd, annotation = "pd.110413.mglo.cag.exp")#
#
exprs_df <- ggplot_dataframe(eset)#
#
p <- ggplot(exprs_df, aes(y=signal, x=Dataset))#
p + geom_boxplot(aes(fill=Treatment)) #+ geom_jitter(alpha = I(1/300))#
#
p <- ggplot(exprs_df, aes(x=signal))#
p + geom_density(aes(fill=Dataset), alpha= 0.3)#
#
#MAplot of normalize data #
d_means <- rowMeans(e_matrix[, 4:6]) - rowMeans(e_matrix[, 1:3])#
a_means <- rowMeans(e_matrix)#
smoothScatter(a_means, d_means, xlab="Average Intensity", ylab="Ratio", main=paste(treatment,"vs",control, "(After VSN normalization)"))#
#
#SAM analysis#
library(siggenes)#
exprs.cl <- c(rep(0,3),rep(1,3))#
#
sam.out <- sam(eset, exprs.cl, method= d.stat,  rand= 123)#
summary(sam.out)#
plot(sam.out)#
thres <- 4#
plot(sam.out, thres)#
sum.sam.out <- summary(sam.out, thres)#
sam_csv_file <- paste(out_path, out_name,"sam.csv",sep="")#
sam2excel(sam.out,thres,sam_csv_file)#
sam_results <- read.csv(sam_csv_file, skip=19, header=TRUE)#
num_sig_genes  <- dim(sam_results)[1]#
#
#eBayes analysis#
library(limma)#
#
d_means <- rowMeans(eset_matrix[, 4:6])-rowMeans(eset_matrix[, 1:3])#
#
design <- model.matrix(~factor(eset[["Sample_Name"]]))#
fit <- lmFit(eset, design)#
ebayes <- eBayes(fit)#
lod <- -log10(ebayes[["p.value"]][,2])#
mtstat <- ebayes[["t"]][,2]#
#
o1 <- order(abs(d_means), decreasing=TRUE)[1:num_sig_genes]#
o2 <- order(abs(mtstat), decreasing=TRUE)[1:num_sig_genes]#
o <- union(o1, o2)#
#
smoothScatter(d_means, lod, main="Moderated t", xlab="Ratio", ylab="LOD")#
points(d_means[o1], lod[o1], pch=18,col="blue")#
points(d_means[o2], lod[o2], pch=8,col="red")#
#abline(h=2, v=c(-1, 1))#
#
tab <- topTable(ebayes, coef=2, adjust="fdr", n=num_sig_genes)#
ebayes_csv_file <- paste(out_path, out_name,"ebayes.csv",sep="")#
write.csv(tab, file=ebayes_csv_file, row.names=FALSE)#
#
imp_genes <-  head((tab$ID),num_sig_genes)#
imp_genes_exprs <- matrix(nrow=num_sig_genes,ncol=6)#
rownames(imp_genes_exprs) <- imp_genes#
colnames(imp_genes_exprs) <- colnames(e_matrix)#
for (i in imp_genes) {#
	print(i)#
	print(e_matrix[i,])#
	imp_genes_exprs[i,] <-  e_matrix[i,]#
}#
#
e_matrix <- exprs(eset)#
#MAplot of normalize data #
d_means <- rowMeans(e_matrix[, 4:6]) - rowMeans(e_matrix[, 1:3])#
a_means <- rowMeans(e_matrix)#
smoothScatter(a_means, d_means, xlab="Average Intensity", ylab="Ratio", main=paste(treatment,"vs",control, "(After VSN normalization)"))#
points(a_means[rownames(imp_genes_exprs)], d_means[rownames(imp_genes_exprs)], pch=8,col="red")#
points(a_means[as.character(sam_results[["Name"]])], d_means[as.character(sam_results[["Name"]])], pch=20,col="green")#
#
save(e_matrix, eset, file=paste(out_path, out_name,".RData", sep=""))#
#
dev.off()
rm(list=ls(all=TRUE))#
#Libraries#
library(oligo)#
library("pd.110413.mglo.cag.exp")#
#
#Functions#
#
#build data.frame with signals information to be used for ggplot graphics#
ggplot_dataframe = function(x) {#
#
	exprs_df <- data.frame(signal= numeric(), Dataset=factor(),  Treatment= factor())#
	if (class(x) == "ExpressionFeatureSet") {#
		for (i in 1:length(pm(x)[1,])) {#
			Dataset <- colnames(pm(x))[i]#
			signals <- pm(x)[,i]#
			Treatment <- as.character(x[["Sample_Name"]][i])#
			exprs_df <- rbind(#
							exprs_df,#
							data.frame(#
								signal=signals,#
								Dataset=rep(Dataset,length(signals)),#
								Treatment=rep(Treatment,length(signals)))#
							)#
		}#
	}#
	else {#
		for (i in 1:length(exprs(x)[1,])) {#
			Dataset <- colnames(exprs(x))[i]#
			signals <- exprs(x)[,i]#
			Treatment <- as.character(x[["Sample_Name"]][i])#
			exprs_df <- rbind(#
							exprs_df,#
							data.frame(#
								signal=signals,#
								Dataset=rep(Dataset,length(signals)),#
								Treatment=rep(Treatment,length(signals)))#
							)#
		}#
	}#
	return(exprs_df)#
}#
#++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++#
out_path = "~/Documents/Yulien_data/Scripts/"#
out_base_name = "VSN_Final_Results_Differential_Expression"#
#Treatment and control to analyse #
treatment <- "4DST80"#
control <- "4DS"#
out_name = paste(out_base_name,treatment,"vs",control,sep="")#
#Device#
pdf(paste(out_path, out_name, ".pdf", sep=""))#
#++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++#
#
#Input Data#
#xys_files#
xys_files_path <- "~/Documents/Yulien_data/Raw_Data_Files/Pair_Files"#
xys.files <- list.xysfiles( xys_files_path, full.names=TRUE ) #list xys_files#
#phenoData#
pheno_file <- "~/Documents/Yulien_data/Design_information/chip_data.tab"#
theData = read.table(pheno_file, row.names=1, header=TRUE,sep="\t")#
theData = subset(theData, select= c("Sample_Name"))#
#
lvls <- c( "channel1", "channel2", "_ALL_" )#
metadata <- data.frame( channel=factor("_ALL_", levels=lvls), labelDescription="Channels" )#
#
#AnnotatedDataFrame building#
pheno_data <- new("AnnotatedDataFrame", data=theData, varMetadata=metadata)#
#ExpressionFeatureSet building using xys_files#
raw_exprs_set <- read.xysfiles( xys.files,#
								pkgname="pd.110413.mglo.cag.exp",#
								phenoData=pheno_data,#
								sampleNames=c("M.furfur-1",#
											"M.globosa-1",#
											"M.globosa-2",#
											"M.globosa-3",#
											"M.furfur-2",#
											"4DS-1",#
											"4DST80-1",#
											"M.furfur-3",#
											"4DST80-2",#
											"4DS-2",#
											"4DST80-3",#
											"4DS-3")#
								)#
#Idexes of the datasets related to the treatment and control specified#
index_1 <- which(raw_exprs_set[["Sample_Name"]] == treatment)#
index_2 <- which(raw_exprs_set[["Sample_Name"]] == control)#
all_indexes <- c(index_1,index_2)#
#Create a ExpressioFeatureSet subset with the datasets related to the specified treatment and control#
exprs_set_subset <- raw_exprs_set[,all_indexes]#
#Oligo default distribution graphics for raw data#
#boxplot(exprs_set_subset, main=paste("Raw Data", treatment,"vs",control))#
#hist(exprs_set_subset, main=paste("Raw Data", treatment, "vs", control))#
#
#ggplot distribution graphics for raw data#
exprs_df <- ggplot_dataframe(exprs_set_subset)#
library(ggplot2)#
p <- ggplot(exprs_df,aes(y=log2(signal),x=Dataset))#
p + geom_boxplot(aes(fill=Treatment)) #+ geom_jitter(alpha = I(1/300))#
#
p <- ggplot(exprs_df, aes(x=log2(signal)))#
p + geom_density(aes(fill=Dataset), alpha= 0.3)#
#
#ExpressionFeatureSet to matrix#
#
eset <- rma(exprs_set_subset, normalize=FALSE, background=FALSE)#
#
e_matrix <- 2^exprs(eset)#
#
#Basic MAplot applying log2 to raw data#
d_means <- log2(rowMeans(e_matrix[, 4:6])) - log2(rowMeans(e_matrix[, 1:3]))#
a_means <- (log2(rowMeans(e_matrix[,4:6])) + log2(rowMeans(e_matrix[,1:3]))) / 2#
smoothScatter(a_means, d_means, xlab="Average Intensity", ylab="Log2-ratio", main=paste(treatment,"vs",control, "(Applying log2 to raw data)"))#
#
#Signal Data Processing #
#bacgroundCorrect (oligo method)#
raw <- exprs_set_subset#
#raw <- backgroundCorrect(exprs_set_subset, "rma") # Add noise to the dataset, in this case#
raw_begin <- raw#
pms = pm(raw) #ExpressionFeatureSet to matrix, ignoring spots with NA signal#
pmsVSN = vsn::vsnMatrix(pms) #vsn "normalization" of signal data#
require("vsn")#
#meanvsSd plots #
meanSdPlot(pmsVSN, ranks=TRUE)#
meanSdPlot(pmsVSN, ranks=FALSE)#
#vsn normalized data, store in a vsn object to ExpressionFeatureSet#
pm(raw) <- exprs(pmsVSN)#
#
#ggplot distribution graphics for normalized data#
exprs_df <- ggplot_dataframe(raw)#
#
p <- ggplot(exprs_df, aes(y=signal, x=Dataset))#
p + geom_boxplot(aes(fill=Treatment)) #+ geom_jitter(alpha = I(1/300))#
#
p <- ggplot(exprs_df, aes(x=signal))#
p + geom_density(aes(fill=Dataset), alpha= 0.3)#
#
#oligo defaults graphics#
#boxplot(eset, main=paste("Raw Data", treatment,"vs",control), transfo=identity)#
#hist(eset, main=paste("Raw Data", treatment,"vs",control), transfo=identity)#
#
#summarization of normalize data using rma oligo method = median.polish#
eset <- rma(raw, normalize = FALSE, background = FALSE)#
#
#ExpressionSet to matrix#
e_matrix <- 2^exprs(eset)#
#
eset_treatments_info = as.character(theData[all_indexes,1])#
eset_theData = data.frame(Sample_Name= factor(eset_treatments_info, levels=unique(eset_treatments_info)))#
rownames(eset_theData) = rownames(theData)[all_indexes]#
pd <- new("AnnotatedDataFrame", data=eset_theData, varMetadata=metadata)#
eset <- new("ExpressionSet", exprs = e_matrix, phenoData = pd, annotation = "pd.110413.mglo.cag.exp")#
#
exprs_df <- ggplot_dataframe(eset)#
#
p <- ggplot(exprs_df, aes(y=signal, x=Dataset))#
p + geom_boxplot(aes(fill=Treatment)) #+ geom_jitter(alpha = I(1/300))#
#
p <- ggplot(exprs_df, aes(x=signal))#
p + geom_density(aes(fill=Dataset), alpha= 0.3)#
#
#MAplot of normalize data #
d_means <- rowMeans(e_matrix[, 4:6]) - rowMeans(e_matrix[, 1:3])#
a_means <- rowMeans(e_matrix)#
smoothScatter(a_means, d_means, xlab="Average Intensity", ylab="Ratio", main=paste(treatment,"vs",control, "(After VSN normalization)"))#
#
#SAM analysis#
library(siggenes)#
exprs.cl <- c(rep(0,3),rep(1,3))#
#
sam.out <- sam(eset, exprs.cl, method= d.stat,  rand= 123)#
summary(sam.out)#
plot(sam.out)#
thres <- 4#
plot(sam.out, thres)#
sum.sam.out <- summary(sam.out, thres)#
sam_csv_file <- paste(out_path, out_name,"sam.csv",sep="")#
sam2excel(sam.out,thres,sam_csv_file)#
sam_results <- read.csv(sam_csv_file, skip=19, header=TRUE)#
num_sig_genes  <- dim(sam_results)[1]#
#
#eBayes analysis#
library(limma)#
#
d_means <- rowMeans(eset_matrix[, 4:6])-rowMeans(eset_matrix[, 1:3])#
#
design <- model.matrix(~factor(eset[["Sample_Name"]]))#
fit <- lmFit(eset, design)#
ebayes <- eBayes(fit)#
lod <- -log10(ebayes[["p.value"]][,2])#
mtstat <- ebayes[["t"]][,2]#
#
o1 <- order(abs(d_means), decreasing=TRUE)[1:num_sig_genes]#
o2 <- order(abs(mtstat), decreasing=TRUE)[1:num_sig_genes]#
o <- union(o1, o2)#
#
smoothScatter(d_means, lod, main="Moderated t", xlab="Ratio", ylab="LOD")#
points(d_means[o1], lod[o1], pch=18,col="blue")#
points(d_means[o2], lod[o2], pch=8,col="red")#
#abline(h=2, v=c(-1, 1))#
#
tab <- topTable(ebayes, coef=2, adjust="fdr", n=num_sig_genes)#
ebayes_csv_file <- paste(out_path, out_name,"ebayes.csv",sep="")#
write.csv(tab, file=ebayes_csv_file, row.names=FALSE)#
#
imp_genes <-  head((tab$ID),num_sig_genes)#
imp_genes_exprs <- matrix(nrow=num_sig_genes,ncol=6)#
rownames(imp_genes_exprs) <- imp_genes#
colnames(imp_genes_exprs) <- colnames(e_matrix)#
for (i in imp_genes) {#
	print(i)#
	print(e_matrix[i,])#
	imp_genes_exprs[i,] <-  e_matrix[i,]#
}#
#
e_matrix <- exprs(eset)#
#MAplot of normalize data #
d_means <- rowMeans(e_matrix[, 4:6]) - rowMeans(e_matrix[, 1:3])#
a_means <- rowMeans(e_matrix)#
smoothScatter(a_means, d_means, xlab="Average Intensity", ylab="Ratio", main=paste(treatment,"vs",control, "(After VSN normalization)"))#
points(a_means[rownames(imp_genes_exprs)], d_means[rownames(imp_genes_exprs)], pch=8,col="red")#
points(a_means[as.character(sam_results[["Name"]])], d_means[as.character(sam_results[["Name"]])], pch=20,col="green")#
#
save(e_matrix, eset, file=paste(out_path, out_name,".RData", sep=""))#
#
dev.off()
rm(list=ls(all=TRUE))#
#Libraries#
library(oligo)#
library("pd.110413.mglo.cag.exp")#
#
#Functions#
#
#build data.frame with signals information to be used for ggplot graphics#
ggplot_dataframe = function(x) {#
#
	exprs_df <- data.frame(signal= numeric(), Dataset=factor(),  Treatment= factor())#
	if (class(x) == "ExpressionFeatureSet") {#
		for (i in 1:length(pm(x)[1,])) {#
			Dataset <- colnames(pm(x))[i]#
			signals <- pm(x)[,i]#
			Treatment <- as.character(x[["Sample_Name"]][i])#
			exprs_df <- rbind(#
							exprs_df,#
							data.frame(#
								signal=signals,#
								Dataset=rep(Dataset,length(signals)),#
								Treatment=rep(Treatment,length(signals)))#
							)#
		}#
	}#
	else {#
		for (i in 1:length(exprs(x)[1,])) {#
			Dataset <- colnames(exprs(x))[i]#
			signals <- exprs(x)[,i]#
			Treatment <- as.character(x[["Sample_Name"]][i])#
			exprs_df <- rbind(#
							exprs_df,#
							data.frame(#
								signal=signals,#
								Dataset=rep(Dataset,length(signals)),#
								Treatment=rep(Treatment,length(signals)))#
							)#
		}#
	}#
	return(exprs_df)#
}#
#++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++#
#
out_path = "~/Documents/Yulien_data/Scripts/"#
out_base_name = "RMA_Final_Results_Differential_Expression"#
#Treatment and control to analyse #
treatment <- "4DS"#
control <- "M.furfur"#
out_name = paste(out_base_name,treatment,"vs",control, sep="")#
#Device#
pdf(paste(out_path, out_name, ".pdf", sep=""))#
#
#++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++#
#
#Input Data#
#xys_files#
xys_files_path <- "~/Documents/Yulien_data/Raw_Data_Files/Pair_Files"#
xys.files <- list.xysfiles( xys_files_path, full.names=TRUE ) #list xys_files#
#phenoData#
pheno_file <- "~/Documents/Yulien_data/Design_information/chip_data.tab"#
theData = read.table(pheno_file, row.names=1, header=TRUE,sep="\t")#
theData = subset(theData, select= c("Sample_Name"))#
#
lvls <- c( "channel1", "channel2", "_ALL_" )#
metadata <- data.frame( channel=factor("_ALL_", levels=lvls), labelDescription="Channels" )#
#
#AnnotatedDataFrame building#
pheno_data <- new("AnnotatedDataFrame", data=theData, varMetadata=metadata)#
#ExpressionFeatureSet building using xys_files#
raw_exprs_set <- read.xysfiles( xys.files,#
								pkgname="pd.110413.mglo.cag.exp",#
								phenoData=pheno_data,#
								sampleNames=c("M.furfur-1",#
											"M.globosa-1",#
											"M.globosa-2",#
											"M.globosa-3",#
											"M.furfur-2",#
											"4DS-1",#
											"4DST80-1",#
											"M.furfur-3",#
											"4DST80-2",#
											"4DS-2",#
											"4DST80-3",#
											"4DS-3")#
								)#
#Idexes of the datasets related to the treatment and control specified#
index_1 <- which(raw_exprs_set[["Sample_Name"]] == treatment)#
index_2 <- which(raw_exprs_set[["Sample_Name"]] == control)#
all_indexes <- c(index_1,index_2)#
#Create a ExpressioFeatureSet subset with the datasets related to the specified treatment and control#
exprs_set_subset <- raw_exprs_set[,all_indexes]#
#Oligo default distribution graphics for raw data#
#boxplot(exprs_set_subset, main=paste("Raw Data", treatment,"vs",control))#
#hist(exprs_set_subset, main=paste("Raw Data", treatment, "vs", control))#
#
#ggplot distribution graphics for raw data#
exprs_df <- ggplot_dataframe(exprs_set_subset)#
library(ggplot2)#
p <- ggplot(exprs_df,aes(y=log2(signal),x=Dataset))#
p + geom_boxplot(aes(fill=Treatment)) #+ geom_jitter(alpha = I(1/300))#
#
p <- ggplot(exprs_df, aes(x=log2(signal)))#
p + geom_density(aes(fill=Dataset), alpha= 0.3)#
#
#ExpressionFeatureSet to matrix#
#
eset <- rma(exprs_set_subset, normalize=FALSE, background=FALSE)#
e_matrix <- 2^exprs(eset)#
#
#Basic MAplot applying log2 to raw data#
d_means <- log2(rowMeans(e_matrix[, 4:6])) - log2(rowMeans(e_matrix[, 1:3]))#
a_means <- (log2(rowMeans(e_matrix[,4:6])) + log2(rowMeans(e_matrix[,1:3]))) / 2#
smoothScatter(a_means, d_means, xlab="Average Intensity", ylab="Log2-ratio", main=paste(treatment,"vs",control, "(Applying log2 to raw data)"))#
#
#Signal Data Processing #
#
raw <- exprs_set_subset#
#
#summarization of normalize data using rma oligo method = median.polish#
eset <- rma(raw, normalize=TRUE, background=TRUE)#
#
#ggplot distribution graphics for normalized data#
exprs_df <- ggplot_dataframe(eset)#
#
p <- ggplot(exprs_df, aes(y=signal, x=Dataset))#
p + geom_boxplot(aes(fill=Treatment)) #+ geom_jitter(alpha = I(1/300))#
#
p <- ggplot(exprs_df, aes(x=signal))#
p + geom_density(aes(fill=Dataset), alpha= 0.3)#
#
#oligo defaults graphics#
#boxplot(eset, main=paste("Raw Data", treatment,"vs",control), transfo=identity)#
#hist(eset, main=paste("Raw Data", treatment,"vs",control), transfo=identity)#
#
#ExpressionSet to matrix#
e_matrix <- exprs(eset)#
#
#MAplot of normalize data #
d_means <- rowMeans(e_matrix[, 4:6]) - rowMeans(e_matrix[, 1:3])#
a_means <- rowMeans(e_matrix)#
smoothScatter(a_means, d_means, xlab="Average Intensity", ylab="Ratio", main=paste(treatment,"vs",control, "(RMA)"))#
#
#SAM analysis#
library(siggenes)#
exprs.cl <- c(rep(0,3),rep(1,3))#
#
sam.out <- sam(eset, exprs.cl, method= d.stat,  rand= 123)#
summary(sam.out)#
plot(sam.out)#
thres <- 6#
plot(sam.out, thres)#
sum.sam.out <- summary(sam.out, thres)#
sam_csv_file <- paste(out_path, out_name,".csv",sep="")#
sam2excel(sam.out,thres,sam_csv_file)#
sam_results <- read.csv(sam_csv_file, skip=19, header=TRUE)#
num_sig_genes  <- dim(sam_results)[1]#
#
#eBayes analysis#
library(limma)#
#
eset_matrix <- exprs(eset)#
#
d_means <- rowMeans(eset_matrix[, 4:6])-rowMeans(eset_matrix[, 1:3])#
#
design <- model.matrix(~factor(eset[["Sample_Name"]]))#
fit <- lmFit(eset, design)#
ebayes <- eBayes(fit)#
lod <- -log10(ebayes[["p.value"]][,2])#
mtstat <- ebayes[["t"]][,2]#
#
o1 <- order(abs(d_means), decreasing=TRUE)[1:num_sig_genes]#
o2 <- order(abs(mtstat), decreasing=TRUE)[1:num_sig_genes]#
o <- union(o1, o2)#
#
smoothScatter(d_means, lod, main="Moderated t", xlab="Ratio", ylab="LOD")#
points(d_means[o1], lod[o1], pch=18,col="blue")#
points(d_means[o2], lod[o2], pch=8,col="red")#
#abline(h=2, v=c(-1, 1))#
#
tab <- topTable(ebayes, coef=2, adjust="fdr", n=num_sig_genes)#
ebayes_csv_file <- paste(out_path, out_name,"ebayes.csv",sep="")#
write.csv(tab, file=ebayes_csv_file, row.names=FALSE)#
#
imp_genes <-  head((tab$ID),num_sig_genes)#
imp_genes_exprs <- matrix(nrow=num_sig_genes,ncol=6)#
rownames(imp_genes_exprs) <- imp_genes#
colnames(imp_genes_exprs) <- colnames(e_matrix)#
for (i in imp_genes) {#
	print(i)#
	print(e_matrix[i,])#
	imp_genes_exprs[i,] <-  e_matrix[i,]#
}#
e_matrix <- exprs(eset)#
#MAplot of normalize data #
d_means <- rowMeans(e_matrix[, 4:6]) - rowMeans(e_matrix[, 1:3])#
a_means <- rowMeans(e_matrix)#
smoothScatter(a_means, d_means, xlab="Average Intensity", ylab="Ratio", main=paste(treatment,"vs",control, "(RMA)"))#
points(a_means[rownames(imp_genes_exprs)], d_means[rownames(imp_genes_exprs)], pch=8,col="red")#
points(a_means[as.character(sam_results[["Name"]])], d_means[as.character(sam_results[["Name"]])], pch=20,col="green")#
#
save(e_matrix, eset, file=paste(out_path, out_name,".RData", sep=""))#
dev.off()
rm(list=ls(all=TRUE))#
#Libraries#
library(oligo)#
library("pd.110413.mglo.cag.exp")#
#
#Functions#
#
#build data.frame with signals information to be used for ggplot graphics#
ggplot_dataframe = function(x) {#
#
	exprs_df <- data.frame(signal= numeric(), Dataset=factor(),  Treatment= factor())#
	if (class(x) == "ExpressionFeatureSet") {#
		for (i in 1:length(pm(x)[1,])) {#
			Dataset <- colnames(pm(x))[i]#
			signals <- pm(x)[,i]#
			Treatment <- as.character(x[["Sample_Name"]][i])#
			exprs_df <- rbind(#
							exprs_df,#
							data.frame(#
								signal=signals,#
								Dataset=rep(Dataset,length(signals)),#
								Treatment=rep(Treatment,length(signals)))#
							)#
		}#
	}#
	else {#
		for (i in 1:length(exprs(x)[1,])) {#
			Dataset <- colnames(exprs(x))[i]#
			signals <- exprs(x)[,i]#
			Treatment <- as.character(x[["Sample_Name"]][i])#
			exprs_df <- rbind(#
							exprs_df,#
							data.frame(#
								signal=signals,#
								Dataset=rep(Dataset,length(signals)),#
								Treatment=rep(Treatment,length(signals)))#
							)#
		}#
	}#
	return(exprs_df)#
}#
#++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++#
#
out_path = "~/Documents/Yulien_data/Scripts/"#
out_base_name = "RMA_Final_Results_Differential_Expression"#
#Treatment and control to analyse #
treatment <- "M.furfur"#
control <- "M.globosa"#
out_name = paste(out_base_name,treatment,"vs",control, sep="")#
#Device#
pdf(paste(out_path, out_name, ".pdf", sep=""))#
#
#++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++#
#
#Input Data#
#xys_files#
xys_files_path <- "~/Documents/Yulien_data/Raw_Data_Files/Pair_Files"#
xys.files <- list.xysfiles( xys_files_path, full.names=TRUE ) #list xys_files#
#phenoData#
pheno_file <- "~/Documents/Yulien_data/Design_information/chip_data.tab"#
theData = read.table(pheno_file, row.names=1, header=TRUE,sep="\t")#
theData = subset(theData, select= c("Sample_Name"))#
#
lvls <- c( "channel1", "channel2", "_ALL_" )#
metadata <- data.frame( channel=factor("_ALL_", levels=lvls), labelDescription="Channels" )#
#
#AnnotatedDataFrame building#
pheno_data <- new("AnnotatedDataFrame", data=theData, varMetadata=metadata)#
#ExpressionFeatureSet building using xys_files#
raw_exprs_set <- read.xysfiles( xys.files,#
								pkgname="pd.110413.mglo.cag.exp",#
								phenoData=pheno_data,#
								sampleNames=c("M.furfur-1",#
											"M.globosa-1",#
											"M.globosa-2",#
											"M.globosa-3",#
											"M.furfur-2",#
											"4DS-1",#
											"4DST80-1",#
											"M.furfur-3",#
											"4DST80-2",#
											"4DS-2",#
											"4DST80-3",#
											"4DS-3")#
								)#
#Idexes of the datasets related to the treatment and control specified#
index_1 <- which(raw_exprs_set[["Sample_Name"]] == treatment)#
index_2 <- which(raw_exprs_set[["Sample_Name"]] == control)#
all_indexes <- c(index_1,index_2)#
#Create a ExpressioFeatureSet subset with the datasets related to the specified treatment and control#
exprs_set_subset <- raw_exprs_set[,all_indexes]#
#Oligo default distribution graphics for raw data#
#boxplot(exprs_set_subset, main=paste("Raw Data", treatment,"vs",control))#
#hist(exprs_set_subset, main=paste("Raw Data", treatment, "vs", control))#
#
#ggplot distribution graphics for raw data#
exprs_df <- ggplot_dataframe(exprs_set_subset)#
library(ggplot2)#
p <- ggplot(exprs_df,aes(y=log2(signal),x=Dataset))#
p + geom_boxplot(aes(fill=Treatment)) #+ geom_jitter(alpha = I(1/300))#
#
p <- ggplot(exprs_df, aes(x=log2(signal)))#
p + geom_density(aes(fill=Dataset), alpha= 0.3)#
#
#ExpressionFeatureSet to matrix#
#
eset <- rma(exprs_set_subset, normalize=FALSE, background=FALSE)#
e_matrix <- 2^exprs(eset)#
#
#Basic MAplot applying log2 to raw data#
d_means <- log2(rowMeans(e_matrix[, 4:6])) - log2(rowMeans(e_matrix[, 1:3]))#
a_means <- (log2(rowMeans(e_matrix[,4:6])) + log2(rowMeans(e_matrix[,1:3]))) / 2#
smoothScatter(a_means, d_means, xlab="Average Intensity", ylab="Log2-ratio", main=paste(treatment,"vs",control, "(Applying log2 to raw data)"))#
#
#Signal Data Processing #
#
raw <- exprs_set_subset#
#
#summarization of normalize data using rma oligo method = median.polish#
eset <- rma(raw, normalize=TRUE, background=TRUE)#
#
#ggplot distribution graphics for normalized data#
exprs_df <- ggplot_dataframe(eset)#
#
p <- ggplot(exprs_df, aes(y=signal, x=Dataset))#
p + geom_boxplot(aes(fill=Treatment)) #+ geom_jitter(alpha = I(1/300))#
#
p <- ggplot(exprs_df, aes(x=signal))#
p + geom_density(aes(fill=Dataset), alpha= 0.3)#
#
#oligo defaults graphics#
#boxplot(eset, main=paste("Raw Data", treatment,"vs",control), transfo=identity)#
#hist(eset, main=paste("Raw Data", treatment,"vs",control), transfo=identity)#
#
#ExpressionSet to matrix#
e_matrix <- exprs(eset)#
#
#MAplot of normalize data #
d_means <- rowMeans(e_matrix[, 4:6]) - rowMeans(e_matrix[, 1:3])#
a_means <- rowMeans(e_matrix)#
smoothScatter(a_means, d_means, xlab="Average Intensity", ylab="Ratio", main=paste(treatment,"vs",control, "(RMA)"))#
#
#SAM analysis#
library(siggenes)#
exprs.cl <- c(rep(0,3),rep(1,3))#
#
sam.out <- sam(eset, exprs.cl, method= d.stat,  rand= 123)#
summary(sam.out)#
plot(sam.out)#
thres <- 6#
plot(sam.out, thres)#
sum.sam.out <- summary(sam.out, thres)#
sam_csv_file <- paste(out_path, out_name,".csv",sep="")#
sam2excel(sam.out,thres,sam_csv_file)#
sam_results <- read.csv(sam_csv_file, skip=19, header=TRUE)#
num_sig_genes  <- dim(sam_results)[1]#
#
#eBayes analysis#
library(limma)#
#
eset_matrix <- exprs(eset)#
#
d_means <- rowMeans(eset_matrix[, 4:6])-rowMeans(eset_matrix[, 1:3])#
#
design <- model.matrix(~factor(eset[["Sample_Name"]]))#
fit <- lmFit(eset, design)#
ebayes <- eBayes(fit)#
lod <- -log10(ebayes[["p.value"]][,2])#
mtstat <- ebayes[["t"]][,2]#
#
o1 <- order(abs(d_means), decreasing=TRUE)[1:num_sig_genes]#
o2 <- order(abs(mtstat), decreasing=TRUE)[1:num_sig_genes]#
o <- union(o1, o2)#
#
smoothScatter(d_means, lod, main="Moderated t", xlab="Ratio", ylab="LOD")#
points(d_means[o1], lod[o1], pch=18,col="blue")#
points(d_means[o2], lod[o2], pch=8,col="red")#
#abline(h=2, v=c(-1, 1))#
#
tab <- topTable(ebayes, coef=2, adjust="fdr", n=num_sig_genes)#
ebayes_csv_file <- paste(out_path, out_name,"ebayes.csv",sep="")#
write.csv(tab, file=ebayes_csv_file, row.names=FALSE)#
#
imp_genes <-  head((tab$ID),num_sig_genes)#
imp_genes_exprs <- matrix(nrow=num_sig_genes,ncol=6)#
rownames(imp_genes_exprs) <- imp_genes#
colnames(imp_genes_exprs) <- colnames(e_matrix)#
for (i in imp_genes) {#
	print(i)#
	print(e_matrix[i,])#
	imp_genes_exprs[i,] <-  e_matrix[i,]#
}#
e_matrix <- exprs(eset)#
#MAplot of normalize data #
d_means <- rowMeans(e_matrix[, 4:6]) - rowMeans(e_matrix[, 1:3])#
a_means <- rowMeans(e_matrix)#
smoothScatter(a_means, d_means, xlab="Average Intensity", ylab="Ratio", main=paste(treatment,"vs",control, "(RMA)"))#
points(a_means[rownames(imp_genes_exprs)], d_means[rownames(imp_genes_exprs)], pch=8,col="red")#
points(a_means[as.character(sam_results[["Name"]])], d_means[as.character(sam_results[["Name"]])], pch=20,col="green")#
#
save(e_matrix, eset, file=paste(out_path, out_name,".RData", sep=""))#
dev.off()
rm(list=ls(all=TRUE))#
#Libraries#
library(oligo)#
library("pd.110413.mglo.cag.exp")#
#
#Functions#
#
#build data.frame with signals information to be used for ggplot graphics#
ggplot_dataframe = function(x) {#
#
	exprs_df <- data.frame(signal= numeric(), Dataset=factor(),  Treatment= factor())#
	if (class(x) == "ExpressionFeatureSet") {#
		for (i in 1:length(pm(x)[1,])) {#
			Dataset <- colnames(pm(x))[i]#
			signals <- pm(x)[,i]#
			Treatment <- as.character(x[["Sample_Name"]][i])#
			exprs_df <- rbind(#
							exprs_df,#
							data.frame(#
								signal=signals,#
								Dataset=rep(Dataset,length(signals)),#
								Treatment=rep(Treatment,length(signals)))#
							)#
		}#
	}#
	else {#
		for (i in 1:length(exprs(x)[1,])) {#
			Dataset <- colnames(exprs(x))[i]#
			signals <- exprs(x)[,i]#
			Treatment <- as.character(x[["Sample_Name"]][i])#
			exprs_df <- rbind(#
							exprs_df,#
							data.frame(#
								signal=signals,#
								Dataset=rep(Dataset,length(signals)),#
								Treatment=rep(Treatment,length(signals)))#
							)#
		}#
	}#
	return(exprs_df)#
}#
#++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++#
out_path = "~/Documents/Yulien_data/Scripts/"#
out_base_name = "VSN_Final_Results_Differential_Expression"#
#Treatment and control to analyse #
treatment <- "M.furfur"#
control <- "M.globosa"#
out_name = paste(out_base_name,treatment,"vs",control,sep="")#
#Device#
pdf(paste(out_path, out_name, ".pdf", sep=""))#
#++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++#
#
#Input Data#
#xys_files#
xys_files_path <- "~/Documents/Yulien_data/Raw_Data_Files/Pair_Files"#
xys.files <- list.xysfiles( xys_files_path, full.names=TRUE ) #list xys_files#
#phenoData#
pheno_file <- "~/Documents/Yulien_data/Design_information/chip_data.tab"#
theData = read.table(pheno_file, row.names=1, header=TRUE,sep="\t")#
theData = subset(theData, select= c("Sample_Name"))#
#
lvls <- c( "channel1", "channel2", "_ALL_" )#
metadata <- data.frame( channel=factor("_ALL_", levels=lvls), labelDescription="Channels" )#
#
#AnnotatedDataFrame building#
pheno_data <- new("AnnotatedDataFrame", data=theData, varMetadata=metadata)#
#ExpressionFeatureSet building using xys_files#
raw_exprs_set <- read.xysfiles( xys.files,#
								pkgname="pd.110413.mglo.cag.exp",#
								phenoData=pheno_data,#
								sampleNames=c("M.furfur-1",#
											"M.globosa-1",#
											"M.globosa-2",#
											"M.globosa-3",#
											"M.furfur-2",#
											"4DS-1",#
											"4DST80-1",#
											"M.furfur-3",#
											"4DST80-2",#
											"4DS-2",#
											"4DST80-3",#
											"4DS-3")#
								)#
#Idexes of the datasets related to the treatment and control specified#
index_1 <- which(raw_exprs_set[["Sample_Name"]] == treatment)#
index_2 <- which(raw_exprs_set[["Sample_Name"]] == control)#
all_indexes <- c(index_1,index_2)#
#Create a ExpressioFeatureSet subset with the datasets related to the specified treatment and control#
exprs_set_subset <- raw_exprs_set[,all_indexes]#
#Oligo default distribution graphics for raw data#
#boxplot(exprs_set_subset, main=paste("Raw Data", treatment,"vs",control))#
#hist(exprs_set_subset, main=paste("Raw Data", treatment, "vs", control))#
#
#ggplot distribution graphics for raw data#
exprs_df <- ggplot_dataframe(exprs_set_subset)#
library(ggplot2)#
p <- ggplot(exprs_df,aes(y=log2(signal),x=Dataset))#
p + geom_boxplot(aes(fill=Treatment)) #+ geom_jitter(alpha = I(1/300))#
#
p <- ggplot(exprs_df, aes(x=log2(signal)))#
p + geom_density(aes(fill=Dataset), alpha= 0.3)#
#
#ExpressionFeatureSet to matrix#
#
eset <- rma(exprs_set_subset, normalize=FALSE, background=FALSE)#
#
e_matrix <- 2^exprs(eset)#
#
#Basic MAplot applying log2 to raw data#
d_means <- log2(rowMeans(e_matrix[, 4:6])) - log2(rowMeans(e_matrix[, 1:3]))#
a_means <- (log2(rowMeans(e_matrix[,4:6])) + log2(rowMeans(e_matrix[,1:3]))) / 2#
smoothScatter(a_means, d_means, xlab="Average Intensity", ylab="Log2-ratio", main=paste(treatment,"vs",control, "(Applying log2 to raw data)"))#
#
#Signal Data Processing #
#bacgroundCorrect (oligo method)#
raw <- exprs_set_subset#
#raw <- backgroundCorrect(exprs_set_subset, "rma") # Add noise to the dataset, in this case#
raw_begin <- raw#
pms = pm(raw) #ExpressionFeatureSet to matrix, ignoring spots with NA signal#
pmsVSN = vsn::vsnMatrix(pms) #vsn "normalization" of signal data#
require("vsn")#
#meanvsSd plots #
meanSdPlot(pmsVSN, ranks=TRUE)#
meanSdPlot(pmsVSN, ranks=FALSE)#
#vsn normalized data, store in a vsn object to ExpressionFeatureSet#
pm(raw) <- exprs(pmsVSN)#
#
#ggplot distribution graphics for normalized data#
exprs_df <- ggplot_dataframe(raw)#
#
p <- ggplot(exprs_df, aes(y=signal, x=Dataset))#
p + geom_boxplot(aes(fill=Treatment)) #+ geom_jitter(alpha = I(1/300))#
#
p <- ggplot(exprs_df, aes(x=signal))#
p + geom_density(aes(fill=Dataset), alpha= 0.3)#
#
#oligo defaults graphics#
#boxplot(eset, main=paste("Raw Data", treatment,"vs",control), transfo=identity)#
#hist(eset, main=paste("Raw Data", treatment,"vs",control), transfo=identity)#
#
#summarization of normalize data using rma oligo method = median.polish#
eset <- rma(raw, normalize = FALSE, background = FALSE)#
#
#ExpressionSet to matrix#
e_matrix <- 2^exprs(eset)#
#
eset_treatments_info = as.character(theData[all_indexes,1])#
eset_theData = data.frame(Sample_Name= factor(eset_treatments_info, levels=unique(eset_treatments_info)))#
rownames(eset_theData) = rownames(theData)[all_indexes]#
pd <- new("AnnotatedDataFrame", data=eset_theData, varMetadata=metadata)#
eset <- new("ExpressionSet", exprs = e_matrix, phenoData = pd, annotation = "pd.110413.mglo.cag.exp")#
#
exprs_df <- ggplot_dataframe(eset)#
#
p <- ggplot(exprs_df, aes(y=signal, x=Dataset))#
p + geom_boxplot(aes(fill=Treatment)) #+ geom_jitter(alpha = I(1/300))#
#
p <- ggplot(exprs_df, aes(x=signal))#
p + geom_density(aes(fill=Dataset), alpha= 0.3)#
#
#MAplot of normalize data #
d_means <- rowMeans(e_matrix[, 4:6]) - rowMeans(e_matrix[, 1:3])#
a_means <- rowMeans(e_matrix)#
smoothScatter(a_means, d_means, xlab="Average Intensity", ylab="Ratio", main=paste(treatment,"vs",control, "(After VSN normalization)"))#
#
#SAM analysis#
library(siggenes)#
exprs.cl <- c(rep(0,3),rep(1,3))#
#
sam.out <- sam(eset, exprs.cl, method= d.stat,  rand= 123)#
summary(sam.out)#
plot(sam.out)#
thres <- 4#
plot(sam.out, thres)#
sum.sam.out <- summary(sam.out, thres)#
sam_csv_file <- paste(out_path, out_name,"sam.csv",sep="")#
sam2excel(sam.out,thres,sam_csv_file)#
sam_results <- read.csv(sam_csv_file, skip=19, header=TRUE)#
num_sig_genes  <- dim(sam_results)[1]#
#
#eBayes analysis#
library(limma)#
#
d_means <- rowMeans(eset_matrix[, 4:6])-rowMeans(eset_matrix[, 1:3])#
#
design <- model.matrix(~factor(eset[["Sample_Name"]]))#
fit <- lmFit(eset, design)#
ebayes <- eBayes(fit)#
lod <- -log10(ebayes[["p.value"]][,2])#
mtstat <- ebayes[["t"]][,2]#
#
o1 <- order(abs(d_means), decreasing=TRUE)[1:num_sig_genes]#
o2 <- order(abs(mtstat), decreasing=TRUE)[1:num_sig_genes]#
o <- union(o1, o2)#
#
smoothScatter(d_means, lod, main="Moderated t", xlab="Ratio", ylab="LOD")#
points(d_means[o1], lod[o1], pch=18,col="blue")#
points(d_means[o2], lod[o2], pch=8,col="red")#
#abline(h=2, v=c(-1, 1))#
#
tab <- topTable(ebayes, coef=2, adjust="fdr", n=num_sig_genes)#
ebayes_csv_file <- paste(out_path, out_name,"ebayes.csv",sep="")#
write.csv(tab, file=ebayes_csv_file, row.names=FALSE)#
#
imp_genes <-  head((tab$ID),num_sig_genes)#
imp_genes_exprs <- matrix(nrow=num_sig_genes,ncol=6)#
rownames(imp_genes_exprs) <- imp_genes#
colnames(imp_genes_exprs) <- colnames(e_matrix)#
for (i in imp_genes) {#
	print(i)#
	print(e_matrix[i,])#
	imp_genes_exprs[i,] <-  e_matrix[i,]#
}#
#
e_matrix <- exprs(eset)#
#MAplot of normalize data #
d_means <- rowMeans(e_matrix[, 4:6]) - rowMeans(e_matrix[, 1:3])#
a_means <- rowMeans(e_matrix)#
smoothScatter(a_means, d_means, xlab="Average Intensity", ylab="Ratio", main=paste(treatment,"vs",control, "(After VSN normalization)"))#
points(a_means[rownames(imp_genes_exprs)], d_means[rownames(imp_genes_exprs)], pch=8,col="red")#
points(a_means[as.character(sam_results[["Name"]])], d_means[as.character(sam_results[["Name"]])], pch=20,col="green")#
#
save(e_matrix, eset, file=paste(out_path, out_name,".RData", sep=""))#
#
dev.off()
plot(sam.out,6)
plot(sam.out,2)
plot(sam.out,10)
rm(list=ls(all=TRUE))#
#Libraries#
library(oligo)#
library("pd.110413.mglo.cag.exp")#
#
#Functions#
#
#build data.frame with signals information to be used for ggplot graphics#
ggplot_dataframe = function(x) {#
#
	exprs_df <- data.frame(signal= numeric(), Dataset=factor(),  Treatment= factor())#
	if (class(x) == "ExpressionFeatureSet") {#
		for (i in 1:length(pm(x)[1,])) {#
			Dataset <- colnames(pm(x))[i]#
			signals <- pm(x)[,i]#
			Treatment <- as.character(x[["Sample_Name"]][i])#
			exprs_df <- rbind(#
							exprs_df,#
							data.frame(#
								signal=signals,#
								Dataset=rep(Dataset,length(signals)),#
								Treatment=rep(Treatment,length(signals)))#
							)#
		}#
	}#
	else {#
		for (i in 1:length(exprs(x)[1,])) {#
			Dataset <- colnames(exprs(x))[i]#
			signals <- exprs(x)[,i]#
			Treatment <- as.character(x[["Sample_Name"]][i])#
			exprs_df <- rbind(#
							exprs_df,#
							data.frame(#
								signal=signals,#
								Dataset=rep(Dataset,length(signals)),#
								Treatment=rep(Treatment,length(signals)))#
							)#
		}#
	}#
	return(exprs_df)#
}#
#++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++#
#
out_path = "~/Documents/Yulien_data/Scripts/"#
out_base_name = "RMA_Final_Results_Differential_Expression"#
#Treatment and control to analyse #
treatment <- "M.furfur"#
control <- "M.globosa"#
out_name = paste(out_base_name,treatment,"vs",control, sep="")#
#Device#
pdf(paste(out_path, out_name, ".pdf", sep=""))#
#
#++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++#
#
#Input Data#
#xys_files#
xys_files_path <- "~/Documents/Yulien_data/Raw_Data_Files/Pair_Files"#
xys.files <- list.xysfiles( xys_files_path, full.names=TRUE ) #list xys_files#
#phenoData#
pheno_file <- "~/Documents/Yulien_data/Design_information/chip_data.tab"#
theData = read.table(pheno_file, row.names=1, header=TRUE,sep="\t")#
theData = subset(theData, select= c("Sample_Name"))#
#
lvls <- c( "channel1", "channel2", "_ALL_" )#
metadata <- data.frame( channel=factor("_ALL_", levels=lvls), labelDescription="Channels" )#
#
#AnnotatedDataFrame building#
pheno_data <- new("AnnotatedDataFrame", data=theData, varMetadata=metadata)#
#ExpressionFeatureSet building using xys_files#
raw_exprs_set <- read.xysfiles( xys.files,#
								pkgname="pd.110413.mglo.cag.exp",#
								phenoData=pheno_data,#
								sampleNames=c("M.furfur-1",#
											"M.globosa-1",#
											"M.globosa-2",#
											"M.globosa-3",#
											"M.furfur-2",#
											"4DS-1",#
											"4DST80-1",#
											"M.furfur-3",#
											"4DST80-2",#
											"4DS-2",#
											"4DST80-3",#
											"4DS-3")#
								)#
#Idexes of the datasets related to the treatment and control specified#
index_1 <- which(raw_exprs_set[["Sample_Name"]] == treatment)#
index_2 <- which(raw_exprs_set[["Sample_Name"]] == control)#
all_indexes <- c(index_1,index_2)#
#Create a ExpressioFeatureSet subset with the datasets related to the specified treatment and control#
exprs_set_subset <- raw_exprs_set[,all_indexes]#
#Oligo default distribution graphics for raw data#
#boxplot(exprs_set_subset, main=paste("Raw Data", treatment,"vs",control))#
#hist(exprs_set_subset, main=paste("Raw Data", treatment, "vs", control))#
#
#ggplot distribution graphics for raw data#
exprs_df <- ggplot_dataframe(exprs_set_subset)#
library(ggplot2)#
p <- ggplot(exprs_df,aes(y=log2(signal),x=Dataset))#
p + geom_boxplot(aes(fill=Treatment)) #+ geom_jitter(alpha = I(1/300))#
#
p <- ggplot(exprs_df, aes(x=log2(signal)))#
p + geom_density(aes(fill=Dataset), alpha= 0.3)#
#
#ExpressionFeatureSet to matrix#
#
eset <- rma(exprs_set_subset, normalize=FALSE, background=FALSE)#
e_matrix <- 2^exprs(eset)#
#
#Basic MAplot applying log2 to raw data#
d_means <- log2(rowMeans(e_matrix[, 4:6])) - log2(rowMeans(e_matrix[, 1:3]))#
a_means <- (log2(rowMeans(e_matrix[,4:6])) + log2(rowMeans(e_matrix[,1:3]))) / 2#
smoothScatter(a_means, d_means, xlab="Average Intensity", ylab="Log2-ratio", main=paste(treatment,"vs",control, "(Applying log2 to raw data)"))#
#
#Signal Data Processing #
#
raw <- exprs_set_subset#
#
#summarization of normalize data using rma oligo method = median.polish#
eset <- rma(raw, normalize=TRUE, background=TRUE)#
#
#ggplot distribution graphics for normalized data#
exprs_df <- ggplot_dataframe(eset)#
#
p <- ggplot(exprs_df, aes(y=signal, x=Dataset))#
p + geom_boxplot(aes(fill=Treatment)) #+ geom_jitter(alpha = I(1/300))#
#
p <- ggplot(exprs_df, aes(x=signal))#
p + geom_density(aes(fill=Dataset), alpha= 0.3)#
#
#oligo defaults graphics#
#boxplot(eset, main=paste("Raw Data", treatment,"vs",control), transfo=identity)#
#hist(eset, main=paste("Raw Data", treatment,"vs",control), transfo=identity)#
#
#ExpressionSet to matrix#
e_matrix <- exprs(eset)#
#
#MAplot of normalize data #
d_means <- rowMeans(e_matrix[, 4:6]) - rowMeans(e_matrix[, 1:3])#
a_means <- rowMeans(e_matrix)#
smoothScatter(a_means, d_means, xlab="Average Intensity", ylab="Ratio", main=paste(treatment,"vs",control, "(RMA)"))#
#
#SAM analysis#
library(siggenes)#
exprs.cl <- c(rep(0,3),rep(1,3))#
#
sam.out <- sam(eset, exprs.cl, method= d.stat,  rand= 123)#
summary(sam.out)#
plot(sam.out)#
thres <- 11#
plot(sam.out, thres)#
sum.sam.out <- summary(sam.out, thres)#
sam_csv_file <- paste(out_path, out_name,".csv",sep="")#
sam2excel(sam.out,thres,sam_csv_file)#
sam_results <- read.csv(sam_csv_file, skip=19, header=TRUE)#
num_sig_genes  <- dim(sam_results)[1]#
#
#eBayes analysis#
library(limma)#
#
eset_matrix <- exprs(eset)#
#
d_means <- rowMeans(eset_matrix[, 4:6])-rowMeans(eset_matrix[, 1:3])#
#
design <- model.matrix(~factor(eset[["Sample_Name"]]))#
fit <- lmFit(eset, design)#
ebayes <- eBayes(fit)#
lod <- -log10(ebayes[["p.value"]][,2])#
mtstat <- ebayes[["t"]][,2]#
#
o1 <- order(abs(d_means), decreasing=TRUE)[1:num_sig_genes]#
o2 <- order(abs(mtstat), decreasing=TRUE)[1:num_sig_genes]#
o <- union(o1, o2)#
#
smoothScatter(d_means, lod, main="Moderated t", xlab="Ratio", ylab="LOD")#
points(d_means[o1], lod[o1], pch=18,col="blue")#
points(d_means[o2], lod[o2], pch=8,col="red")#
#abline(h=2, v=c(-1, 1))#
#
tab <- topTable(ebayes, coef=2, adjust="fdr", n=num_sig_genes)#
ebayes_csv_file <- paste(out_path, out_name,"ebayes.csv",sep="")#
write.csv(tab, file=ebayes_csv_file, row.names=FALSE)#
#
imp_genes <-  head((tab$ID),num_sig_genes)#
imp_genes_exprs <- matrix(nrow=num_sig_genes,ncol=6)#
rownames(imp_genes_exprs) <- imp_genes#
colnames(imp_genes_exprs) <- colnames(e_matrix)#
for (i in imp_genes) {#
	print(i)#
	print(e_matrix[i,])#
	imp_genes_exprs[i,] <-  e_matrix[i,]#
}#
e_matrix <- exprs(eset)#
#MAplot of normalize data #
d_means <- rowMeans(e_matrix[, 4:6]) - rowMeans(e_matrix[, 1:3])#
a_means <- rowMeans(e_matrix)#
smoothScatter(a_means, d_means, xlab="Average Intensity", ylab="Ratio", main=paste(treatment,"vs",control, "(RMA)"))#
points(a_means[rownames(imp_genes_exprs)], d_means[rownames(imp_genes_exprs)], pch=8,col="red")#
points(a_means[as.character(sam_results[["Name"]])], d_means[as.character(sam_results[["Name"]])], pch=20,col="green")#
#
save(e_matrix, eset, file=paste(out_path, out_name,".RData", sep=""))#
dev.off()
rm(list=ls(all=TRUE))#
#Libraries#
library(oligo)#
library("pd.110413.mglo.cag.exp")#
#
#Functions#
#
#build data.frame with signals information to be used for ggplot graphics#
ggplot_dataframe = function(x) {#
#
	exprs_df <- data.frame(signal= numeric(), Dataset=factor(),  Treatment= factor())#
	if (class(x) == "ExpressionFeatureSet") {#
		for (i in 1:length(pm(x)[1,])) {#
			Dataset <- colnames(pm(x))[i]#
			signals <- pm(x)[,i]#
			Treatment <- as.character(x[["Sample_Name"]][i])#
			exprs_df <- rbind(#
							exprs_df,#
							data.frame(#
								signal=signals,#
								Dataset=rep(Dataset,length(signals)),#
								Treatment=rep(Treatment,length(signals)))#
							)#
		}#
	}#
	else {#
		for (i in 1:length(exprs(x)[1,])) {#
			Dataset <- colnames(exprs(x))[i]#
			signals <- exprs(x)[,i]#
			Treatment <- as.character(x[["Sample_Name"]][i])#
			exprs_df <- rbind(#
							exprs_df,#
							data.frame(#
								signal=signals,#
								Dataset=rep(Dataset,length(signals)),#
								Treatment=rep(Treatment,length(signals)))#
							)#
		}#
	}#
	return(exprs_df)#
}#
#++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++#
out_path = "~/Documents/Yulien_data/Scripts/"#
out_base_name = "VSN_Final_Results_Differential_Expression"#
#Treatment and control to analyse #
treatment <- "M.furfur"#
control <- "M.globosa"#
out_name = paste(out_base_name,treatment,"vs",control,sep="")#
#Device#
pdf(paste(out_path, out_name, ".pdf", sep=""))#
#++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++#
#
#Input Data#
#xys_files#
xys_files_path <- "~/Documents/Yulien_data/Raw_Data_Files/Pair_Files"#
xys.files <- list.xysfiles( xys_files_path, full.names=TRUE ) #list xys_files#
#phenoData#
pheno_file <- "~/Documents/Yulien_data/Design_information/chip_data.tab"#
theData = read.table(pheno_file, row.names=1, header=TRUE,sep="\t")#
theData = subset(theData, select= c("Sample_Name"))#
#
lvls <- c( "channel1", "channel2", "_ALL_" )#
metadata <- data.frame( channel=factor("_ALL_", levels=lvls), labelDescription="Channels" )#
#
#AnnotatedDataFrame building#
pheno_data <- new("AnnotatedDataFrame", data=theData, varMetadata=metadata)#
#ExpressionFeatureSet building using xys_files#
raw_exprs_set <- read.xysfiles( xys.files,#
								pkgname="pd.110413.mglo.cag.exp",#
								phenoData=pheno_data,#
								sampleNames=c("M.furfur-1",#
											"M.globosa-1",#
											"M.globosa-2",#
											"M.globosa-3",#
											"M.furfur-2",#
											"4DS-1",#
											"4DST80-1",#
											"M.furfur-3",#
											"4DST80-2",#
											"4DS-2",#
											"4DST80-3",#
											"4DS-3")#
								)#
#Idexes of the datasets related to the treatment and control specified#
index_1 <- which(raw_exprs_set[["Sample_Name"]] == treatment)#
index_2 <- which(raw_exprs_set[["Sample_Name"]] == control)#
all_indexes <- c(index_1,index_2)#
#Create a ExpressioFeatureSet subset with the datasets related to the specified treatment and control#
exprs_set_subset <- raw_exprs_set[,all_indexes]#
#Oligo default distribution graphics for raw data#
#boxplot(exprs_set_subset, main=paste("Raw Data", treatment,"vs",control))#
#hist(exprs_set_subset, main=paste("Raw Data", treatment, "vs", control))#
#
#ggplot distribution graphics for raw data#
exprs_df <- ggplot_dataframe(exprs_set_subset)#
library(ggplot2)#
p <- ggplot(exprs_df,aes(y=log2(signal),x=Dataset))#
p + geom_boxplot(aes(fill=Treatment)) #+ geom_jitter(alpha = I(1/300))#
#
p <- ggplot(exprs_df, aes(x=log2(signal)))#
p + geom_density(aes(fill=Dataset), alpha= 0.3)#
#
#ExpressionFeatureSet to matrix#
#
eset <- rma(exprs_set_subset, normalize=FALSE, background=FALSE)#
#
e_matrix <- 2^exprs(eset)#
#
#Basic MAplot applying log2 to raw data#
d_means <- log2(rowMeans(e_matrix[, 4:6])) - log2(rowMeans(e_matrix[, 1:3]))#
a_means <- (log2(rowMeans(e_matrix[,4:6])) + log2(rowMeans(e_matrix[,1:3]))) / 2#
smoothScatter(a_means, d_means, xlab="Average Intensity", ylab="Log2-ratio", main=paste(treatment,"vs",control, "(Applying log2 to raw data)"))#
#
#Signal Data Processing #
#bacgroundCorrect (oligo method)#
raw <- exprs_set_subset#
#raw <- backgroundCorrect(exprs_set_subset, "rma") # Add noise to the dataset, in this case#
raw_begin <- raw#
pms = pm(raw) #ExpressionFeatureSet to matrix, ignoring spots with NA signal#
pmsVSN = vsn::vsnMatrix(pms) #vsn "normalization" of signal data#
require("vsn")#
#meanvsSd plots #
meanSdPlot(pmsVSN, ranks=TRUE)#
meanSdPlot(pmsVSN, ranks=FALSE)#
#vsn normalized data, store in a vsn object to ExpressionFeatureSet#
pm(raw) <- exprs(pmsVSN)#
#
#ggplot distribution graphics for normalized data#
exprs_df <- ggplot_dataframe(raw)#
#
p <- ggplot(exprs_df, aes(y=signal, x=Dataset))#
p + geom_boxplot(aes(fill=Treatment)) #+ geom_jitter(alpha = I(1/300))#
#
p <- ggplot(exprs_df, aes(x=signal))#
p + geom_density(aes(fill=Dataset), alpha= 0.3)#
#
#oligo defaults graphics#
#boxplot(eset, main=paste("Raw Data", treatment,"vs",control), transfo=identity)#
#hist(eset, main=paste("Raw Data", treatment,"vs",control), transfo=identity)#
#
#summarization of normalize data using rma oligo method = median.polish#
eset <- rma(raw, normalize = FALSE, background = FALSE)#
#
#ExpressionSet to matrix#
e_matrix <- 2^exprs(eset)#
#
eset_treatments_info = as.character(theData[all_indexes,1])#
eset_theData = data.frame(Sample_Name= factor(eset_treatments_info, levels=unique(eset_treatments_info)))#
rownames(eset_theData) = rownames(theData)[all_indexes]#
pd <- new("AnnotatedDataFrame", data=eset_theData, varMetadata=metadata)#
eset <- new("ExpressionSet", exprs = e_matrix, phenoData = pd, annotation = "pd.110413.mglo.cag.exp")#
#
exprs_df <- ggplot_dataframe(eset)#
#
p <- ggplot(exprs_df, aes(y=signal, x=Dataset))#
p + geom_boxplot(aes(fill=Treatment)) #+ geom_jitter(alpha = I(1/300))#
#
p <- ggplot(exprs_df, aes(x=signal))#
p + geom_density(aes(fill=Dataset), alpha= 0.3)#
#
#MAplot of normalize data #
d_means <- rowMeans(e_matrix[, 4:6]) - rowMeans(e_matrix[, 1:3])#
a_means <- rowMeans(e_matrix)#
smoothScatter(a_means, d_means, xlab="Average Intensity", ylab="Ratio", main=paste(treatment,"vs",control, "(After VSN normalization)"))#
#
#SAM analysis#
library(siggenes)#
exprs.cl <- c(rep(0,3),rep(1,3))#
#
sam.out <- sam(eset, exprs.cl, method= d.stat,  rand= 123)#
summary(sam.out)#
plot(sam.out)#
thres <- 11#
plot(sam.out, thres)#
sum.sam.out <- summary(sam.out, thres)#
sam_csv_file <- paste(out_path, out_name,"sam.csv",sep="")#
sam2excel(sam.out,thres,sam_csv_file)#
sam_results <- read.csv(sam_csv_file, skip=19, header=TRUE)#
num_sig_genes  <- dim(sam_results)[1]#
#
#eBayes analysis#
library(limma)#
#
d_means <- rowMeans(eset_matrix[, 4:6])-rowMeans(eset_matrix[, 1:3])#
#
design <- model.matrix(~factor(eset[["Sample_Name"]]))#
fit <- lmFit(eset, design)#
ebayes <- eBayes(fit)#
lod <- -log10(ebayes[["p.value"]][,2])#
mtstat <- ebayes[["t"]][,2]#
#
o1 <- order(abs(d_means), decreasing=TRUE)[1:num_sig_genes]#
o2 <- order(abs(mtstat), decreasing=TRUE)[1:num_sig_genes]#
o <- union(o1, o2)#
#
smoothScatter(d_means, lod, main="Moderated t", xlab="Ratio", ylab="LOD")#
points(d_means[o1], lod[o1], pch=18,col="blue")#
points(d_means[o2], lod[o2], pch=8,col="red")#
#abline(h=2, v=c(-1, 1))#
#
tab <- topTable(ebayes, coef=2, adjust="fdr", n=num_sig_genes)#
ebayes_csv_file <- paste(out_path, out_name,"ebayes.csv",sep="")#
write.csv(tab, file=ebayes_csv_file, row.names=FALSE)#
#
imp_genes <-  head((tab$ID),num_sig_genes)#
imp_genes_exprs <- matrix(nrow=num_sig_genes,ncol=6)#
rownames(imp_genes_exprs) <- imp_genes#
colnames(imp_genes_exprs) <- colnames(e_matrix)#
for (i in imp_genes) {#
	print(i)#
	print(e_matrix[i,])#
	imp_genes_exprs[i,] <-  e_matrix[i,]#
}#
#
e_matrix <- exprs(eset)#
#MAplot of normalize data #
d_means <- rowMeans(e_matrix[, 4:6]) - rowMeans(e_matrix[, 1:3])#
a_means <- rowMeans(e_matrix)#
smoothScatter(a_means, d_means, xlab="Average Intensity", ylab="Ratio", main=paste(treatment,"vs",control, "(After VSN normalization)"))#
points(a_means[rownames(imp_genes_exprs)], d_means[rownames(imp_genes_exprs)], pch=8,col="red")#
points(a_means[as.character(sam_results[["Name"]])], d_means[as.character(sam_results[["Name"]])], pch=20,col="green")#
#
save(e_matrix, eset, file=paste(out_path, out_name,".RData", sep=""))#
#
dev.off()
2.1^
2.1^2
10/3
tab
rm(list=ls(all=TRUE))#
#Libraries#
library(oligo)#
library("pd.110413.mglo.cag.exp")#
#
#Functions#
#
#build data.frame with signals information to be used for ggplot graphics#
ggplot_dataframe = function(x) {#
#
	exprs_df <- data.frame(signal= numeric(), Dataset=factor(),  Treatment= factor())#
	if (class(x) == "ExpressionFeatureSet") {#
		for (i in 1:length(pm(x)[1,])) {#
			Dataset <- colnames(pm(x))[i]#
			signals <- pm(x)[,i]#
			Treatment <- as.character(x[["Sample_Name"]][i])#
			exprs_df <- rbind(#
							exprs_df,#
							data.frame(#
								signal=signals,#
								Dataset=rep(Dataset,length(signals)),#
								Treatment=rep(Treatment,length(signals)))#
							)#
		}#
	}#
	else {#
		for (i in 1:length(exprs(x)[1,])) {#
			Dataset <- colnames(exprs(x))[i]#
			signals <- exprs(x)[,i]#
			Treatment <- as.character(x[["Sample_Name"]][i])#
			exprs_df <- rbind(#
							exprs_df,#
							data.frame(#
								signal=signals,#
								Dataset=rep(Dataset,length(signals)),#
								Treatment=rep(Treatment,length(signals)))#
							)#
		}#
	}#
	return(exprs_df)#
}#
#++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++#
out_path = "~/Documents/Yulien_data/Scripts/"#
out_base_name = "VSN_Final_Results_Differential_Expression"#
#Treatment and control to analyse #
treatment <- "M.furfur"#
control <- "M.globosa"#
out_name = paste(out_base_name,treatment,"vs",control,sep="")#
#Device#
pdf(paste(out_path, out_name, ".pdf", sep=""))#
#++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++#
#
#Input Data#
#xys_files#
xys_files_path <- "~/Documents/Yulien_data/Raw_Data_Files/Pair_Files"#
xys.files <- list.xysfiles( xys_files_path, full.names=TRUE ) #list xys_files#
#phenoData#
pheno_file <- "~/Documents/Yulien_data/Design_information/chip_data.tab"#
theData = read.table(pheno_file, row.names=1, header=TRUE,sep="\t")#
theData = subset(theData, select= c("Sample_Name"))#
#
lvls <- c( "channel1", "channel2", "_ALL_" )#
metadata <- data.frame( channel=factor("_ALL_", levels=lvls), labelDescription="Channels" )#
#
#AnnotatedDataFrame building#
pheno_data <- new("AnnotatedDataFrame", data=theData, varMetadata=metadata)#
#ExpressionFeatureSet building using xys_files#
raw_exprs_set <- read.xysfiles( xys.files,#
								pkgname="pd.110413.mglo.cag.exp",#
								phenoData=pheno_data,#
								sampleNames=c("M.furfur-1",#
											"M.globosa-1",#
											"M.globosa-2",#
											"M.globosa-3",#
											"M.furfur-2",#
											"4DS-1",#
											"4DST80-1",#
											"M.furfur-3",#
											"4DST80-2",#
											"4DS-2",#
											"4DST80-3",#
											"4DS-3")#
								)#
#Idexes of the datasets related to the treatment and control specified#
index_1 <- which(raw_exprs_set[["Sample_Name"]] == treatment)#
index_2 <- which(raw_exprs_set[["Sample_Name"]] == control)#
all_indexes <- c(index_1,index_2)#
#Create a ExpressioFeatureSet subset with the datasets related to the specified treatment and control#
exprs_set_subset <- raw_exprs_set[,all_indexes]#
#Oligo default distribution graphics for raw data#
#boxplot(exprs_set_subset, main=paste("Raw Data", treatment,"vs",control))#
#hist(exprs_set_subset, main=paste("Raw Data", treatment, "vs", control))#
#
#ggplot distribution graphics for raw data#
exprs_df <- ggplot_dataframe(exprs_set_subset)#
library(ggplot2)#
p <- ggplot(exprs_df,aes(y=log2(signal),x=Dataset))#
p + geom_boxplot(aes(fill=Treatment)) #+ geom_jitter(alpha = I(1/300))#
#
p <- ggplot(exprs_df, aes(x=log2(signal)))#
p + geom_density(aes(fill=Dataset), alpha= 0.3)#
#
#ExpressionFeatureSet to matrix#
#
eset <- rma(exprs_set_subset, normalize=FALSE, background=FALSE)#
#
e_matrix <- 2^exprs(eset)#
#
#Basic MAplot applying log2 to raw data#
d_means <- log2(rowMeans(e_matrix[, 4:6])) - log2(rowMeans(e_matrix[, 1:3]))#
a_means <- (log2(rowMeans(e_matrix[,4:6])) + log2(rowMeans(e_matrix[,1:3]))) / 2#
smoothScatter(a_means, d_means, xlab="Average Intensity", ylab="Log2-ratio", main=paste(treatment,"vs",control, "(Applying log2 to raw data)"))#
#
#Signal Data Processing #
#bacgroundCorrect (oligo method)#
raw <- exprs_set_subset#
#raw <- backgroundCorrect(exprs_set_subset, "rma") # Add noise to the dataset, in this case#
raw_begin <- raw#
pms = pm(raw) #ExpressionFeatureSet to matrix, ignoring spots with NA signal#
pmsVSN = vsn::vsnMatrix(pms) #vsn "normalization" of signal data#
require("vsn")#
#meanvsSd plots #
meanSdPlot(pmsVSN, ranks=TRUE)#
meanSdPlot(pmsVSN, ranks=FALSE)#
#vsn normalized data, store in a vsn object to ExpressionFeatureSet#
pm(raw) <- exprs(pmsVSN)#
#
#ggplot distribution graphics for normalized data#
exprs_df <- ggplot_dataframe(raw)#
#
p <- ggplot(exprs_df, aes(y=signal, x=Dataset))#
p + geom_boxplot(aes(fill=Treatment)) #+ geom_jitter(alpha = I(1/300))#
#
p <- ggplot(exprs_df, aes(x=signal))#
p + geom_density(aes(fill=Dataset), alpha= 0.3)#
#
#oligo defaults graphics#
#boxplot(eset, main=paste("Raw Data", treatment,"vs",control), transfo=identity)#
#hist(eset, main=paste("Raw Data", treatment,"vs",control), transfo=identity)#
#
#summarization of normalize data using rma oligo method = median.polish#
eset <- rma(raw, normalize = FALSE, background = FALSE)#
#
#ExpressionSet to matrix#
e_matrix <- 2^exprs(eset)#
#
eset_treatments_info = as.character(theData[all_indexes,1])#
eset_theData = data.frame(Sample_Name= factor(eset_treatments_info, levels=unique(eset_treatments_info)))#
rownames(eset_theData) = rownames(theData)[all_indexes]#
pd <- new("AnnotatedDataFrame", data=eset_theData, varMetadata=metadata)#
eset <- new("ExpressionSet", exprs = e_matrix, phenoData = pd, annotation = "pd.110413.mglo.cag.exp")#
#
exprs_df <- ggplot_dataframe(eset)#
#
p <- ggplot(exprs_df, aes(y=signal, x=Dataset))#
p + geom_boxplot(aes(fill=Treatment)) #+ geom_jitter(alpha = I(1/300))#
#
p <- ggplot(exprs_df, aes(x=signal))#
p + geom_density(aes(fill=Dataset), alpha= 0.3)#
#
#MAplot of normalize data #
d_means <- rowMeans(e_matrix[, 4:6]) - rowMeans(e_matrix[, 1:3])#
a_means <- rowMeans(e_matrix)#
smoothScatter(a_means, d_means, xlab="Average Intensity", ylab="Ratio", main=paste(treatment,"vs",control, "(After VSN normalization)"))#
#
#SAM analysis#
library(siggenes)#
exprs.cl <- c(rep(0,3),rep(1,3))#
#
sam.out <- sam(eset, exprs.cl, method= d.stat,  rand= 123)#
summary(sam.out)#
plot(sam.out)#
thres <- 6#
plot(sam.out, thres)#
sum.sam.out <- summary(sam.out, thres)#
sam_csv_file <- paste(out_path, out_name,"sam.csv",sep="")#
sam2excel(sam.out,thres,sam_csv_file)#
sam_results <- read.csv(sam_csv_file, skip=19, header=TRUE)#
num_sig_genes  <- dim(sam_results)[1]#
#
#eBayes analysis#
library(limma)#
#
d_means <- rowMeans(eset_matrix[, 4:6])-rowMeans(eset_matrix[, 1:3])#
#
design <- model.matrix(~factor(eset[["Sample_Name"]]))#
fit <- lmFit(eset, design)#
ebayes <- eBayes(fit)#
lod <- -log10(ebayes[["p.value"]][,2])#
mtstat <- ebayes[["t"]][,2]#
#
o1 <- order(abs(d_means), decreasing=TRUE)[1:num_sig_genes]#
o2 <- order(abs(mtstat), decreasing=TRUE)[1:num_sig_genes]#
o <- union(o1, o2)#
#
smoothScatter(d_means, lod, main="Moderated t", xlab="Ratio", ylab="LOD")#
points(d_means[o1], lod[o1], pch=18,col="blue")#
points(d_means[o2], lod[o2], pch=8,col="red")#
#abline(h=2, v=c(-1, 1))#
#
tab <- topTable(ebayes, coef=2, adjust="fdr", n=num_sig_genes)#
ebayes_csv_file <- paste(out_path, out_name,"ebayes.csv",sep="")#
write.csv(tab, file=ebayes_csv_file, row.names=FALSE)#
#
imp_genes <-  head((tab$ID),num_sig_genes)#
imp_genes_exprs <- matrix(nrow=num_sig_genes,ncol=6)#
rownames(imp_genes_exprs) <- imp_genes#
colnames(imp_genes_exprs) <- colnames(e_matrix)#
for (i in imp_genes) {#
	print(i)#
	print(e_matrix[i,])#
	imp_genes_exprs[i,] <-  e_matrix[i,]#
}#
#
e_matrix <- exprs(eset)#
#MAplot of normalize data #
d_means <- rowMeans(e_matrix[, 4:6]) - rowMeans(e_matrix[, 1:3])#
a_means <- rowMeans(e_matrix)#
smoothScatter(a_means, d_means, xlab="Average Intensity", ylab="Ratio", main=paste(treatment,"vs",control, "(After VSN normalization)"))#
points(a_means[rownames(imp_genes_exprs)], d_means[rownames(imp_genes_exprs)], pch=8,col="red")#
points(a_means[as.character(sam_results[["Name"]])], d_means[as.character(sam_results[["Name"]])], pch=20,col="green")#
#
save(e_matrix, eset, file=paste(out_path, out_name,".RData", sep=""))#
#
dev.off()
rm(list=ls(all=TRUE))#
#Libraries#
library(oligo)#
library("pd.110413.mglo.cag.exp")#
#
#Functions#
#
#build data.frame with signals information to be used for ggplot graphics#
ggplot_dataframe = function(x) {#
#
	exprs_df <- data.frame(signal= numeric(), Dataset=factor(),  Treatment= factor())#
	if (class(x) == "ExpressionFeatureSet") {#
		for (i in 1:length(pm(x)[1,])) {#
			Dataset <- colnames(pm(x))[i]#
			signals <- pm(x)[,i]#
			Treatment <- as.character(x[["Sample_Name"]][i])#
			exprs_df <- rbind(#
							exprs_df,#
							data.frame(#
								signal=signals,#
								Dataset=rep(Dataset,length(signals)),#
								Treatment=rep(Treatment,length(signals)))#
							)#
		}#
	}#
	else {#
		for (i in 1:length(exprs(x)[1,])) {#
			Dataset <- colnames(exprs(x))[i]#
			signals <- exprs(x)[,i]#
			Treatment <- as.character(x[["Sample_Name"]][i])#
			exprs_df <- rbind(#
							exprs_df,#
							data.frame(#
								signal=signals,#
								Dataset=rep(Dataset,length(signals)),#
								Treatment=rep(Treatment,length(signals)))#
							)#
		}#
	}#
	return(exprs_df)#
}#
#++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++#
out_path = "~/Documents/Yulien_data/Scripts/"#
out_base_name = "VSN_Final_Results_Differential_Expression"#
#Treatment and control to analyse #
treatment <- "4DS"#
control <- "M.furfur"#
out_name = paste(out_base_name,treatment,"vs",control,sep="")#
#Device#
pdf(paste(out_path, out_name, ".pdf", sep=""))#
#++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++#
#
#Input Data#
#xys_files#
xys_files_path <- "~/Documents/Yulien_data/Raw_Data_Files/Pair_Files"#
xys.files <- list.xysfiles( xys_files_path, full.names=TRUE ) #list xys_files#
#phenoData#
pheno_file <- "~/Documents/Yulien_data/Design_information/chip_data.tab"#
theData = read.table(pheno_file, row.names=1, header=TRUE,sep="\t")#
theData = subset(theData, select= c("Sample_Name"))#
#
lvls <- c( "channel1", "channel2", "_ALL_" )#
metadata <- data.frame( channel=factor("_ALL_", levels=lvls), labelDescription="Channels" )#
#
#AnnotatedDataFrame building#
pheno_data <- new("AnnotatedDataFrame", data=theData, varMetadata=metadata)#
#ExpressionFeatureSet building using xys_files#
raw_exprs_set <- read.xysfiles( xys.files,#
								pkgname="pd.110413.mglo.cag.exp",#
								phenoData=pheno_data,#
								sampleNames=c("M.furfur-1",#
											"M.globosa-1",#
											"M.globosa-2",#
											"M.globosa-3",#
											"M.furfur-2",#
											"4DS-1",#
											"4DST80-1",#
											"M.furfur-3",#
											"4DST80-2",#
											"4DS-2",#
											"4DST80-3",#
											"4DS-3")#
								)#
#Idexes of the datasets related to the treatment and control specified#
index_1 <- which(raw_exprs_set[["Sample_Name"]] == treatment)#
index_2 <- which(raw_exprs_set[["Sample_Name"]] == control)#
all_indexes <- c(index_1,index_2)#
#Create a ExpressioFeatureSet subset with the datasets related to the specified treatment and control#
exprs_set_subset <- raw_exprs_set[,all_indexes]#
#Oligo default distribution graphics for raw data#
#boxplot(exprs_set_subset, main=paste("Raw Data", treatment,"vs",control))#
#hist(exprs_set_subset, main=paste("Raw Data", treatment, "vs", control))#
#
#ggplot distribution graphics for raw data#
exprs_df <- ggplot_dataframe(exprs_set_subset)#
library(ggplot2)#
p <- ggplot(exprs_df,aes(y=log2(signal),x=Dataset))#
p + geom_boxplot(aes(fill=Treatment)) #+ geom_jitter(alpha = I(1/300))#
#
p <- ggplot(exprs_df, aes(x=log2(signal)))#
p + geom_density(aes(fill=Dataset), alpha= 0.3)#
#
#ExpressionFeatureSet to matrix#
#
eset <- rma(exprs_set_subset, normalize=FALSE, background=FALSE)#
#
e_matrix <- 2^exprs(eset)#
#
#Basic MAplot applying log2 to raw data#
d_means <- log2(rowMeans(e_matrix[, 4:6])) - log2(rowMeans(e_matrix[, 1:3]))#
a_means <- (log2(rowMeans(e_matrix[,4:6])) + log2(rowMeans(e_matrix[,1:3]))) / 2#
smoothScatter(a_means, d_means, xlab="Average Intensity", ylab="Log2-ratio", main=paste(treatment,"vs",control, "(Applying log2 to raw data)"))#
#
#Signal Data Processing #
#bacgroundCorrect (oligo method)#
raw <- exprs_set_subset#
#raw <- backgroundCorrect(exprs_set_subset, "rma") # Add noise to the dataset, in this case#
raw_begin <- raw#
pms = pm(raw) #ExpressionFeatureSet to matrix, ignoring spots with NA signal#
pmsVSN = vsn::vsnMatrix(pms) #vsn "normalization" of signal data#
require("vsn")#
#meanvsSd plots #
meanSdPlot(pmsVSN, ranks=TRUE)#
meanSdPlot(pmsVSN, ranks=FALSE)#
#vsn normalized data, store in a vsn object to ExpressionFeatureSet#
pm(raw) <- exprs(pmsVSN)#
#
#ggplot distribution graphics for normalized data#
exprs_df <- ggplot_dataframe(raw)#
#
p <- ggplot(exprs_df, aes(y=signal, x=Dataset))#
p + geom_boxplot(aes(fill=Treatment)) #+ geom_jitter(alpha = I(1/300))#
#
p <- ggplot(exprs_df, aes(x=signal))#
p + geom_density(aes(fill=Dataset), alpha= 0.3)#
#
#oligo defaults graphics#
#boxplot(eset, main=paste("Raw Data", treatment,"vs",control), transfo=identity)#
#hist(eset, main=paste("Raw Data", treatment,"vs",control), transfo=identity)#
#
#summarization of normalize data using rma oligo method = median.polish#
eset <- rma(raw, normalize = FALSE, background = FALSE)#
#
#ExpressionSet to matrix#
e_matrix <- 2^exprs(eset)#
#
eset_treatments_info = as.character(theData[all_indexes,1])#
eset_theData = data.frame(Sample_Name= factor(eset_treatments_info, levels=unique(eset_treatments_info)))#
rownames(eset_theData) = rownames(theData)[all_indexes]#
pd <- new("AnnotatedDataFrame", data=eset_theData, varMetadata=metadata)#
eset <- new("ExpressionSet", exprs = e_matrix, phenoData = pd, annotation = "pd.110413.mglo.cag.exp")#
#
exprs_df <- ggplot_dataframe(eset)#
#
p <- ggplot(exprs_df, aes(y=signal, x=Dataset))#
p + geom_boxplot(aes(fill=Treatment)) #+ geom_jitter(alpha = I(1/300))#
#
p <- ggplot(exprs_df, aes(x=signal))#
p + geom_density(aes(fill=Dataset), alpha= 0.3)#
#
#MAplot of normalize data #
d_means <- rowMeans(e_matrix[, 4:6]) - rowMeans(e_matrix[, 1:3])#
a_means <- rowMeans(e_matrix)#
smoothScatter(a_means, d_means, xlab="Average Intensity", ylab="Ratio", main=paste(treatment,"vs",control, "(After VSN normalization)"))#
#
#SAM analysis#
library(siggenes)#
exprs.cl <- c(rep(0,3),rep(1,3))#
#
sam.out <- sam(eset, exprs.cl, method= d.stat,  rand= 123)#
summary(sam.out)#
plot(sam.out)#
thres <- 2.5#
plot(sam.out, thres)#
sum.sam.out <- summary(sam.out, thres)#
sam_csv_file <- paste(out_path, out_name,"sam.csv",sep="")#
sam2excel(sam.out,thres,sam_csv_file)#
sam_results <- read.csv(sam_csv_file, skip=19, header=TRUE)#
num_sig_genes  <- dim(sam_results)[1]#
#
#eBayes analysis#
library(limma)#
#
d_means <- rowMeans(eset_matrix[, 4:6])-rowMeans(eset_matrix[, 1:3])#
#
design <- model.matrix(~factor(eset[["Sample_Name"]]))#
fit <- lmFit(eset, design)#
ebayes <- eBayes(fit)#
lod <- -log10(ebayes[["p.value"]][,2])#
mtstat <- ebayes[["t"]][,2]#
#
o1 <- order(abs(d_means), decreasing=TRUE)[1:num_sig_genes]#
o2 <- order(abs(mtstat), decreasing=TRUE)[1:num_sig_genes]#
o <- union(o1, o2)#
#
smoothScatter(d_means, lod, main="Moderated t", xlab="Ratio", ylab="LOD")#
points(d_means[o1], lod[o1], pch=18,col="blue")#
points(d_means[o2], lod[o2], pch=8,col="red")#
#abline(h=2, v=c(-1, 1))#
#
tab <- topTable(ebayes, coef=2, adjust="fdr", n=num_sig_genes)#
ebayes_csv_file <- paste(out_path, out_name,"ebayes.csv",sep="")#
write.csv(tab, file=ebayes_csv_file, row.names=FALSE)#
#
imp_genes <-  head((tab$ID),num_sig_genes)#
imp_genes_exprs <- matrix(nrow=num_sig_genes,ncol=6)#
rownames(imp_genes_exprs) <- imp_genes#
colnames(imp_genes_exprs) <- colnames(e_matrix)#
for (i in imp_genes) {#
	print(i)#
	print(e_matrix[i,])#
	imp_genes_exprs[i,] <-  e_matrix[i,]#
}#
#
e_matrix <- exprs(eset)#
#MAplot of normalize data #
d_means <- rowMeans(e_matrix[, 4:6]) - rowMeans(e_matrix[, 1:3])#
a_means <- rowMeans(e_matrix)#
smoothScatter(a_means, d_means, xlab="Average Intensity", ylab="Ratio", main=paste(treatment,"vs",control, "(After VSN normalization)"))#
points(a_means[rownames(imp_genes_exprs)], d_means[rownames(imp_genes_exprs)], pch=8,col="red")#
points(a_means[as.character(sam_results[["Name"]])], d_means[as.character(sam_results[["Name"]])], pch=20,col="green")#
#
save(e_matrix, eset, file=paste(out_path, out_name,".RData", sep=""))#
#
dev.off()
rm(list=ls(all=TRUE))#
#Libraries#
library(oligo)#
library("pd.110413.mglo.cag.exp")#
#
#Functions#
#
#build data.frame with signals information to be used for ggplot graphics#
ggplot_dataframe = function(x) {#
#
	exprs_df <- data.frame(signal= numeric(), Dataset=factor(),  Treatment= factor())#
	if (class(x) == "ExpressionFeatureSet") {#
		for (i in 1:length(pm(x)[1,])) {#
			Dataset <- colnames(pm(x))[i]#
			signals <- pm(x)[,i]#
			Treatment <- as.character(x[["Sample_Name"]][i])#
			exprs_df <- rbind(#
							exprs_df,#
							data.frame(#
								signal=signals,#
								Dataset=rep(Dataset,length(signals)),#
								Treatment=rep(Treatment,length(signals)))#
							)#
		}#
	}#
	else {#
		for (i in 1:length(exprs(x)[1,])) {#
			Dataset <- colnames(exprs(x))[i]#
			signals <- exprs(x)[,i]#
			Treatment <- as.character(x[["Sample_Name"]][i])#
			exprs_df <- rbind(#
							exprs_df,#
							data.frame(#
								signal=signals,#
								Dataset=rep(Dataset,length(signals)),#
								Treatment=rep(Treatment,length(signals)))#
							)#
		}#
	}#
	return(exprs_df)#
}#
#++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++#
out_path = "~/Documents/Yulien_data/Scripts/"#
out_base_name = "VSN_Final_Results_Differential_Expression"#
#Treatment and control to analyse #
treatment <- "4DST80"#
control <- "4DS"#
out_name = paste(out_base_name,treatment,"vs",control,sep="")#
#Device#
pdf(paste(out_path, out_name, ".pdf", sep=""))#
#++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++#
#
#Input Data#
#xys_files#
xys_files_path <- "~/Documents/Yulien_data/Raw_Data_Files/Pair_Files"#
xys.files <- list.xysfiles( xys_files_path, full.names=TRUE ) #list xys_files#
#phenoData#
pheno_file <- "~/Documents/Yulien_data/Design_information/chip_data.tab"#
theData = read.table(pheno_file, row.names=1, header=TRUE,sep="\t")#
theData = subset(theData, select= c("Sample_Name"))#
#
lvls <- c( "channel1", "channel2", "_ALL_" )#
metadata <- data.frame( channel=factor("_ALL_", levels=lvls), labelDescription="Channels" )#
#
#AnnotatedDataFrame building#
pheno_data <- new("AnnotatedDataFrame", data=theData, varMetadata=metadata)#
#ExpressionFeatureSet building using xys_files#
raw_exprs_set <- read.xysfiles( xys.files,#
								pkgname="pd.110413.mglo.cag.exp",#
								phenoData=pheno_data,#
								sampleNames=c("M.furfur-1",#
											"M.globosa-1",#
											"M.globosa-2",#
											"M.globosa-3",#
											"M.furfur-2",#
											"4DS-1",#
											"4DST80-1",#
											"M.furfur-3",#
											"4DST80-2",#
											"4DS-2",#
											"4DST80-3",#
											"4DS-3")#
								)#
#Idexes of the datasets related to the treatment and control specified#
index_1 <- which(raw_exprs_set[["Sample_Name"]] == treatment)#
index_2 <- which(raw_exprs_set[["Sample_Name"]] == control)#
all_indexes <- c(index_1,index_2)#
#Create a ExpressioFeatureSet subset with the datasets related to the specified treatment and control#
exprs_set_subset <- raw_exprs_set[,all_indexes]#
#Oligo default distribution graphics for raw data#
#boxplot(exprs_set_subset, main=paste("Raw Data", treatment,"vs",control))#
#hist(exprs_set_subset, main=paste("Raw Data", treatment, "vs", control))#
#
#ggplot distribution graphics for raw data#
exprs_df <- ggplot_dataframe(exprs_set_subset)#
library(ggplot2)#
p <- ggplot(exprs_df,aes(y=log2(signal),x=Dataset))#
p + geom_boxplot(aes(fill=Treatment)) #+ geom_jitter(alpha = I(1/300))#
#
p <- ggplot(exprs_df, aes(x=log2(signal)))#
p + geom_density(aes(fill=Dataset), alpha= 0.3)#
#
#ExpressionFeatureSet to matrix#
#
eset <- rma(exprs_set_subset, normalize=FALSE, background=FALSE)#
#
e_matrix <- 2^exprs(eset)#
#
#Basic MAplot applying log2 to raw data#
d_means <- log2(rowMeans(e_matrix[, 4:6])) - log2(rowMeans(e_matrix[, 1:3]))#
a_means <- (log2(rowMeans(e_matrix[,4:6])) + log2(rowMeans(e_matrix[,1:3]))) / 2#
smoothScatter(a_means, d_means, xlab="Average Intensity", ylab="Log2-ratio", main=paste(treatment,"vs",control, "(Applying log2 to raw data)"))#
#
#Signal Data Processing #
#bacgroundCorrect (oligo method)#
raw <- exprs_set_subset#
#raw <- backgroundCorrect(exprs_set_subset, "rma") # Add noise to the dataset, in this case#
raw_begin <- raw#
pms = pm(raw) #ExpressionFeatureSet to matrix, ignoring spots with NA signal#
pmsVSN = vsn::vsnMatrix(pms) #vsn "normalization" of signal data#
require("vsn")#
#meanvsSd plots #
meanSdPlot(pmsVSN, ranks=TRUE)#
meanSdPlot(pmsVSN, ranks=FALSE)#
#vsn normalized data, store in a vsn object to ExpressionFeatureSet#
pm(raw) <- exprs(pmsVSN)#
#
#ggplot distribution graphics for normalized data#
exprs_df <- ggplot_dataframe(raw)#
#
p <- ggplot(exprs_df, aes(y=signal, x=Dataset))#
p + geom_boxplot(aes(fill=Treatment)) #+ geom_jitter(alpha = I(1/300))#
#
p <- ggplot(exprs_df, aes(x=signal))#
p + geom_density(aes(fill=Dataset), alpha= 0.3)#
#
#oligo defaults graphics#
#boxplot(eset, main=paste("Raw Data", treatment,"vs",control), transfo=identity)#
#hist(eset, main=paste("Raw Data", treatment,"vs",control), transfo=identity)#
#
#summarization of normalize data using rma oligo method = median.polish#
eset <- rma(raw, normalize = FALSE, background = FALSE)#
#
#ExpressionSet to matrix#
e_matrix <- 2^exprs(eset)#
#
eset_treatments_info = as.character(theData[all_indexes,1])#
eset_theData = data.frame(Sample_Name= factor(eset_treatments_info, levels=unique(eset_treatments_info)))#
rownames(eset_theData) = rownames(theData)[all_indexes]#
pd <- new("AnnotatedDataFrame", data=eset_theData, varMetadata=metadata)#
eset <- new("ExpressionSet", exprs = e_matrix, phenoData = pd, annotation = "pd.110413.mglo.cag.exp")#
#
exprs_df <- ggplot_dataframe(eset)#
#
p <- ggplot(exprs_df, aes(y=signal, x=Dataset))#
p + geom_boxplot(aes(fill=Treatment)) #+ geom_jitter(alpha = I(1/300))#
#
p <- ggplot(exprs_df, aes(x=signal))#
p + geom_density(aes(fill=Dataset), alpha= 0.3)#
#
#MAplot of normalize data #
d_means <- rowMeans(e_matrix[, 4:6]) - rowMeans(e_matrix[, 1:3])#
a_means <- rowMeans(e_matrix)#
smoothScatter(a_means, d_means, xlab="Average Intensity", ylab="Ratio", main=paste(treatment,"vs",control, "(After VSN normalization)"))#
#
#SAM analysis#
library(siggenes)#
exprs.cl <- c(rep(0,3),rep(1,3))#
#
sam.out <- sam(eset, exprs.cl, method= d.stat,  rand= 123)#
summary(sam.out)#
plot(sam.out)#
thres <- 2#
plot(sam.out, thres)#
sum.sam.out <- summary(sam.out, thres)#
sam_csv_file <- paste(out_path, out_name,"sam.csv",sep="")#
sam2excel(sam.out,thres,sam_csv_file)#
sam_results <- read.csv(sam_csv_file, skip=19, header=TRUE)#
num_sig_genes  <- dim(sam_results)[1]#
#
#eBayes analysis#
library(limma)#
#
d_means <- rowMeans(eset_matrix[, 4:6])-rowMeans(eset_matrix[, 1:3])#
#
design <- model.matrix(~factor(eset[["Sample_Name"]]))#
fit <- lmFit(eset, design)#
ebayes <- eBayes(fit)#
lod <- -log10(ebayes[["p.value"]][,2])#
mtstat <- ebayes[["t"]][,2]#
#
o1 <- order(abs(d_means), decreasing=TRUE)[1:num_sig_genes]#
o2 <- order(abs(mtstat), decreasing=TRUE)[1:num_sig_genes]#
o <- union(o1, o2)#
#
smoothScatter(d_means, lod, main="Moderated t", xlab="Ratio", ylab="LOD")#
points(d_means[o1], lod[o1], pch=18,col="blue")#
points(d_means[o2], lod[o2], pch=8,col="red")#
#abline(h=2, v=c(-1, 1))#
#
tab <- topTable(ebayes, coef=2, adjust="fdr", n=num_sig_genes)#
ebayes_csv_file <- paste(out_path, out_name,"ebayes.csv",sep="")#
write.csv(tab, file=ebayes_csv_file, row.names=FALSE)#
#
imp_genes <-  head((tab$ID),num_sig_genes)#
imp_genes_exprs <- matrix(nrow=num_sig_genes,ncol=6)#
rownames(imp_genes_exprs) <- imp_genes#
colnames(imp_genes_exprs) <- colnames(e_matrix)#
for (i in imp_genes) {#
	print(i)#
	print(e_matrix[i,])#
	imp_genes_exprs[i,] <-  e_matrix[i,]#
}#
#
e_matrix <- exprs(eset)#
#MAplot of normalize data #
d_means <- rowMeans(e_matrix[, 4:6]) - rowMeans(e_matrix[, 1:3])#
a_means <- rowMeans(e_matrix)#
smoothScatter(a_means, d_means, xlab="Average Intensity", ylab="Ratio", main=paste(treatment,"vs",control, "(After VSN normalization)"))#
points(a_means[rownames(imp_genes_exprs)], d_means[rownames(imp_genes_exprs)], pch=8,col="red")#
points(a_means[as.character(sam_results[["Name"]])], d_means[as.character(sam_results[["Name"]])], pch=20,col="green")#
#
save(e_matrix, eset, file=paste(out_path, out_name,".RData", sep=""))#
#
dev.off()
rm(list=ls(all=TRUE))#
#Libraries#
library(oligo)#
library("pd.110413.mglo.cag.exp")#
#
#Functions#
#
#build data.frame with signals information to be used for ggplot graphics#
ggplot_dataframe = function(x) {#
#
	exprs_df <- data.frame(signal= numeric(), Dataset=factor(),  Treatment= factor())#
	if (class(x) == "ExpressionFeatureSet") {#
		for (i in 1:length(pm(x)[1,])) {#
			Dataset <- colnames(pm(x))[i]#
			signals <- pm(x)[,i]#
			Treatment <- as.character(x[["Sample_Name"]][i])#
			exprs_df <- rbind(#
							exprs_df,#
							data.frame(#
								signal=signals,#
								Dataset=rep(Dataset,length(signals)),#
								Treatment=rep(Treatment,length(signals)))#
							)#
		}#
	}#
	else {#
		for (i in 1:length(exprs(x)[1,])) {#
			Dataset <- colnames(exprs(x))[i]#
			signals <- exprs(x)[,i]#
			Treatment <- as.character(x[["Sample_Name"]][i])#
			exprs_df <- rbind(#
							exprs_df,#
							data.frame(#
								signal=signals,#
								Dataset=rep(Dataset,length(signals)),#
								Treatment=rep(Treatment,length(signals)))#
							)#
		}#
	}#
	return(exprs_df)#
}#
#++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++#
out_path = "~/Documents/Yulien_data/Scripts/"#
out_base_name = "VSN_Final_Results_Differential_Expression"#
#Treatment and control to analyse #
treatment <- "4DS"#
control <- "M.furfur"#
out_name = paste(out_base_name,treatment,"vs",control,sep="")#
#Device#
pdf(paste(out_path, out_name, ".pdf", sep=""))#
#++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++#
#
#Input Data#
#xys_files#
xys_files_path <- "~/Documents/Yulien_data/Raw_Data_Files/Pair_Files"#
xys.files <- list.xysfiles( xys_files_path, full.names=TRUE ) #list xys_files#
#phenoData#
pheno_file <- "~/Documents/Yulien_data/Design_information/chip_data.tab"#
theData = read.table(pheno_file, row.names=1, header=TRUE,sep="\t")#
theData = subset(theData, select= c("Sample_Name"))#
#
lvls <- c( "channel1", "channel2", "_ALL_" )#
metadata <- data.frame( channel=factor("_ALL_", levels=lvls), labelDescription="Channels" )#
#
#AnnotatedDataFrame building#
pheno_data <- new("AnnotatedDataFrame", data=theData, varMetadata=metadata)#
#ExpressionFeatureSet building using xys_files#
raw_exprs_set <- read.xysfiles( xys.files,#
								pkgname="pd.110413.mglo.cag.exp",#
								phenoData=pheno_data,#
								sampleNames=c("M.furfur-1",#
											"M.globosa-1",#
											"M.globosa-2",#
											"M.globosa-3",#
											"M.furfur-2",#
											"4DS-1",#
											"4DST80-1",#
											"M.furfur-3",#
											"4DST80-2",#
											"4DS-2",#
											"4DST80-3",#
											"4DS-3")#
								)#
#Idexes of the datasets related to the treatment and control specified#
index_1 <- which(raw_exprs_set[["Sample_Name"]] == treatment)#
index_2 <- which(raw_exprs_set[["Sample_Name"]] == control)#
all_indexes <- c(index_1,index_2)#
#Create a ExpressioFeatureSet subset with the datasets related to the specified treatment and control#
exprs_set_subset <- raw_exprs_set[,all_indexes]#
#Oligo default distribution graphics for raw data#
#boxplot(exprs_set_subset, main=paste("Raw Data", treatment,"vs",control))#
#hist(exprs_set_subset, main=paste("Raw Data", treatment, "vs", control))#
#
#ggplot distribution graphics for raw data#
exprs_df <- ggplot_dataframe(exprs_set_subset)#
library(ggplot2)#
p <- ggplot(exprs_df,aes(y=log2(signal),x=Dataset))#
p + geom_boxplot(aes(fill=Treatment)) #+ geom_jitter(alpha = I(1/300))#
#
p <- ggplot(exprs_df, aes(x=log2(signal)))#
p + geom_density(aes(fill=Dataset), alpha= 0.3)#
#
#ExpressionFeatureSet to matrix#
#
eset <- rma(exprs_set_subset, normalize=FALSE, background=FALSE)#
#
e_matrix <- 2^exprs(eset)#
#
#Basic MAplot applying log2 to raw data#
d_means <- log2(rowMeans(e_matrix[, 4:6])) - log2(rowMeans(e_matrix[, 1:3]))#
a_means <- (log2(rowMeans(e_matrix[,4:6])) + log2(rowMeans(e_matrix[,1:3]))) / 2#
smoothScatter(a_means, d_means, xlab="Average Intensity", ylab="Log2-ratio", main=paste(treatment,"vs",control, "(Applying log2 to raw data)"))#
#
#Signal Data Processing #
#bacgroundCorrect (oligo method)#
raw <- exprs_set_subset#
#raw <- backgroundCorrect(exprs_set_subset, "rma") # Add noise to the dataset, in this case#
raw_begin <- raw#
pms = pm(raw) #ExpressionFeatureSet to matrix, ignoring spots with NA signal#
pmsVSN = vsn::vsnMatrix(pms) #vsn "normalization" of signal data#
require("vsn")#
#meanvsSd plots #
meanSdPlot(pmsVSN, ranks=TRUE)#
meanSdPlot(pmsVSN, ranks=FALSE)#
#vsn normalized data, store in a vsn object to ExpressionFeatureSet#
pm(raw) <- exprs(pmsVSN)#
#
#ggplot distribution graphics for normalized data#
exprs_df <- ggplot_dataframe(raw)#
#
p <- ggplot(exprs_df, aes(y=signal, x=Dataset))#
p + geom_boxplot(aes(fill=Treatment)) #+ geom_jitter(alpha = I(1/300))#
#
p <- ggplot(exprs_df, aes(x=signal))#
p + geom_density(aes(fill=Dataset), alpha= 0.3)#
#
#oligo defaults graphics#
#boxplot(eset, main=paste("Raw Data", treatment,"vs",control), transfo=identity)#
#hist(eset, main=paste("Raw Data", treatment,"vs",control), transfo=identity)#
#
#summarization of normalize data using rma oligo method = median.polish#
eset <- rma(raw, normalize = FALSE, background = FALSE)#
#
#ExpressionSet to matrix#
e_matrix <- 2^exprs(eset)#
#
eset_treatments_info = as.character(theData[all_indexes,1])#
eset_theData = data.frame(Sample_Name= factor(eset_treatments_info, levels=unique(eset_treatments_info)))#
rownames(eset_theData) = rownames(theData)[all_indexes]#
pd <- new("AnnotatedDataFrame", data=eset_theData, varMetadata=metadata)#
eset <- new("ExpressionSet", exprs = e_matrix, phenoData = pd, annotation = "pd.110413.mglo.cag.exp")#
#
exprs_df <- ggplot_dataframe(eset)#
#
p <- ggplot(exprs_df, aes(y=signal, x=Dataset))#
p + geom_boxplot(aes(fill=Treatment)) #+ geom_jitter(alpha = I(1/300))#
#
p <- ggplot(exprs_df, aes(x=signal))#
p + geom_density(aes(fill=Dataset), alpha= 0.3)#
#
#MAplot of normalize data #
d_means <- rowMeans(e_matrix[, 4:6]) - rowMeans(e_matrix[, 1:3])#
a_means <- rowMeans(e_matrix)#
smoothScatter(a_means, d_means, xlab="Average Intensity", ylab="Ratio", main=paste(treatment,"vs",control, "(After VSN normalization)"))#
#
#SAM analysis#
library(siggenes)#
exprs.cl <- c(rep(0,3),rep(1,3))#
#
sam.out <- sam(eset, exprs.cl, method= d.stat,  rand= 123)#
summary(sam.out)#
plot(sam.out)#
thres <- 2#
plot(sam.out, thres)#
sum.sam.out <- summary(sam.out, thres)#
sam_csv_file <- paste(out_path, out_name,"sam.csv",sep="")#
sam2excel(sam.out,thres,sam_csv_file)#
sam_results <- read.csv(sam_csv_file, skip=19, header=TRUE)#
num_sig_genes  <- dim(sam_results)[1]#
#
#eBayes analysis#
library(limma)#
#
d_means <- rowMeans(eset_matrix[, 4:6])-rowMeans(eset_matrix[, 1:3])#
#
design <- model.matrix(~factor(eset[["Sample_Name"]]))#
fit <- lmFit(eset, design)#
ebayes <- eBayes(fit)#
lod <- -log10(ebayes[["p.value"]][,2])#
mtstat <- ebayes[["t"]][,2]#
#
o1 <- order(abs(d_means), decreasing=TRUE)[1:num_sig_genes]#
o2 <- order(abs(mtstat), decreasing=TRUE)[1:num_sig_genes]#
o <- union(o1, o2)#
#
smoothScatter(d_means, lod, main="Moderated t", xlab="Ratio", ylab="LOD")#
points(d_means[o1], lod[o1], pch=18,col="blue")#
points(d_means[o2], lod[o2], pch=8,col="red")#
#abline(h=2, v=c(-1, 1))#
#
tab <- topTable(ebayes, coef=2, adjust="fdr", n=num_sig_genes)#
ebayes_csv_file <- paste(out_path, out_name,"ebayes.csv",sep="")#
write.csv(tab, file=ebayes_csv_file, row.names=FALSE)#
#
imp_genes <-  head((tab$ID),num_sig_genes)#
imp_genes_exprs <- matrix(nrow=num_sig_genes,ncol=6)#
rownames(imp_genes_exprs) <- imp_genes#
colnames(imp_genes_exprs) <- colnames(e_matrix)#
for (i in imp_genes) {#
	print(i)#
	print(e_matrix[i,])#
	imp_genes_exprs[i,] <-  e_matrix[i,]#
}#
#
e_matrix <- exprs(eset)#
#MAplot of normalize data #
d_means <- rowMeans(e_matrix[, 4:6]) - rowMeans(e_matrix[, 1:3])#
a_means <- rowMeans(e_matrix)#
smoothScatter(a_means, d_means, xlab="Average Intensity", ylab="Ratio", main=paste(treatment,"vs",control, "(After VSN normalization)"))#
points(a_means[rownames(imp_genes_exprs)], d_means[rownames(imp_genes_exprs)], pch=8,col="red")#
points(a_means[as.character(sam_results[["Name"]])], d_means[as.character(sam_results[["Name"]])], pch=20,col="green")#
#
save(e_matrix, eset, file=paste(out_path, out_name,".RData", sep=""))#
#
dev.off()
90* 1.3
90*0.3
90+27
90*0.7
90/0.7
7983500*1.3
6500000*1.3
7000000*1.3
7*.3
source("http://bioconductor.org/biocLite.R")
biocLite()
install.packages(RMySQL)
install.packages('RMySQL')
ls
library(ggplot2)#
Blast_Evalues <- read.table("e_values.txt", header=FALSE, sep='\t')#
colnames(Blast_Evalues) = c("Query ID","e_values")#
Blast_Evalues_significant <- Blast_Evalues[e_values < 1]#
qplot(log(e_values), data=Blast_Evalues_significant, geom="histogram")
library(ggplot2)#
Blast_Evalues <- read.table("~/Documents/Yulien_data/Sequences/e_values.txt", header=FALSE, sep='\t')#
colnames(Blast_Evalues) = c("Query ID","e_values")#
Blast_Evalues_significant <- Blast_Evalues[e_values < 1]#
qplot(log(e_values), data=Blast_Evalues_significant, geom="histogram")
library(ggplot2)#
Blast_Evalues <- read.table("~/Documents/Yulien_data/Sequences/e_values.txt", header=FALSE, sep='\t')#
colnames(Blast_Evalues) = c("Query ID","e_values")#
Blast_Evalues_significant <- Blast_Evalues[Blast_Evalues$e_values < 1]#
qplot(log(e_values), data=Blast_Evalues_significant, geom="histogram")
head(Blast_Evalues)
head(Blast_Evalues[Blast_Evalues$e_values < 1])
library(ggplot2)#
Blast_Evalues <- read.table("~/Documents/Yulien_data/Sequences/e_values.txt", header=FALSE, sep='\t')#
colnames(Blast_Evalues) = c("Query ID","e_values")#
Blast_Evalues_significant <- Blast_Evalues[Blast_Evalues$e_values < 1,]#
qplot(log(e_values), data=Blast_Evalues_significant, geom="histogram")
size(Blast_Evalues)
length(Blast_Evalues)
size(Blast_Evalues)
length(Blast_Evalues$e_values)
length(Blast_Evalues_significant$e_values)
total_seq <- length(Blast_Evalues$e_values)#
match_seq <- length(Blast_Evalues_significant$e_values)#
nonmatch_seq <- total_seq - match_seq#
Count <- c(match_seq, nonmatch_seq)#
Significant_Hit <- c("found", "not found")#
df = data.frame(Count=count, Significant_Hit=Significant_Hit);
total_seq <- length(Blast_Evalues$e_values)#
match_seq <- length(Blast_Evalues_significant$e_values)#
nonmatch_seq <- total_seq - match_seq#
Count <- c(match_seq, nonmatch_seq)#
Significant_Hit <- c("found", "not found")#
df = data.frame(Count=Count, Significant_Hit=Significant_Hit);
df
ggplot(data=df, aes=(x=Count, y=Count)) + geom_bar(stat="identity")
ggplot(data=df, aes=(x=Significant_Hit, y=Count)) + geom_bar(stat="identity")
ggplot(data=df, aes(x=Significant_Hit, y=Count)) + geom_bar(stat="identity")
ggplot(data=df, aes(x=Significant_Hit, y=Count)) + geom_bar(colour="black", fill="#DD8888", width=.7, stat="identity")
ggplot(data=df, aes(x=Significant_Hit, y=Count)) + geom_bar(colour="black", fill="#DD8888", width=.5, stat="identity")
ggplot(data=df, aes(x=Significant_Hit, y=Count)) + geom_bar(colour="black", fill="#DD8888", width=.3, stat="identity")
ggplot(data=df, aes(x=Significant_Hit, y=Count)) + geom_bar(colour="black", fill="#DD8888", width=.5, stat="identity")
ggplot(data=df, aes(x=Significant_Hit, y=Count)) + geom_bar(colour="black", fill="grey", width=.5, stat="identity")
ggplot(data=df, aes(x=Significant_Hit, y=Count)) + geom_bar(colour="black", fill="white", width=.5, stat="identity")
ggplot(data=df, aes(x=Significant_Hit, y=Count)) + geom_bar(colour="black", fill="red", width=.5, stat="identity")
ggplot(data=df, aes(x=Significant_Hit, y=Count)) + geom_bar(colour="black", fill="green", width=.5, stat="identity")
ggplot(data=df, aes(x=Significant_Hit, y=Count)) + geom_bar(colour="black", fill="grey", width=.5, stat="identity")
ggplot(data=df, aes(x=Significant_Hit, y=Count)) + geom_bar(colour="red", fill="grey", width=.5, stat="identity")
ggplot(data=df, aes(x=Significant_Hit, y=Count)) + geom_bar(colour="blue", fill="grey", width=.5, stat="identity")
ggplot(data=df, aes(x=Significant_Hit, y=Count)) + geom_bar(colour="black", fill="blue", width=.5, stat="identity")
ggplot(data=df, aes(x=Significant_Hit, y=Count)) + geom_bar(colour="black", fill="grey", width=.5, stat="identity")
qplot(log(e_values), data=Blast_Evalues_significant, geom="histogram")
qplot(log(e_values), data=Blast_Evalues_significant, geom="histogram",bindwidth= 5)
qplot(log(e_values), data=Blast_Evalues_significant, geom="histogram",binwidth= 5)
qplot(log(e_values), data=Blast_Evalues_significant, geom="histogram",binwidth= 1)
qplot(log(e_values), data=Blast_Evalues_significant, geom="histogram",binwidth= 100)
qplot(log(e_values), data=Blast_Evalues_significant, geom="histogram",binwidth= 10)
qplot(log(e_values), data=Blast_Evalues_significant, geom="histogram",binwidth= 50)
ggplot(data=Blast_Evalues,aes(x=log(e_values))) + geom_histogram()
ggplot(data=Blast_Evalues,aes(x=log(e_values))) + geom_histogram(colour='darkgreen', fill='white',bindwdth=100)
ggplot(data=Blast_Evalues,aes(x=log(e_values))) + geom_histogram(colour='darkgreen', fill='grey',bindwdth=100)
ggplot(data=Blast_Evalues,aes(x=log(e_values))) + geom_histogram(colour='darkblue', fill='grey',bindwdth=100)
ggplot(data=Blast_Evalues,aes(x=log(e_values))) + geom_histogram(colour='darkblue', fill='darkyellow',bindwdth=100)
ggplot(data=Blast_Evalues,aes(x=log(e_values))) + geom_histogram(colour='darkblue', fill='darkygreen',bindwdth=100)
ggplot(data=Blast_Evalues,aes(x=log(e_values))) + geom_histogram(colour='dark', fill='grey',bindwdth=100)
ggplot(data=Blast_Evalues,aes(x=log(e_values))) + geom_histogram(colour='black', fill='grey',bindwdth=100)
ggplot(data=Blast_Evalues,aes(x=log(e_values))) + geom_histogram(colour='black', fill='grey',bindwidth=100)
ggplot(data=Blast_Evalues,aes(x=log(e_values))) + geom_histogram(colour='black', fill='grey',binwidth=100)
ggplot(data=Blast_Evalues,aes(x=log(e_values))) + geom_histogram(colour='black', fill='grey',binwidth=50)
ggplot(data=Blast_Evalues,aes(x=log(e_values))) + geom_histogram(colour='black', fill='grey',binwidth=10)
ggplot(data=Blast_Evalues,aes(x=log(e_values))) + geom_histogram(colour='black', fill='grey',binwidth=20)
ggplot(data=Blast_Evalues,aes(x=log(e_values))) + geom_histogram(colour='black', fill='grey',binwidth=50)
ggplot(data=Blast_Evalues,aes(x=log(e_values))) + geom_histogram(colour='black', fill='grey',binwidth=100)
ggplot(data=df, aes(x=Significant_Hit, y=Count)) + geom_bar(colour="black", fill="grey", width=.5, stat="identity")#
+ coord_flip()
ggplot(data=df, aes(x=Significant_Hit, y=Count)) + geom_bar(colour="black", fill="grey", width=.5, stat="identity") + coord_flip()
library(ggplot2)#
path <- "/Users/davidurbina/Documents/Yulien_data/Malassezia_JGI_info/GO_Analysis"#
files <- list.files(path=path, pattern=".tab$")#
pdf(paste(path,'/topGO_sigcount.pdf'))#
for (file in files) {#
	topGO_df <- read.table("~/Documents/Yulien_data/Malassezia_JGI_info/GO_Analysis/GO_Analysis4DST80_vs_4DS_biological_process_results.tab", sep='\t',header=TRUE)#
	topGO_df <- topGO_df[topGO_df$weight <= 0.05,]#
	topGO$Term <- reorder(topGO$Term, -topGO$weight)#
	ggplot(data=topGO, aes(x= Term, y=Significant)) + geom_bar(stat='identity') + coord_flip()#
}#
dev.off()
library(ggplot2)#
path <- "/Users/davidurbina/Documents/Yulien_data/Malassezia_JGI_info/GO_Analysis"#
files <- list.files(path=path, pattern=".tab$")#
#pdf(paste(path,'/topGO_sigcount.pdf',sep=''))#
for (file in files) {#
	topGO_df <- read.table("~/Documents/Yulien_data/Malassezia_JGI_info/GO_Analysis/GO_Analysis4DST80_vs_4DS_biological_process_results.tab", sep='\t',header=TRUE)#
	topGO_df <- topGO_df[topGO_df$weight <= 0.05,]#
	topGO_df$Term <- reorder(topGO_df$Term, -topGO_df$weight)#
	ggplot(data=topGO_df, aes(x= Term, y=Significant)) + geom_bar(stat='identity') + coord_flip()#
}
library(ggplot2)#
path <- "/Users/davidurbina/Documents/Yulien_data/Malassezia_JGI_info/GO_Analysis"#
files <- list.files(path=path, pattern=".tab$")#
#pdf(paste(path,'/topGO_sigcount.pdf',sep=''))#
for (file in files) {#
	topGO_df <- read.table(file, sep='\t',header=TRUE)#
	topGO_df <- topGO_df[topGO_df$weight <= 0.05,]#
	topGO_df$Term <- reorder(topGO_df$Term, -topGO_df$weight)#
	ggplot(data=topGO_df, aes(x= Term, y=Significant)) + geom_bar(stat='identity') + coord_flip()#
}
foles
files
rm(list=ls(all=TRUE))#
#Libraries#
library(oligo)#
library("pd.110413.mglo.cag.exp")#
#
#Functions#
#
#build data.frame with signals information to be used for ggplot graphics#
ggplot_dataframe = function(x) {#
#
	exprs_df <- data.frame(signal= numeric(), Dataset=factor(),  Treatment= factor())#
	if (class(x) == "ExpressionFeatureSet") {#
		for (i in 1:length(pm(x)[1,])) {#
			Dataset <- colnames(pm(x))[i]#
			signals <- pm(x)[,i]#
			Treatment <- as.character(x[["Sample_Name"]][i])#
			exprs_df <- rbind(#
							exprs_df,#
							data.frame(#
								signal=signals,#
								Dataset=rep(Dataset,length(signals)),#
								Treatment=rep(Treatment,length(signals)))#
							)#
		}#
	}#
	else {#
		for (i in 1:length(exprs(x)[1,])) {#
			Dataset <- colnames(exprs(x))[i]#
			signals <- exprs(x)[,i]#
			Treatment <- as.character(x[["Sample_Name"]][i])#
			exprs_df <- rbind(#
							exprs_df,#
							data.frame(#
								signal=signals,#
								Dataset=rep(Dataset,length(signals)),#
								Treatment=rep(Treatment,length(signals)))#
							)#
		}#
	}#
	return(exprs_df)#
}#
#++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++#
out_path = "~/Documents/Yulien_data/Scripts/"#
out_base_name = "VSN_Final_Results_Differential_Expression"#
#Treatment and control to analyse #
treatment <- "4DST80"#
control <- "M.furfur"#
out_name = paste(out_base_name,treatment,"vs",control,sep="")#
#Device#
pdf(paste(out_path, out_name, ".pdf", sep=""))#
#++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++#
#
#Input Data#
#xys_files#
xys_files_path <- "~/Documents/Yulien_data/Raw_Data_Files/Pair_Files"#
xys.files <- list.xysfiles( xys_files_path, full.names=TRUE ) #list xys_files#
#phenoData#
pheno_file <- "~/Documents/Yulien_data/Design_information/chip_data.tab"#
theData = read.table(pheno_file, row.names=1, header=TRUE,sep="\t")#
theData = subset(theData, select= c("Sample_Name"))#
#
lvls <- c( "channel1", "channel2", "_ALL_" )#
metadata <- data.frame( channel=factor("_ALL_", levels=lvls), labelDescription="Channels" )#
#
#AnnotatedDataFrame building#
pheno_data <- new("AnnotatedDataFrame", data=theData, varMetadata=metadata)#
#ExpressionFeatureSet building using xys_files#
raw_exprs_set <- read.xysfiles( xys.files,#
								pkgname="pd.110413.mglo.cag.exp",#
								phenoData=pheno_data,#
								sampleNames=c("M.furfur-1",#
											"M.globosa-1",#
											"M.globosa-2",#
											"M.globosa-3",#
											"M.furfur-2",#
											"4DS-1",#
											"4DST80-1",#
											"M.furfur-3",#
											"4DST80-2",#
											"4DS-2",#
											"4DST80-3",#
											"4DS-3")#
								)#
#Idexes of the datasets related to the treatment and control specified#
index_1 <- which(raw_exprs_set[["Sample_Name"]] == treatment)#
index_2 <- which(raw_exprs_set[["Sample_Name"]] == control)#
all_indexes <- c(index_1,index_2)#
#Create a ExpressioFeatureSet subset with the datasets related to the specified treatment and control#
exprs_set_subset <- raw_exprs_set[,all_indexes]#
#Oligo default distribution graphics for raw data#
#boxplot(exprs_set_subset, main=paste("Raw Data", treatment,"vs",control))#
#hist(exprs_set_subset, main=paste("Raw Data", treatment, "vs", control))#
#
#ggplot distribution graphics for raw data#
exprs_df <- ggplot_dataframe(exprs_set_subset)#
library(ggplot2)#
p <- ggplot(exprs_df,aes(y=log2(signal),x=Dataset))#
p + geom_boxplot(aes(fill=Treatment)) #+ geom_jitter(alpha = I(1/300))#
#
p <- ggplot(exprs_df, aes(x=log2(signal)))#
p + geom_density(aes(fill=Dataset), alpha= 0.3)#
#
#ExpressionFeatureSet to matrix#
#
eset <- rma(exprs_set_subset, normalize=FALSE, background=FALSE)#
#
e_matrix <- 2^exprs(eset)#
#
#Basic MAplot applying log2 to raw data#
d_means <- log2(rowMeans(e_matrix[, 4:6])) - log2(rowMeans(e_matrix[, 1:3]))#
a_means <- (log2(rowMeans(e_matrix[,4:6])) + log2(rowMeans(e_matrix[,1:3]))) / 2#
smoothScatter(a_means, d_means, xlab="Average Intensity", ylab="Log2-ratio", main=paste(treatment,"vs",control, "(Applying log2 to raw data)"))#
#
#Signal Data Processing #
#bacgroundCorrect (oligo method)#
raw <- exprs_set_subset#
#raw <- backgroundCorrect(exprs_set_subset, "rma") # Add noise to the dataset, in this case#
raw_begin <- raw#
pms = pm(raw) #ExpressionFeatureSet to matrix, ignoring spots with NA signal#
pmsVSN = vsn::vsnMatrix(pms) #vsn "normalization" of signal data#
require("vsn")#
#meanvsSd plots #
meanSdPlot(pmsVSN, ranks=TRUE)#
meanSdPlot(pmsVSN, ranks=FALSE)#
#vsn normalized data, store in a vsn object to ExpressionFeatureSet#
pm(raw) <- exprs(pmsVSN)#
#
#ggplot distribution graphics for normalized data#
exprs_df <- ggplot_dataframe(raw)#
#
p <- ggplot(exprs_df, aes(y=signal, x=Dataset))#
p + geom_boxplot(aes(fill=Treatment)) #+ geom_jitter(alpha = I(1/300))#
#
p <- ggplot(exprs_df, aes(x=signal))#
p + geom_density(aes(fill=Dataset), alpha= 0.3)#
#
#oligo defaults graphics#
#boxplot(eset, main=paste("Raw Data", treatment,"vs",control), transfo=identity)#
#hist(eset, main=paste("Raw Data", treatment,"vs",control), transfo=identity)#
#
#summarization of normalize data using rma oligo method = median.polish#
eset <- rma(raw, normalize = FALSE, background = FALSE)#
#
#ExpressionSet to matrix#
e_matrix <- 2^exprs(eset)#
#
eset_treatments_info = as.character(theData[all_indexes,1])#
eset_theData = data.frame(Sample_Name= factor(eset_treatments_info, levels=unique(eset_treatments_info)))#
rownames(eset_theData) = rownames(theData)[all_indexes]#
pd <- new("AnnotatedDataFrame", data=eset_theData, varMetadata=metadata)#
eset <- new("ExpressionSet", exprs = e_matrix, phenoData = pd, annotation = "pd.110413.mglo.cag.exp")#
#
exprs_df <- ggplot_dataframe(eset)#
#
p <- ggplot(exprs_df, aes(y=signal, x=Dataset))#
p + geom_boxplot(aes(fill=Treatment)) #+ geom_jitter(alpha = I(1/300))#
#
p <- ggplot(exprs_df, aes(x=signal))#
p + geom_density(aes(fill=Dataset), alpha= 0.3)#
#
#MAplot of normalize data #
d_means <- rowMeans(e_matrix[, 4:6]) - rowMeans(e_matrix[, 1:3])#
a_means <- rowMeans(e_matrix)#
smoothScatter(a_means, d_means, xlab="Average Intensity", ylab="Ratio", main=paste(treatment,"vs",control, "(After VSN normalization)"))#
#
#SAM analysis#
library(siggenes)#
exprs.cl <- c(rep(0,3),rep(1,3))#
#
sam.out <- sam(eset, exprs.cl, method= d.stat,  rand= 123)#
summary(sam.out)#
plot(sam.out)#
thres <- 2#
plot(sam.out, thres)#
sum.sam.out <- summary(sam.out, thres)#
sam_csv_file <- paste(out_path, out_name,"sam.csv",sep="")#
sam2excel(sam.out,thres,sam_csv_file)#
sam_results <- read.csv(sam_csv_file, skip=19, header=TRUE)#
num_sig_genes  <- dim(sam_results)[1]#
#
#eBayes analysis#
library(limma)#
#
d_means <- rowMeans(eset_matrix[, 4:6])-rowMeans(eset_matrix[, 1:3])#
#
design <- model.matrix(~factor(eset[["Sample_Name"]]))#
fit <- lmFit(eset, design)#
ebayes <- eBayes(fit)#
lod <- -log10(ebayes[["p.value"]][,2])#
mtstat <- ebayes[["t"]][,2]#
#
o1 <- order(abs(d_means), decreasing=TRUE)[1:num_sig_genes]#
o2 <- order(abs(mtstat), decreasing=TRUE)[1:num_sig_genes]#
o <- union(o1, o2)#
#
smoothScatter(d_means, lod, main="Moderated t", xlab="Ratio", ylab="LOD")#
points(d_means[o1], lod[o1], pch=18,col="blue")#
points(d_means[o2], lod[o2], pch=8,col="red")#
#abline(h=2, v=c(-1, 1))#
#
tab <- topTable(ebayes, coef=2, adjust="fdr", n=num_sig_genes)#
ebayes_csv_file <- paste(out_path, out_name,"ebayes.csv",sep="")#
write.csv(tab, file=ebayes_csv_file, row.names=FALSE)#
#
imp_genes <-  head((tab$ID),num_sig_genes)#
imp_genes_exprs <- matrix(nrow=num_sig_genes,ncol=6)#
rownames(imp_genes_exprs) <- imp_genes#
colnames(imp_genes_exprs) <- colnames(e_matrix)#
for (i in imp_genes) {#
	print(i)#
	print(e_matrix[i,])#
	imp_genes_exprs[i,] <-  e_matrix[i,]#
}#
#
e_matrix <- exprs(eset)#
#MAplot of normalize data #
d_means <- rowMeans(e_matrix[, 4:6]) - rowMeans(e_matrix[, 1:3])#
a_means <- rowMeans(e_matrix)#
smoothScatter(a_means, d_means, xlab="Average Intensity", ylab="Ratio", main=paste(treatment,"vs",control, "(After VSN normalization)"))#
points(a_means[rownames(imp_genes_exprs)], d_means[rownames(imp_genes_exprs)], pch=8,col="red")#
points(a_means[as.character(sam_results[["Name"]])], d_means[as.character(sam_results[["Name"]])], pch=20,col="green")#
#
save(e_matrix, eset, file=paste(out_path, out_name,".RData", sep=""))#
#
dev.off()
head(e_matrix)
sam.out
plot(sam.out,7)
plot(sam.out,9)
plot(sam.out,7)
plot(sam.out,10)
plot(sam.out,6)
plot(sam.out,2)
plot(sam.out,4)
90*8
28*10
(90*8)+(28*10)
ans / 10
1000/100
49.57*1000
49.57/1000
10/0.04957
100/1000*40
4286 * 10
42860 /60
4286 / 10
4286 / 60
2.4 * 24
57.6*31
0.08*24*31
1785.6 / 59.52
rm(list=ls(all=TRUE))#
#Libraries#
library(oligo)#
library("pd.110413.mglo.cag.exp")#
#
#Functions#
#
#build data.frame with signals information to be used for ggplot graphics#
ggplot_dataframe = function(x) {#
#
	exprs_df <- data.frame(signal= numeric(), Dataset=factor(),  Treatment= factor())#
	if (class(x) == "ExpressionFeatureSet") {#
		for (i in 1:length(pm(x)[1,])) {#
			Dataset <- colnames(pm(x))[i]#
			signals <- pm(x)[,i]#
			Treatment <- as.character(x[["Sample_Name"]][i])#
			exprs_df <- rbind(#
							exprs_df,#
							data.frame(#
								signal=signals,#
								Dataset=rep(Dataset,length(signals)),#
								Treatment=rep(Treatment,length(signals)))#
							)#
		}#
	}#
	else {#
		for (i in 1:length(exprs(x)[1,])) {#
			Dataset <- colnames(exprs(x))[i]#
			signals <- exprs(x)[,i]#
			Treatment <- as.character(x[["Sample_Name"]][i])#
			exprs_df <- rbind(#
							exprs_df,#
							data.frame(#
								signal=signals,#
								Dataset=rep(Dataset,length(signals)),#
								Treatment=rep(Treatment,length(signals)))#
							)#
		}#
	}#
	return(exprs_df)#
}#
#++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++#
out_path = "~/Documents/Yulien_data/Scripts/"#
out_base_name = "VSN_Final_Results_Differential_Expression"#
#Treatment and control to analyse #
treatment <- "4DST80"#
control <- "M.furfur"#
out_name = paste(out_base_name,treatment,"vs",control,sep="")#
#Device#
pdf(paste(out_path, out_name, ".pdf", sep=""))#
#++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++#
#
#Input Data#
#xys_files#
xys_files_path <- "~/Documents/Yulien_data/Raw_Data_Files/Pair_Files"#
xys.files <- list.xysfiles( xys_files_path, full.names=TRUE ) #list xys_files#
#phenoData#
pheno_file <- "~/Documents/Yulien_data/Design_information/chip_data.tab"#
theData = read.table(pheno_file, row.names=1, header=TRUE,sep="\t")#
theData = subset(theData, select= c("Sample_Name"))#
#
lvls <- c( "channel1", "channel2", "_ALL_" )#
metadata <- data.frame( channel=factor("_ALL_", levels=lvls), labelDescription="Channels" )#
#
#AnnotatedDataFrame building#
pheno_data <- new("AnnotatedDataFrame", data=theData, varMetadata=metadata)#
#ExpressionFeatureSet building using xys_files#
raw_exprs_set <- read.xysfiles( xys.files,#
								pkgname="pd.110413.mglo.cag.exp",#
								phenoData=pheno_data,#
								sampleNames=c("M.furfur-1",#
											"M.globosa-1",#
											"M.globosa-2",#
											"M.globosa-3",#
											"M.furfur-2",#
											"4DS-1",#
											"4DST80-1",#
											"M.furfur-3",#
											"4DST80-2",#
											"4DS-2",#
											"4DST80-3",#
											"4DS-3")#
								)#
#Idexes of the datasets related to the treatment and control specified#
index_1 <- which(raw_exprs_set[["Sample_Name"]] == treatment)#
index_2 <- which(raw_exprs_set[["Sample_Name"]] == control)#
all_indexes <- c(index_1,index_2)#
#Create a ExpressioFeatureSet subset with the datasets related to the specified treatment and control#
exprs_set_subset <- raw_exprs_set[,all_indexes]#
#Oligo default distribution graphics for raw data#
#boxplot(exprs_set_subset, main=paste("Raw Data", treatment,"vs",control))#
#hist(exprs_set_subset, main=paste("Raw Data", treatment, "vs", control))#
#
#ggplot distribution graphics for raw data#
exprs_df <- ggplot_dataframe(exprs_set_subset)#
library(ggplot2)#
p <- ggplot(exprs_df,aes(y=log2(signal),x=Dataset))#
p + geom_boxplot(aes(fill=Treatment)) #+ geom_jitter(alpha = I(1/300))#
#
p <- ggplot(exprs_df, aes(x=log2(signal)))#
p + geom_density(aes(fill=Dataset), alpha= 0.3)#
#
#ExpressionFeatureSet to matrix#
#
eset <- rma(exprs_set_subset, normalize=FALSE, background=FALSE)#
#
e_matrix <- 2^exprs(eset)#
#
#Basic MAplot applying log2 to raw data#
d_means <- log2(rowMeans(e_matrix[, 4:6])) - log2(rowMeans(e_matrix[, 1:3]))#
a_means <- (log2(rowMeans(e_matrix[,4:6])) + log2(rowMeans(e_matrix[,1:3]))) / 2#
smoothScatter(a_means, d_means, xlab="Average Intensity", ylab="Log2-ratio", main=paste(treatment,"vs",control, "(Applying log2 to raw data)"))#
#
#Signal Data Processing #
#bacgroundCorrect (oligo method)#
raw <- exprs_set_subset#
#raw <- backgroundCorrect(exprs_set_subset, "rma") # Add noise to the dataset, in this case#
raw_begin <- raw#
pms = pm(raw) #ExpressionFeatureSet to matrix, ignoring spots with NA signal#
pmsVSN = vsn::vsnMatrix(pms) #vsn "normalization" of signal data#
require("vsn")#
#meanvsSd plots #
meanSdPlot(pmsVSN, ranks=TRUE)#
meanSdPlot(pmsVSN, ranks=FALSE)#
#vsn normalized data, store in a vsn object to ExpressionFeatureSet#
pm(raw) <- exprs(pmsVSN)#
#
#ggplot distribution graphics for normalized data#
exprs_df <- ggplot_dataframe(raw)#
#
p <- ggplot(exprs_df, aes(y=signal, x=Dataset))#
p + geom_boxplot(aes(fill=Treatment)) #+ geom_jitter(alpha = I(1/300))#
#
p <- ggplot(exprs_df, aes(x=signal))#
p + geom_density(aes(fill=Dataset), alpha= 0.3)#
#
#oligo defaults graphics#
#boxplot(eset, main=paste("Raw Data", treatment,"vs",control), transfo=identity)#
#hist(eset, main=paste("Raw Data", treatment,"vs",control), transfo=identity)#
#
#summarization of normalize data using rma oligo method = median.polish#
eset <- rma(raw, normalize = FALSE, background = FALSE)#
#
#ExpressionSet to matrix#
e_matrix <- 2^exprs(eset)#
#
eset_treatments_info = as.character(theData[all_indexes,1])#
eset_theData = data.frame(Sample_Name= factor(eset_treatments_info, levels=unique(eset_treatments_info)))#
rownames(eset_theData) = rownames(theData)[all_indexes]#
pd <- new("AnnotatedDataFrame", data=eset_theData, varMetadata=metadata)#
eset <- new("ExpressionSet", exprs = e_matrix, phenoData = pd, annotation = "pd.110413.mglo.cag.exp")#
#
exprs_df <- ggplot_dataframe(eset)#
#
p <- ggplot(exprs_df, aes(y=signal, x=Dataset))#
p + geom_boxplot(aes(fill=Treatment)) #+ geom_jitter(alpha = I(1/300))#
#
p <- ggplot(exprs_df, aes(x=signal))#
p + geom_density(aes(fill=Dataset), alpha= 0.3)#
#
#MAplot of normalize data #
d_means <- rowMeans(e_matrix[, 4:6]) - rowMeans(e_matrix[, 1:3])#
a_means <- rowMeans(e_matrix)#
smoothScatter(a_means, d_means, xlab="Average Intensity", ylab="Ratio", main=paste(treatment,"vs",control, "(After VSN normalization)"))#
#
#SAM analysis#
library(siggenes)#
exprs.cl <- c(rep(0,3),rep(1,3))#
#
sam.out <- sam(eset, exprs.cl, method= d.stat,  rand= 123)#
summary(sam.out)#
plot(sam.out)#
thres <- 2#
plot(sam.out, thres)#
sum.sam.out <- summary(k, thres)#
sam_csv_file <- paste(out_path, out_name,"sam.csv",sep="")#
sam2excel(sam.out,thres,sam_csv_file)#
sam_results <- read.csv(sam_csv_file, skip=19, header=TRUE)#
num_sig_genes  <- dim(sam_results)[1]#
#
#eBayes analysis#
library(limma)#
#
d_means <- rowMeans(eset_matrix[, 4:6])-rowMeans(eset_matrix[, 1:3])#
#
design <- model.matrix(~factor(eset[["Sample_Name"]]))#
fit <- lmFit(eset, design)#
ebayes <- eBayes(fit)#
lod <- -log10(ebayes[["p.value"]][,2])#
mtstat <- ebayes[["t"]][,2]#
#
o1 <- order(abs(d_means), decreasing=TRUE)[1:num_sig_genes]#
o2 <- order(abs(mtstat), decreasing=TRUE)[1:num_sig_genes]#
o <- union(o1, o2)#
#
smoothScatter(d_means, lod, main="Moderated t", xlab="Ratio", ylab="LOD")#
points(d_means[o1], lod[o1], pch=18,col="blue")#
points(d_means[o2], lod[o2], pch=8,col="red")#
#abline(h=2, v=c(-1, 1))#
#
tab <- topTable(ebayes, coef=2, adjust="fdr", n=num_sig_genes)#
ebayes_csv_file <- paste(out_path, out_name,"ebayes.csv",sep="")#
write.csv(tab, file=ebayes_csv_file, row.names=FALSE)#
#
imp_genes <-  head((tab$ID),num_sig_genes)#
imp_genes_exprs <- matrix(nrow=num_sig_genes,ncol=6)#
rownames(imp_genes_exprs) <- imp_genes#
colnames(imp_genes_exprs) <- colnames(e_matrix)#
for (i in imp_genes) {#
	print(i)#
	print(e_matrix[i,])#
	imp_genes_exprs[i,] <-  e_matrix[i,]#
}#
#
e_matrix <- exprs(eset)#
#MAplot of normalize data #
d_means <- rowMeans(e_matrix[, 4:6]) - rowMeans(e_matrix[, 1:3])#
a_means <- rowMeans(e_matrix)#
#
smoothScatter(a_means, d_means, xlab="Average Intensity", ylab="Ratio", main=paste(treatment,"vs",control, "(After VSN normalization)"))#
points(a_means[rownames(imp_genes_exprs)], d_means[rownames(imp_genes_exprs)], pch=8,col="red")#
points(a_means[as.character(sam_results[["Name"]])], d_means[as.character(sam_results[["Name"]])], pch=20,col="green")#
#
save(e_matrix, eset, file=paste(out_path, out_name,".RData", sep=""))#
#
dev.off()
k
summary(k, thres)
summary(sam.out, thres)
rm(list=ls(all=TRUE))#
#Libraries#
library(oligo)#
library("pd.110413.mglo.cag.exp")#
#
#Functions#
#
#build data.frame with signals information to be used for ggplot graphics#
ggplot_dataframe = function(x) {#
#
	exprs_df <- data.frame(signal= numeric(), Dataset=factor(),  Treatment= factor())#
	if (class(x) == "ExpressionFeatureSet") {#
		for (i in 1:length(pm(x)[1,])) {#
			Dataset <- colnames(pm(x))[i]#
			signals <- pm(x)[,i]#
			Treatment <- as.character(x[["Sample_Name"]][i])#
			exprs_df <- rbind(#
							exprs_df,#
							data.frame(#
								signal=signals,#
								Dataset=rep(Dataset,length(signals)),#
								Treatment=rep(Treatment,length(signals)))#
							)#
		}#
	}#
	else {#
		for (i in 1:length(exprs(x)[1,])) {#
			Dataset <- colnames(exprs(x))[i]#
			signals <- exprs(x)[,i]#
			Treatment <- as.character(x[["Sample_Name"]][i])#
			exprs_df <- rbind(#
							exprs_df,#
							data.frame(#
								signal=signals,#
								Dataset=rep(Dataset,length(signals)),#
								Treatment=rep(Treatment,length(signals)))#
							)#
		}#
	}#
	return(exprs_df)#
}#
#++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++#
out_path = "~/Documents/Yulien_data/Scripts/DEG_Analysis/"#
out_base_name = "DEG_AnalysisVSN_SAM"#
#Treatment and control to analyse #
treatment <- "4DST80"#
control <- "4DS"#
out_name = paste(out_base_name,"_",treatment,"vs",control,sep="")#
#Device#
pdf(paste(out_path, out_name, ".pdf", sep=""))#
#++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++#
#
#Input Data#
#xys_files#
xys_files_path <- "~/Documents/Yulien_data/Raw_Data_Files/Pair_Files"#
xys.files <- list.xysfiles( xys_files_path, full.names=TRUE ) #list xys_files#
#phenoData#
pheno_file <- "~/Documents/Yulien_data/Design_information/chip_data.tab"#
theData = read.table(pheno_file, row.names=1, header=TRUE,sep="	")#
theData = subset(theData, select= c("Sample_Name"))#
#
lvls <- c( "channel1", "channel2", "_ALL_" )#
metadata <- data.frame( channel=factor("_ALL_", levels=lvls), labelDescription="Channels" )#
#
#AnnotatedDataFrame building#
pheno_data <- new("AnnotatedDataFrame", data=theData, varMetadata=metadata)#
#ExpressionFeatureSet building using xys_files#
raw_exprs_set <- read.xysfiles( xys.files,#
								pkgname="pd.110413.mglo.cag.exp",#
								phenoData=pheno_data,#
								sampleNames=c("M.furfur-1",#
											"M.globosa-1",#
											"M.globosa-2",#
											"M.globosa-3",#
											"M.furfur-2",#
											"4DS-1",#
											"4DST80-1",#
											"M.furfur-3",#
											"4DST80-2",#
											"4DS-2",#
											"4DST80-3",#
											"4DS-3")#
								)#
#Idexes of the datasets related to the treatment and control specified#
index_1 <- which(raw_exprs_set[["Sample_Name"]] == treatment)#
index_2 <- which(raw_exprs_set[["Sample_Name"]] == control)#
all_indexes <- c(index_1,index_2)#
#
#Create a ExpressioFeatureSet subset with the datasets related to the specified treatment and control#
exprs_set_subset <- raw_exprs_set[,all_indexes]#
#
#ggplot distribution graphics for raw data#
exprs_df <- ggplot_dataframe(exprs_set_subset)#
library(ggplot2)#
p <- ggplot(exprs_df,aes(y=log2(signal),x=Dataset))#
p + geom_boxplot(aes(fill=Treatment))#
#
p <- ggplot(exprs_df, aes(x=log2(signal)))#
p + geom_density(aes(fill=Dataset), alpha= 0.3)#
#
#ExpressionFeatureSet to matrix#
eset <- rma(exprs_set_subset, normalize=FALSE, background=FALSE)#
e_matrix <- 2^exprs(eset)#
#
#Basic MAplot applying log2 to raw data#
d_means <- log2(rowMeans(e_matrix[, 4:6])) - log2(rowMeans(e_matrix[, 1:3]))#
a_means <- (log2(rowMeans(e_matrix[,4:6])) + log2(rowMeans(e_matrix[,1:3]))) / 2#
smoothScatter(a_means, d_means, xlab="Average Intensity", ylab="Log2-ratio", main=paste(treatment,"vs",control, "(Applying log2 to raw data)"))#
#
#Signal Data Processing #
#backgroundCorrect (oligo method)#
raw <- exprs_set_subset#
#raw <- backgroundCorrect(exprs_set_subset, "rma") # Add noise to the dataset, in this case#
raw_begin <- raw#
pms = pm(raw) #ExpressionFeatureSet to matrix, ignoring spots with NA signal#
pmsVSN = vsn::vsnMatrix(pms) #vsn "normalization" of signal data#
require("vsn")#
#meanvsSd plots #
meanSdPlot(pmsVSN, ranks=TRUE)#
meanSdPlot(pmsVSN, ranks=FALSE)#
#vsn normalized data (vsn object)-> ExpressionFeatureSet#
pm(raw) <- exprs(pmsVSN)#
#
#ggplot distribution graphics for normalized data#
exprs_df <- ggplot_dataframe(raw)#
#
p <- ggplot(exprs_df, aes(y=signal, x=Dataset))#
p + geom_boxplot(aes(fill=Treatment)) #
#
p <- ggplot(exprs_df, aes(x=signal))#
p + geom_density(aes(fill=Dataset), alpha= 0.3)#
#summarization of normalize data using rma oligo method = median.polish#
eset <- rma(raw, normalize = FALSE, background = FALSE)#
#ExpressionSet to matrix#
e_matrix <- 2^exprs(eset)#
#
eset_treatments_info = as.character(theData[all_indexes,1])#
eset_theData = data.frame(Sample_Name= factor(eset_treatments_info, levels=unique(eset_treatments_info)))#
rownames(eset_theData) = rownames(theData)[all_indexes]#
pd <- new("AnnotatedDataFrame", data=eset_theData, varMetadata=metadata)#
eset <- new("ExpressionSet", exprs = e_matrix, phenoData = pd, annotation = "pd.110413.mglo.cag.exp")#
#
exprs_df <- ggplot_dataframe(eset)#
#
p <- ggplot(exprs_df, aes(y=signal, x=Dataset))#
p + geom_boxplot(aes(fill=Treatment))#
#
p <- ggplot(exprs_df, aes(x=signal))#
p + geom_density(aes(fill=Dataset), alpha= 0.3)#
#
#MAplot of normalize data #
d_means <- rowMeans(e_matrix[, 4:6]) - rowMeans(e_matrix[, 1:3])#
a_means <- rowMeans(e_matrix)#
smoothScatter(a_means, d_means, xlab="Average Intensity", ylab="Ratio", main=paste(treatment,"vs",control, "(After VSN normalization)"))#
#
#SAM analysis#
library(siggenes)#
exprs.cl <- c(rep(0,3),rep(1,3))#
#
sam.out <- sam(eset, exprs.cl, method= d.stat,  rand= 123)#
summary(sam.out)#
plot(sam.out)#
thres <- 2#
plot(sam.out, thres)#
top_thres <- 1.1#
sum.sam.out <- summary(sam.out, top_thres)#
sam_csv_file <- paste(out_path, out_name,"_sam.csv",sep="")#
sam2excel(sam.out,top_thres,sam_csv_file)#
sam_results <- read.csv(sam_csv_file, skip=19, header=TRUE)#
num_sig_genes  <- dim(sam_results)[1]#
#
#eBayes analysis#
library(limma)#
#
d_means <- rowMeans(e_matrix[, 4:6])-rowMeans(e_matrix[, 1:3])#
#
design <- model.matrix(~factor(eset[["Sample_Name"]]))#
fit <- lmFit(eset, design)#
ebayes <- eBayes(fit)#
lod <- -log10(ebayes[["p.value"]][,2])#
mtstat <- ebayes[["t"]][,2]#
#
o1 <- order(abs(d_means), decreasing=TRUE)[1:num_sig_genes]#
o2 <- order(abs(mtstat), decreasing=TRUE)[1:num_sig_genes]#
o <- union(o1, o2)#
#
smoothScatter(d_means, lod, main="Moderated t", xlab="Ratio", ylab="LOD")#
points(d_means[o1], lod[o1], pch=18,col="blue")#
points(d_means[o2], lod[o2], pch=8,col="red")#
#abline(h=2, v=c(-1, 1))#
#
tab <- topTable(ebayes, coef=2, adjust="fdr", n=num_sig_genes)#
ebayes_csv_file <- paste(out_path, out_name,"ebayes.csv",sep="")#
write.csv(tab, file=ebayes_csv_file, row.names=FALSE)#
#
imp_genes <- head((tab$ID),num_sig_genes)#
imp_genes_exprs <- matrix(nrow=num_sig_genes,ncol=6)#
rownames(imp_genes_exprs) <- imp_genes#
colnames(imp_genes_exprs) <- colnames(e_matrix)#
for (i in imp_genes) {#
	print(i)#
	print(e_matrix[i,])#
	imp_genes_exprs[i,] <-  e_matrix[i,]#
}#
#
e_matrix <- exprs(eset)#
#MAplot of normalize data #
d_means <- rowMeans(e_matrix[, 4:6]) - rowMeans(e_matrix[, 1:3])#
a_means <- rowMeans(e_matrix)#
smoothScatter(a_means, d_means, xlab="Average Intensity", ylab="Ratio", main=paste(treatment,"vs",control, "(After VSN normalization)"))#
points(a_means[rownames(imp_genes_exprs)], d_means[rownames(imp_genes_exprs)], pch=8,col="red")#
points(a_means[as.character(sam_results[["Name"]])], d_means[as.character(sam_results[["Name"]])], pch=20,col="green")#
#
#MAplot of normalize data #
d_means <- rowMeans(e_matrix[, 4:6]) - rowMeans(e_matrix[, 1:3])#
a_means <- rowMeans(e_matrix)#
smoothScatter(a_means, d_means, xlab="Average Intensity", ylab="Ratio", main=paste(treatment,"vs",control, "(After VSN normalization)"))#
#points(a_means[rownames(imp_genes_exprs)], d_means[rownames(imp_genes_exprs)], pch=8,col="red")#
points(a_means[as.character(sam_results[["Name"]])], d_means[as.character(sam_results[["Name"]])], pch=20,col="green")#
#
#MAplot of normalize data #
d_means <- rowMeans(e_matrix[, 4:6]) - rowMeans(e_matrix[, 1:3])#
a_means <- rowMeans(e_matrix)#
smoothScatter(a_means, d_means, xlab="Average Intensity", ylab="Ratio", main=paste(treatment,"vs",control, "(After VSN normalization)"))#
points(a_means[rownames(imp_genes_exprs)], d_means[rownames(imp_genes_exprs)], pch=8,col="red")#
#points(a_means[as.character(sam_results[["Name"]])], d_means[as.character(sam_results[["Name"]])], pch=20,col="green")#
#
save(e_matrix, eset, file=paste(out_path, out_name,".RData", sep=""))#
#
dev.off()
length(list.siggenes(sam.out,1.1))
length(list.siggenes(sam.out,thres))
rm(list=ls(all=TRUE))#
#Libraries#
library(oligo)#
library("pd.110413.mglo.cag.exp")#
#
#Functions#
#
#build data.frame with signals information to be used for ggplot graphics#
ggplot_dataframe = function(x) {#
#
	exprs_df <- data.frame(signal= numeric(), Dataset=factor(),  Treatment= factor())#
	if (class(x) == "ExpressionFeatureSet") {#
		for (i in 1:length(pm(x)[1,])) {#
			Dataset <- colnames(pm(x))[i]#
			signals <- pm(x)[,i]#
			Treatment <- as.character(x[["Sample_Name"]][i])#
			exprs_df <- rbind(#
							exprs_df,#
							data.frame(#
								signal=signals,#
								Dataset=rep(Dataset,length(signals)),#
								Treatment=rep(Treatment,length(signals)))#
							)#
		}#
	}#
	else {#
		for (i in 1:length(exprs(x)[1,])) {#
			Dataset <- colnames(exprs(x))[i]#
			signals <- exprs(x)[,i]#
			Treatment <- as.character(x[["Sample_Name"]][i])#
			exprs_df <- rbind(#
							exprs_df,#
							data.frame(#
								signal=signals,#
								Dataset=rep(Dataset,length(signals)),#
								Treatment=rep(Treatment,length(signals)))#
							)#
		}#
	}#
	return(exprs_df)#
}#
#++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++#
out_path = "~/Documents/Yulien_data/Scripts/DEG_Analysis/"#
out_base_name = "DEG_AnalysisVSN_SAM"#
#Treatment and control to analyse #
treatment <- "4DST80"#
control <- "4DS"#
out_name = paste(out_base_name,"_",treatment,"vs",control,sep="")#
#Device#
#pdf(paste(out_path, out_name, ".pdf", sep=""))#
#++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++#
#
#Input Data#
#xys_files#
xys_files_path <- "~/Documents/Yulien_data/Raw_Data_Files/Pair_Files"#
xys.files <- list.xysfiles( xys_files_path, full.names=TRUE ) #list xys_files#
#phenoData#
pheno_file <- "~/Documents/Yulien_data/Design_information/chip_data.tab"#
theData = read.table(pheno_file, row.names=1, header=TRUE,sep="	")#
theData = subset(theData, select= c("Sample_Name"))#
#
lvls <- c( "channel1", "channel2", "_ALL_" )#
metadata <- data.frame( channel=factor("_ALL_", levels=lvls), labelDescription="Channels" )#
#
#AnnotatedDataFrame building#
pheno_data <- new("AnnotatedDataFrame", data=theData, varMetadata=metadata)#
#ExpressionFeatureSet building using xys_files#
raw_exprs_set <- read.xysfiles( xys.files,#
								pkgname="pd.110413.mglo.cag.exp",#
								phenoData=pheno_data,#
								sampleNames=c("M.furfur-1",#
											"M.globosa-1",#
											"M.globosa-2",#
											"M.globosa-3",#
											"M.furfur-2",#
											"4DS-1",#
											"4DST80-1",#
											"M.furfur-3",#
											"4DST80-2",#
											"4DS-2",#
											"4DST80-3",#
											"4DS-3")#
								)#
#Idexes of the datasets related to the treatment and control specified#
index_1 <- which(raw_exprs_set[["Sample_Name"]] == treatment)#
index_2 <- which(raw_exprs_set[["Sample_Name"]] == control)#
all_indexes <- c(index_1,index_2)#
#
#Create a ExpressioFeatureSet subset with the datasets related to the specified treatment and control#
exprs_set_subset <- raw_exprs_set[,all_indexes]#
#
#ggplot distribution graphics for raw data#
exprs_df <- ggplot_dataframe(exprs_set_subset)#
library(ggplot2)#
p <- ggplot(exprs_df,aes(y=log2(signal),x=Dataset))#
p + geom_boxplot(aes(fill=Treatment))#
#
p <- ggplot(exprs_df, aes(x=log2(signal)))#
p + geom_density(aes(fill=Dataset), alpha= 0.3)#
#
#ExpressionFeatureSet to matrix#
eset <- rma(exprs_set_subset, normalize=FALSE, background=FALSE)#
e_matrix <- 2^exprs(eset)#
#
#Basic MAplot applying log2 to raw data#
d_means <- log2(rowMeans(e_matrix[, 4:6])) - log2(rowMeans(e_matrix[, 1:3]))#
a_means <- (log2(rowMeans(e_matrix[,4:6])) + log2(rowMeans(e_matrix[,1:3]))) / 2#
smoothScatter(a_means, d_means, xlab="Average Intensity", ylab="Log2-ratio", main=paste(treatment,"vs",control, "(Applying log2 to raw data)"))#
#
#Signal Data Processing #
#backgroundCorrect (oligo method)#
raw <- exprs_set_subset#
#raw <- backgroundCorrect(exprs_set_subset, "rma") # Add noise to the dataset, in this case#
raw_begin <- raw#
pms = pm(raw) #ExpressionFeatureSet to matrix, ignoring spots with NA signal#
pmsVSN = vsn::vsnMatrix(pms) #vsn "normalization" of signal data#
require("vsn")#
#meanvsSd plots #
meanSdPlot(pmsVSN, ranks=TRUE)#
meanSdPlot(pmsVSN, ranks=FALSE)#
#vsn normalized data (vsn object)-> ExpressionFeatureSet#
pm(raw) <- exprs(pmsVSN)#
#
#ggplot distribution graphics for normalized data#
exprs_df <- ggplot_dataframe(raw)#
#
p <- ggplot(exprs_df, aes(y=signal, x=Dataset))#
p + geom_boxplot(aes(fill=Treatment)) #
#
p <- ggplot(exprs_df, aes(x=signal))#
p + geom_density(aes(fill=Dataset), alpha= 0.3)#
#summarization of normalize data using rma oligo method = median.polish#
eset <- rma(raw, normalize = FALSE, background = FALSE)#
#ExpressionSet to matrix#
e_matrix <- 2^exprs(eset)#
#
eset_treatments_info = as.character(theData[all_indexes,1])#
eset_theData = data.frame(Sample_Name= factor(eset_treatments_info, levels=unique(eset_treatments_info)))#
rownames(eset_theData) = rownames(theData)[all_indexes]#
pd <- new("AnnotatedDataFrame", data=eset_theData, varMetadata=metadata)#
eset <- new("ExpressionSet", exprs = e_matrix, phenoData = pd, annotation = "pd.110413.mglo.cag.exp")#
#
exprs_df <- ggplot_dataframe(eset)#
#
p <- ggplot(exprs_df, aes(y=signal, x=Dataset))#
p + geom_boxplot(aes(fill=Treatment))#
#
p <- ggplot(exprs_df, aes(x=signal))#
p + geom_density(aes(fill=Dataset), alpha= 0.3)#
#
#MAplot of normalize data #
d_means <- rowMeans(e_matrix[, 4:6]) - rowMeans(e_matrix[, 1:3])#
a_means <- rowMeans(e_matrix)#
smoothScatter(a_means, d_means, xlab="Average Intensity", ylab="Ratio", main=paste(treatment,"vs",control, "(After VSN normalization)"))#
#
#SAM analysis#
library(siggenes)#
exprs.cl <- c(rep(0,3),rep(1,3))#
#
sam.out <- sam(eset, exprs.cl, method= d.stat,  rand= 123)#
summary(sam.out)#
plot(sam.out)#
thres <- 2#
plot(sam.out, thres)#
top_thres <- 1.1#
sum.sam.out <- summary(sam.out, top_thres)#
sam_csv_file <- paste(out_path, out_name,"_sam.csv",sep="")#
sam2excel(sam.out,top_thres,sam_csv_file)#
num_sig_genes <- length(list.siggenes(sam.out,thres))#
#
#eBayes analysis#
library(limma)#
#
d_means <- rowMeans(e_matrix[, 4:6])-rowMeans(e_matrix[, 1:3])#
#
design <- model.matrix(~factor(eset[["Sample_Name"]]))#
fit <- lmFit(eset, design)#
ebayes <- eBayes(fit)#
lod <- -log10(ebayes[["p.value"]][,2])#
mtstat <- ebayes[["t"]][,2]#
#
o1 <- order(abs(d_means), decreasing=TRUE)[1:num_sig_genes]#
o2 <- order(abs(mtstat), decreasing=TRUE)[1:num_sig_genes]#
o <- union(o1, o2)#
#
smoothScatter(d_means, lod, main="Moderated t", xlab="Ratio", ylab="LOD")#
points(d_means[o1], lod[o1], pch=18,col="blue")#
points(d_means[o2], lod[o2], pch=8,col="red")#
#abline(h=2, v=c(-1, 1))#
#
tab <- topTable(ebayes, coef=2, adjust="fdr", n=num_sig_genes)#
ebayes_csv_file <- paste(out_path, out_name,"ebayes.csv",sep="")#
write.csv(tab, file=ebayes_csv_file, row.names=FALSE)#
#
imp_genes <- head((tab$ID),num_sig_genes)#
imp_genes_exprs <- matrix(nrow=num_sig_genes,ncol=6)#
rownames(imp_genes_exprs) <- imp_genes#
colnames(imp_genes_exprs) <- colnames(e_matrix)#
for (i in imp_genes) {#
	print(i)#
	print(e_matrix[i,])#
	imp_genes_exprs[i,] <-  e_matrix[i,]#
}#
#
e_matrix <- exprs(eset)
MAplot of normalize data #
d_means <- rowMeans(e_matrix[, 4:6]) - rowMeans(e_matrix[, 1:3])#
a_means <- rowMeans(e_matrix)#
smoothScatter(a_means, d_means, xlab="Average Intensity", ylab="Ratio", main=paste(treatment,"vs",control, "(After VSN normalization (SAM and ebayes))"))#
points(a_means[rownames(imp_genes_exprs)], d_means[rownames(imp_genes_exprs)], pch=8,col="red")#
points(a_means[as.character(sam_results[["Name"]])], d_means[as.character(sam_results[["Name"]])], pch=20,col="green")
sam_results <- read.csv(sam_csv_file, skip=19, header=TRUE)
sam_results
sam_results[1:num_sig_genes,]
library("pd.110413.mglo.cag.exp")
exit
library(topGO)
source("http://bioconductor.org/biociLite.R")
source("http://bioconductor.org/biocLite.R")
biocLite()
ls
source("http://bioconductor.org/biocLite.R")
biocLite("topGO")
libary(topGO)
library(topGO)
library(ALL)
library('ALL'')
'
library('ALL')
library("Biobase"")
"
library("Biobase")
library("ALL")
biocLite("ALL")
library("ALL")
data(ALL)
data(genelist)
data(geneList)
class(annotation(ALL))
annotation(ALL)
affyLib <- paste(annotation(ALL), "db", sep = ".")
class(affyLib)
affyLib
library(package = affyLib, character.only = TRUE)
annotation(ALL)
library("hgu95av2.db")
library("hgu95av2")
library("hgu95av2.db", character.only=TRUE)
library("hgu95av2.db")
library(topGO)#
library(ALL)#
data(ALL)#
data(geneList)
affyLib <- paste(annotation(ALL), "db", sep = ".")#
library(package = affyLib, character.only = TRUE)
sum(topDiffGenes(geneList))
sampleGOdata <- new("topGOdata", #
                    description = "Simple session", ontology = "BP",#
                    allGenes = geneList, geneSel = topDiffGenes,#
                    nodeSize = 10,#
                    annot = annFUN.db, affyLib = affyLib)
biocLite("hgu95av2.db")
library(package = affyLib, character.only = TRUE)
class(geneList)
sum(topDiffGenes(geneList))
topDiffGenes(geneList)
sampleGOdata <- new("topGOdata", #
                    description = "Simple session", ontology = "BP",#
                    allGenes = geneList, geneSel = topDiffGenes,#
                    nodeSize = 10,#
                    annot = annFUN.db, affyLib = affyLib)
sampleGOdata <- new("topGOdata", #
                    description = "Simple session", ontology = "BP",#
                    allGenes = geneList, geneSel = topDiffGenes,#
                    nodeSize = 5,#
                    annot = annFUN.db, affyLib = affyLib)
sampleGOdata
sampleGOdata <- new("topGOdata", #
                    description = "Simple session", ontology = "BP",#
                    allGenes = geneList, geneSel = topDiffGenes,#
                    nodeSize = 10,#
                    annot = annFUN.db, affyLib = affyLib)
sampleGOdata
citation("topGO")
resultFisher <- runTest(sampleGOdata, algorithm = "classic", statistic = "fisher")
resultFisher
resultKS <- runTest(sampleGOdata, algorithm = "classic", statistic = "ks")
resultKS.elim <- runTest(sampleGOdata, algorithm = "elim", statistic = "ks")
class(resultKS.elim)
allRes <- GenTable(sampleGOdata, classicFisher = resultFisher, #
                   classicKS = resultKS, elimKS = resultKS.elim,#
                   orderBy = "elimKS", ranksOf = "classicFisher", topNodes = 10)
pValue.classic <- score(resultKS)#
pValue.elim <- score(resultKS.elim)[names(pValue.classic)]#
#
gstat <- termStat(sampleGOdata, names(pValue.classic))#
gSize <- gstat$Annotated / max(gstat$Annotated) * 4#
gCol <- colMap(gstat$Significant)#
#
par(mfcol = c(1, 2), cex = 1)#
plot(pValue.classic, pValue.elim, xlab = "p-value classic", ylab = "p-value elim",#
     pch = 19, cex = gSize, col = gCol)#
#
plot(pValue.classic, pValue.elim, log = "xy", xlab = "log(p-value) classic", ylab = "log(p-value) elim",#
     pch = 19, cex = gSize, col = gCol)
if(require(xtable))#
  print(xtable(apply(allRes, 2, as.character)), floating = FALSE)
colMap <- function(x) {#
  .col <- rep(rev(heat.colors(length(unique(x)))), time = table(x))#
  return(.col[match(1:length(x), order(x))])#
}
pValue.classic <- score(resultKS)#
pValue.elim <- score(resultKS.elim)[names(pValue.classic)]#
#
gstat <- termStat(sampleGOdata, names(pValue.classic))#
gSize <- gstat$Annotated / max(gstat$Annotated) * 4#
gCol <- colMap(gstat$Significant)#
#
par(mfcol = c(1, 2), cex = 1)#
plot(pValue.classic, pValue.elim, xlab = "p-value classic", ylab = "p-value elim",#
     pch = 19, cex = gSize, col = gCol)#
#
plot(pValue.classic, pValue.elim, log = "xy", xlab = "log(p-value) classic", ylab = "log(p-value) elim",#
     pch = 19, cex = gSize, col = gCol)
rm(list=ls(all=TRUE))#
#Libraries#
library(oligo)#
library("pd.110413.mglo.cag.exp")#
#
#Functions#
#
#build data.frame with signals information to be used for ggplot graphics#
ggplot_dataframe = function(x) {#
#
	exprs_df <- data.frame(signal= numeric(), Dataset=factor(),  Treatment= factor())#
	if (class(x) == "ExpressionFeatureSet") {#
		for (i in 1:length(pm(x)[1,])) {#
			Dataset <- colnames(pm(x))[i]#
			signals <- pm(x)[,i]#
			Treatment <- as.character(x[["Sample_Name"]][i])#
			exprs_df <- rbind(#
							exprs_df,#
							data.frame(#
								signal=signals,#
								Dataset=rep(Dataset,length(signals)),#
								Treatment=rep(Treatment,length(signals)))#
							)#
		}#
	}#
	else {#
		for (i in 1:length(exprs(x)[1,])) {#
			Dataset <- colnames(exprs(x))[i]#
			signals <- exprs(x)[,i]#
			Treatment <- as.character(x[["Sample_Name"]][i])#
			exprs_df <- rbind(#
							exprs_df,#
							data.frame(#
								signal=signals,#
								Dataset=rep(Dataset,length(signals)),#
								Treatment=rep(Treatment,length(signals)))#
							)#
		}#
	}#
	return(exprs_df)#
}#
#++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++#
out_path = "../DEG_Analysis/"#
out_base_name = "DEG_AnalysisVSN_SAM"#
#Treatment and control to analyse #
treatment <- "M.furfur"#
control <- "M.globosa"#
out_name = paste(out_base_name,"_",treatment,"vs",control,sep="")#
#Device#
pdf(paste(out_path, out_name, ".pdf", sep=""))#
#++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++#
#
#Input Data#
#xys_files#
xys_files_path <- "../Raw_Data_Files/Pair_Files"#
xys.files <- list.xysfiles( xys_files_path, full.names=TRUE ) #list xys_files#
#phenoData#
pheno_file <- "../Design_information/chip_data.tab"#
theData = read.table(pheno_file, row.names=1, header=TRUE,sep="	")#
theData = subset(theData, select= c("Sample_Name"))#
#
lvls <- c( "channel1", "channel2", "_ALL_" )#
metadata <- data.frame( channel=factor("_ALL_", levels=lvls), labelDescription="Channels" )#
#
#AnnotatedDataFrame building#
pheno_data <- new("AnnotatedDataFrame", data=theData, varMetadata=metadata)#
#ExpressionFeatureSet building using xys_files#
raw_exprs_set <- read.xysfiles( xys.files,#
								pkgname="pd.110413.mglo.cag.exp",#
								phenoData=pheno_data,#
								sampleNames=c("M.furfur-1",#
											"M.globosa-1",#
											"M.globosa-2",#
											"M.globosa-3",#
											"M.furfur-2",#
											"4DS-1",#
											"4DST80-1",#
											"M.furfur-3",#
											"4DST80-2",#
											"4DS-2",#
											"4DST80-3",#
											"4DS-3")#
								)#
#Idexes of the datasets related to the treatment and control specified#
index_1 <- which(raw_exprs_set[["Sample_Name"]] == treatment)#
index_2 <- which(raw_exprs_set[["Sample_Name"]] == control)#
all_indexes <- c(index_1,index_2)#
#
#Create a ExpressioFeatureSet subset with the datasets related to the specified treatment and control#
exprs_set_subset <- raw_exprs_set[,all_indexes]#
#
#ggplot distribution graphics for raw data#
exprs_df <- ggplot_dataframe(exprs_set_subset)#
library(ggplot2)#
p <- ggplot(exprs_df,aes(y=log2(signal),x=Dataset))#
p + geom_boxplot(aes(fill=Treatment))#
#
p <- ggplot(exprs_df, aes(x=log2(signal)))#
p + geom_density(aes(fill=Dataset), alpha= 0.3)#
#
#ExpressionFeatureSet to matrix#
eset <- rma(exprs_set_subset, normalize=FALSE, background=FALSE)#
e_matrix <- 2^exprs(eset)#
#
#Basic MAplot applying log2 to raw data#
d_means <- log2(rowMeans(e_matrix[, 4:6])) - log2(rowMeans(e_matrix[, 1:3]))#
a_means <- (log2(rowMeans(e_matrix[,4:6])) + log2(rowMeans(e_matrix[,1:3]))) / 2#
smoothScatter(a_means, d_means, xlab="Average Intensity", ylab="Log2-ratio", main=paste(treatment,"vs",control, "(Applying log2 to raw data)"))#
#
#Signal Data Processing #
#backgroundCorrect (oligo method)#
raw <- exprs_set_subset#
#raw <- backgroundCorrect(exprs_set_subset, "rma") # Add noise to the dataset, in this case#
raw_begin <- raw#
pms = pm(raw) #ExpressionFeatureSet to matrix, ignoring spots with NA signal#
pmsVSN = vsn::vsnMatrix(pms) #vsn "normalization" of signal data#
require("vsn")#
#meanvsSd plots #
meanSdPlot(pmsVSN, ranks=TRUE)#
meanSdPlot(pmsVSN, ranks=FALSE)#
#vsn normalized data (vsn object)-> ExpressionFeatureSet#
pm(raw) <- exprs(pmsVSN)#
#
#ggplot distribution graphics for normalized data#
exprs_df <- ggplot_dataframe(raw)#
#
p <- ggplot(exprs_df, aes(y=signal, x=Dataset))#
p + geom_boxplot(aes(fill=Treatment)) #
#
p <- ggplot(exprs_df, aes(x=signal))#
p + geom_density(aes(fill=Dataset), alpha= 0.3)#
#summarization of normalize data using rma oligo method = median.polish#
eset <- rma(raw, normalize = FALSE, background = FALSE)#
#ExpressionSet to matrix#
e_matrix <- 2^exprs(eset)#
#
eset_treatments_info = as.character(theData[all_indexes,1])#
eset_theData = data.frame(Sample_Name= factor(eset_treatments_info, levels=unique(eset_treatments_info)))#
rownames(eset_theData) = rownames(theData)[all_indexes]#
pd <- new("AnnotatedDataFrame", data=eset_theData, varMetadata=metadata)#
eset <- new("ExpressionSet", exprs = e_matrix, phenoData = pd, annotation = "pd.110413.mglo.cag.exp")#
#
exprs_df <- ggplot_dataframe(eset)#
#
p <- ggplot(exprs_df, aes(y=signal, x=Dataset))#
p + geom_boxplot(aes(fill=Treatment))#
#
p <- ggplot(exprs_df, aes(x=signal))#
p + geom_density(aes(fill=Dataset), alpha= 0.3)#
#
#MAplot of normalize data #
d_means <- rowMeans(e_matrix[, 4:6]) - rowMeans(e_matrix[, 1:3])#
a_means <- rowMeans(e_matrix)#
smoothScatter(a_means, d_means, xlab="Average Intensity", ylab="Ratio", main=paste(treatment,"vs",control, "(After VSN normalization)"))#
#
#SAM analysis#
library(siggenes)#
exprs.cl <- c(rep(0,3),rep(1,3))#
#
sam.out <- sam(eset, exprs.cl, method= d.stat,  rand= 123)#
summary(sam.out)#
plot(sam.out)#
thres <- 7#
plot(sam.out, thres)#
top_thres <- 3.5#
sum.sam.out <- summary(sam.out, top_thres)#
sam_csv_file <- paste(out_path, out_name,"_sam.csv",sep="")#
sam2excel(sam.out,top_thres,sam_csv_file)#
#
sam_results <- read.csv(sam_csv_file, skip=19, header=TRUE)#
num_sig_genes <- length(list.siggenes(sam.out,thres))#
num_sig_genes_csv <- length(list.siggenes(sam.out,top_thres))#
sam_results <- sam_results[1:num_sig_genes,]#
#eBayes analysis#
library(limma)#
#
d_means <- rowMeans(e_matrix[, 4:6])-rowMeans(e_matrix[, 1:3])#
#
design <- model.matrix(~factor(eset[["Sample_Name"]]))#
fit <- lmFit(eset, design)#
ebayes <- eBayes(fit)#
lod <- -log10(ebayes[["p.value"]][,2])#
mtstat <- ebayes[["t"]][,2]#
#
o1 <- order(abs(d_means), decreasing=TRUE)[1:num_sig_genes]#
o2 <- order(abs(mtstat), decreasing=TRUE)[1:num_sig_genes]#
o <- union(o1, o2)#
#
smoothScatter(d_means, lod, main="Moderated t", xlab="Ratio", ylab="LOD")#
points(d_means[o1], lod[o1], pch=18,col="blue")#
points(d_means[o2], lod[o2], pch=8,col="red")#
#abline(h=2, v=c(-1, 1))#
#
tab <- topTable(ebayes, coef=2, adjust="fdr", n=num_sig_genes_csv)#
ebayes_csv_file <- paste(out_path, out_name,"_ebayes.csv",sep="")#
write.csv(tab, file=ebayes_csv_file, row.names=FALSE)#
#
imp_genes <- head((tab$ID),num_sig_genes)#
imp_genes_exprs <- matrix(nrow=num_sig_genes,ncol=6)#
rownames(imp_genes_exprs) <- imp_genes#
colnames(imp_genes_exprs) <- colnames(e_matrix)#
for (i in imp_genes) {#
	print(i)#
	print(e_matrix[i,])#
	imp_genes_exprs[i,] <-  e_matrix[i,]#
}#
#
e_matrix <- exprs(eset)#
#MAplot of normalize data #
d_means <- rowMeans(e_matrix[, 4:6]) - rowMeans(e_matrix[, 1:3])#
a_means <- rowMeans(e_matrix)#
smoothScatter(a_means, d_means, xlab="Average Intensity", ylab="Ratio", main=paste(treatment,"vs",control, "(After VSN normalization (SAM and ebayes))"))#
points(a_means[rownames(imp_genes_exprs)], d_means[rownames(imp_genes_exprs)], pch=8,col="red")#
points(a_means[as.character(sam_results[["Name"]])], d_means[as.character(sam_results[["Name"]])], pch=20,col="green")#
#
#MAplot of normalize data #
d_means <- rowMeans(e_matrix[, 4:6]) - rowMeans(e_matrix[, 1:3])#
a_means <- rowMeans(e_matrix)#
smoothScatter(a_means, d_means, xlab="Average Intensity", ylab="Ratio", main=paste(treatment,"vs",control, "(After VSN normalization (ebayes))"))#
#points(a_means[rownames(imp_genes_exprs)], d_means[rownames(imp_genes_exprs)], pch=8,col="red")#
points(a_means[as.character(sam_results[["Name"]])], d_means[as.character(sam_results[["Name"]])], pch=20,col="green")#
#
#MAplot of normalize data #
d_means <- rowMeans(e_matrix[, 4:6]) - rowMeans(e_matrix[, 1:3])#
a_means <- rowMeans(e_matrix)#
smoothScatter(a_means, d_means, xlab="Average Intensity", ylab="Ratio", main=paste(treatment,"vs",control, "(After VSN normalization (SAM))"))#
points(a_means[rownames(imp_genes_exprs)], d_means[rownames(imp_genes_exprs)], pch=8,col="red")#
#points(a_means[as.character(sam_results[["Name"]])], d_means[as.character(sam_results[["Name"]])], pch=20,col="green")#
#
save(e_matrix, eset, file=paste(out_path, out_name,".RData", sep=""))#
#
dev.off()
setwd('~/Dropbox/Malassezia_2013_01/Yulien_data/Scripts/')
rm(list=ls())#
library(topGO)#
library(RMySQL)#
#
con <- dbConnect(MySQL(),#
                 user='malassezia',#
                 password='malassezia',#
                 dbname='Malassezia_JGI',#
                 host='localhost')#
#
#Parameters#
treatment <- "4DST80"#
control <- "4DS"#
annotation_file <- '~/Dropbox/Malassezia_2013_01/Yulien_data/Scripts/GOannTopGO_biological_process.txt'#
p_value_SAM <- 0.005#
p_value_Ebayes <- 0.01#
ontology <- 'BP'#
nodeSize <- 5#
nodes_table = 30#
nodes_graph = 5#
table_outfile_SAM <- 'GeneTable_4DST80_vs_4DS_BP_SAM.txt'#
table_outfile_Ebayes <- 'GeneTable_4DST80_vs_4DS_BP_Ebayes.txt'#
graph_outfile_SAM <- 'Graph_4DST80_vs_4DS_BP_SAM.pdf'#
graph_outfile_Ebayes <- 'Graph_4DST80_vs_4DS_BP_Ebayes.pdf'#
file_geneID2GO <- annotation_file#
geneID2GO <- readMappings(file=file_geneID2GO)#
all_genesScores_SAM_df <- dbGetQuery(con,"SELECT name, p_value  FROM SAM_Results WHERE treatment = '4DST80' AND control= '4DS'")#
all_genesScores_Ebayes_df <- dbGetQuery(con,"SELECT name, adj_p_value  FROM Ebayes_Results WHERE treatment = '4DST80' AND control= '4DS'") #
#
all_genesScores_SAM <- all_genesScores_SAM_df$p_value#
all_genesScores_Ebayes <- all_genesScores_Ebayes_df$adj_p_value#
#
names(all_genesScores_SAM) <- all_genesScores_SAM_df$name#
names(all_genesScores_Ebayes) <- all_genesScores_Ebayes_df$name#
#
topDiffGenes_SAM <- function(allScore) {#
  return (allScore < p_value_SAM)#
}#
#
topDiffGenes_Ebayes <- function(allScore) {#
  return (allScore < p_value_Ebayes)#
}#
#
GOdata_SAM <- new("topGOdata",#
                  description = paste('GO Analysis for SAM Results:',treatment ,'vs' ,control,'.'),#
                  ontology = ontology,#
                  allGenes = all_genesScores_SAM,#
                  geneSel = topDiffGenes_SAM,#
                  annot = annFUN.gene2GO,#
                  gene2GO = geneID2GO,#
                  nodeSize = nodeSize)#
#
GOdata_Ebayes <- new("topGOdata",#
                  description = paste('GO Analysis for Ebayes Results:',treatment ,'vs' ,control,'.'),#
                  ontology = ontology,#
                  allGenes = all_genesScores_Ebayes,#
                  geneSel = topDiffGenes_Ebayes,#
                  annot = annFUN.gene2GO,#
                  gene2GO = geneID2GO,#
                  nodeSize = nodeSize)
source("http://bioconductor.org/biocLite.R")
biocLite("oligo")
rm(list=ls(all=TRUE))#
#Libraries#
library(oligo)#
library("pd.110413.mglo.cag.exp")
install.packages("~/Dropbox/Malassezia_2013_01/Yulien_data/oligo_input_files/pd.110413.mglo.cag.exp.zip", repos=NULL)
rm(list=ls(all=TRUE))#
#Libraries#
library(oligo)#
library("pd.110413.mglo.cag.exp")#
#
#Functions#
#
#build data.frame with signals information to be used for ggplot graphics#
ggplot_dataframe = function(x) {#
#
	exprs_df <- data.frame(signal= numeric(), Dataset=factor(),  Treatment= factor())#
	if (class(x) == "ExpressionFeatureSet") {#
		for (i in 1:length(pm(x)[1,])) {#
			Dataset <- colnames(pm(x))[i]#
			signals <- pm(x)[,i]#
			Treatment <- as.character(x[["Sample_Name"]][i])#
			exprs_df <- rbind(#
							exprs_df,#
							data.frame(#
								signal=signals,#
								Dataset=rep(Dataset,length(signals)),#
								Treatment=rep(Treatment,length(signals)))#
							)#
		}#
	}#
	else {#
		for (i in 1:length(exprs(x)[1,])) {#
			Dataset <- colnames(exprs(x))[i]#
			signals <- exprs(x)[,i]#
			Treatment <- as.character(x[["Sample_Name"]][i])#
			exprs_df <- rbind(#
							exprs_df,#
							data.frame(#
								signal=signals,#
								Dataset=rep(Dataset,length(signals)),#
								Treatment=rep(Treatment,length(signals)))#
							)#
		}#
	}#
	return(exprs_df)#
}#
#+++++++
out_path = "~/Dropbox/Malassezia_2013_01/Yulien_data/Scripts/"#
out_base_name = "A_VSN_Final_Results_Differential_Expression"#
#Treatment and control to analyse #
treatment <- "4DST80"#
control <- "M.furfur"#
out_name = paste(out_base_name,treatment,"vs",control,sep="")#
#Device#
pdf(paste(out_path, out_name, ".pdf", sep=""))
xys_files_path <- "~/Dropbox/Malassezia_2013_01/Yulien_data/Raw_Data_Files/Pair_Files"#
xys.files <- list.xysfiles( xys_files_path, full.names=TRUE ) #list xys_files#
#phenoData#
pheno_file <- "~/Dropbox/Malassezia_2013_01/Yulien_data/Design_information/chip_data.tab"#
theData = read.table(pheno_file, row.names=1, header=TRUE,sep="\t")#
theData = subset(theData, select= c("Sample_Name"))#
#
lvls <- c( "channel1", "channel2", "_ALL_" )#
metadata <- data.frame( channel=factor("_ALL_", levels=lvls), labelDescription="Channels" )#
#
#AnnotatedDataFrame building#
pheno_data <- new("AnnotatedDataFrame", data=theData, varMetadata=metadata)#
#ExpressionFeatureSet building using xys_files#
raw_exprs_set <- read.xysfiles( xys.files,#
								pkgname="pd.110413.mglo.cag.exp",#
								phenoData=pheno_data,#
								sampleNames=c("M.furfur-1",#
											"M.globosa-1",#
											"M.globosa-2",#
											"M.globosa-3",#
											"M.furfur-2",#
											"4DS-1",#
											"4DST80-1",#
											"M.furfur-3",#
											"4DST80-2",#
											"4DS-2",#
											"4DST80-3",#
											"4DS-3")#
								)#
#Idexes of the datasets related to the treatment and control specified#
index_1 <- which(raw_exprs_set[["Sample_Name"]] == treatment)#
index_2 <- which(raw_exprs_set[["Sample_Name"]] == control)#
all_indexes <- c(index_1,index_2)
all_indexes
library(ggplot2)#
p <- ggplot(exprs_df,aes(y=log2(signal),x=Dataset))#
p + geom_boxplot(aes(fill=Treatment)) #+ geom_jitter(alpha = I(1/300))#
#
p <- ggplot(exprs_df, aes(x=log2(signal)))#
p + geom_density(aes(fill=Dataset), alpha= 0.3)#
#
#ExpressionFeatureSet to matrix#
#
eset <- rma(exprs_set_subset, normalize=FALSE, background=FALSE)#
#
e_matrix <- 2^exprs(eset)#
#
#Basic MAplot applying log2 to raw data#
d_means <- log2(rowMeans(e_matrix[, 4:6])) - log2(rowMeans(e_matrix[, 1:3]))#
a_means <- (log2(rowMeans(e_matrix[,4:6])) + log2(rowMeans(e_matrix[,1:3]))) / 2#
smoothScatter(a_means, d_means, xlab="Average Intensity", ylab="Log2-ratio", main=paste(treatment,"vs",control, "(Applying log2 to raw data)"))#
#
#Signal Data Processing #
#bacgroundCorrect (oligo method)#
raw <- exprs_set_subset
install.packages("ggplot")
install.packages("ggplot2")
rm(list=ls(all=TRUE))#
#Libraries#
library(oligo)#
library("pd.110413.mglo.cag.exp")#
#
#Functions#
#
#build data.frame with signals information to be used for ggplot graphics#
ggplot_dataframe = function(x) {#
#
	exprs_df <- data.frame(signal= numeric(), Dataset=factor(),  Treatment= factor())#
	if (class(x) == "ExpressionFeatureSet") {#
		for (i in 1:length(pm(x)[1,])) {#
			Dataset <- colnames(pm(x))[i]#
			signals <- pm(x)[,i]#
			Treatment <- as.character(x[["Sample_Name"]][i])#
			exprs_df <- rbind(#
							exprs_df,#
							data.frame(#
								signal=signals,#
								Dataset=rep(Dataset,length(signals)),#
								Treatment=rep(Treatment,length(signals)))#
							)#
		}#
	}#
	else {#
		for (i in 1:length(exprs(x)[1,])) {#
			Dataset <- colnames(exprs(x))[i]#
			signals <- exprs(x)[,i]#
			Treatment <- as.character(x[["Sample_Name"]][i])#
			exprs_df <- rbind(#
							exprs_df,#
							data.frame(#
								signal=signals,#
								Dataset=rep(Dataset,length(signals)),#
								Treatment=rep(Treatment,length(signals)))#
							)#
		}#
	}#
	return(exprs_df)#
}#
#++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++#
out_path = "~/Dropbox/Malassezia_2013_01/Yulien_data/Scripts/"#
out_base_name = "A_VSN_Final_Results_Differential_Expression"#
#Treatment and control to analyse #
treatment <- "M.furfur"#
control <- "M.globosa"#
out_name = paste(out_base_name,treatment,"vs",control,sep="")#
#Device#
pdf(paste(out_path, out_name, ".pdf", sep=""))#
#++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++#
#
#Input Data#
#xys_files#
xys_files_path <- "~/Dropbox/Malassezia_2013_01/Yulien_data/Raw_Data_Files/Pair_Files"#
xys.files <- list.xysfiles( xys_files_path, full.names=TRUE ) #list xys_files#
#phenoData#
pheno_file <- "~/Dropbox/Malassezia_2013_01/Yulien_data/Design_information/chip_data.tab"#
theData = read.table(pheno_file, row.names=1, header=TRUE,sep="\t")#
theData = subset(theData, select= c("Sample_Name"))#
#
lvls <- c( "channel1", "channel2", "_ALL_" )#
metadata <- data.frame( channel=factor("_ALL_", levels=lvls), labelDescription="Channels" )#
#
#AnnotatedDataFrame building#
pheno_data <- new("AnnotatedDataFrame", data=theData, varMetadata=metadata)#
#ExpressionFeatureSet building using xys_files#
raw_exprs_set <- read.xysfiles( xys.files,#
								pkgname="pd.110413.mglo.cag.exp",#
								phenoData=pheno_data,#
								sampleNames=c("M.furfur-1",#
											"M.globosa-1",#
											"M.globosa-2",#
											"M.globosa-3",#
											"M.furfur-2",#
											"4DS-1",#
											"4DST80-1",#
											"M.furfur-3",#
											"4DST80-2",#
											"4DS-2",#
											"4DST80-3",#
											"4DS-3")#
								)#
#Idexes of the datasets related to the treatment and control specified#
index_1 <- which(raw_exprs_set[["Sample_Name"]] == treatment)#
index_2 <- which(raw_exprs_set[["Sample_Name"]] == control)
raw_exprs_set
head(exprs(raw_exprs_set))
eset <- rma(raw_exprs_set, normalize=FALSE, background=FALSE)
e_matrix <- 2^exprs(eset)
e_matrix
head(ematrix)
rm(list=ls(all=TRUE))#
#Libraries#
library(oligo)#
library("pd.110413.mglo.cag.exp")#
#
#Functions#
#
#build data.frame with signals information to be used for ggplot graphics#
ggplot_dataframe = function(x) {#
#
	exprs_df <- data.frame(signal= numeric(), Dataset=factor(),  Treatment= factor())#
	if (class(x) == "ExpressionFeatureSet") {#
		for (i in 1:length(pm(x)[1,])) {#
			Dataset <- colnames(pm(x))[i]#
			signals <- pm(x)[,i]#
			Treatment <- as.character(x[["Sample_Name"]][i])#
			exprs_df <- rbind(#
							exprs_df,#
							data.frame(#
								signal=signals,#
								Dataset=rep(Dataset,length(signals)),#
								Treatment=rep(Treatment,length(signals)))#
							)#
		}#
	}#
	else {#
		for (i in 1:length(exprs(x)[1,])) {#
			Dataset <- colnames(exprs(x))[i]#
			signals <- exprs(x)[,i]#
			Treatment <- as.character(x[["Sample_Name"]][i])#
			exprs_df <- rbind(#
							exprs_df,#
							data.frame(#
								signal=signals,#
								Dataset=rep(Dataset,length(signals)),#
								Treatment=rep(Treatment,length(signals)))#
							)#
		}#
	}#
	return(exprs_df)#
}#
#++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++#
out_path = "~/Dropbox/Malassezia_2013_01/Yulien_data/Scripts/"#
out_base_name = "A_VSN_Final_Results_Differential_Expression"#
#Treatment and control to analyse #
treatment <- "M.furfur"#
control <- "M.globosa"#
out_name = paste(out_base_name,treatment,"vs",control,sep="")#
#Device#
pdf(paste(out_path, out_name, ".pdf", sep=""))#
#++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++#
#
#Input Data#
#xys_files#
xys_files_path <- "~/Dropbox/Malassezia_2013_01/Yulien_data/Raw_Data_Files/Pair_Files"#
xys.files <- list.xysfiles( xys_files_path, full.names=TRUE ) #list xys_files#
#phenoData#
pheno_file <- "~/Dropbox/Malassezia_2013_01/Yulien_data/Design_information/chip_data.tab"#
theData = read.table(pheno_file, row.names=1, header=TRUE,sep="\t")#
theData = subset(theData, select= c("Sample_Name"))#
#
lvls <- c( "channel1", "channel2", "_ALL_" )#
metadata <- data.frame( channel=factor("_ALL_", levels=lvls), labelDescription="Channels" )#
#
#AnnotatedDataFrame building#
pheno_data <- new("AnnotatedDataFrame", data=theData, varMetadata=metadata)#
#ExpressionFeatureSet building using xys_files#
raw_exprs_set <- read.xysfiles( xys.files,#
								pkgname="pd.110413.mglo.cag.exp",#
								phenoData=pheno_data,#
								sampleNames=c("M.furfur-1",#
											"M.globosa-1",#
											"M.globosa-2",#
											"M.globosa-3",#
											"M.furfur-2",#
											"4DS-1",#
											"4DST80-1",#
											"M.furfur-3",#
											"4DST80-2",#
											"4DS-2",#
											"4DST80-3",#
											"4DS-3")#
								)
eset <- rma(raw_exprs_set, normalize=FALSE, background=FALSE)
e_matrix <- 2^exprs(eset)
class(e_matrix)
head(e_matrix)
?ave
head(mean(e_matrix[,c[1,5,8]]))
